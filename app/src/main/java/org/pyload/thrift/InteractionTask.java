/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.pyload.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class InteractionTask implements org.apache.thrift.TBase<InteractionTask, InteractionTask._Fields>, java.io.Serializable, Cloneable, Comparable<InteractionTask>, android.os.Parcelable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InteractionTask");

    private static final org.apache.thrift.protocol.TField IID_FIELD_DESC = new org.apache.thrift.protocol.TField("iid", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("input", org.apache.thrift.protocol.TType.I32, (short) 2);
    private static final org.apache.thrift.protocol.TField STRUCTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("structure", org.apache.thrift.protocol.TType.LIST, (short) 3);
    private static final org.apache.thrift.protocol.TField PRESET_FIELD_DESC = new org.apache.thrift.protocol.TField("preset", org.apache.thrift.protocol.TType.LIST, (short) 4);
    private static final org.apache.thrift.protocol.TField OUTPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("output", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short) 6);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short) 7);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short) 8);
    private static final org.apache.thrift.protocol.TField PLUGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("plugin", org.apache.thrift.protocol.TType.STRING, (short) 9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new InteractionTaskStandardSchemeFactory());
        schemes.put(TupleScheme.class, new InteractionTaskTupleSchemeFactory());
    }

    public int iid; // required
    /**
     *
     * @see Input
     */
    public Input input; // required
    public List<String> structure; // required
    public List<String> preset; // required
    /**
     *
     * @see Output
     */
    public Output output; // required
    public List<String> data; // required
    public String title; // required
    public String description; // required
    public String plugin; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
        //primitive bitfield of type: byte
        out.writeByte(__isset_bitfield);

        out.writeInt(iid);
        out.writeInt(input.getValue());
        out.writeList(structure);
        out.writeList(preset);
        out.writeInt(output.getValue());
        out.writeList(data);
        out.writeString(title);
        out.writeString(description);
        out.writeString(plugin);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    public InteractionTask(android.os.Parcel in) {
        //primitive bitfield of type: byte
        __isset_bitfield = in.readByte();

        this.iid = in.readInt();
        this.input = Input.findByValue(in.readInt());
        this.structure = new ArrayList<String>();
        in.readList(this.structure, InteractionTask.class.getClassLoader());
        this.preset = new ArrayList<String>();
        in.readList(this.preset, InteractionTask.class.getClassLoader());
        this.output = Output.findByValue(in.readInt());
        this.data = new ArrayList<String>();
        in.readList(this.data, InteractionTask.class.getClassLoader());
        this.title = in.readString();
        this.description = in.readString();
        this.plugin = in.readString();
    }

    public static final android.os.Parcelable.Creator<InteractionTask> CREATOR = new android.os.Parcelable.Creator<InteractionTask>() {
        @Override
        public InteractionTask[] newArray(int size) {
            return new InteractionTask[size];
        }

        @Override
        public InteractionTask createFromParcel(android.os.Parcel in) {
            return new InteractionTask(in);
        }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        IID((short) 1, "iid"),
        /**
         *
         * @see Input
         */
        INPUT((short) 2, "input"),
        STRUCTURE((short) 3, "structure"),
        PRESET((short) 4, "preset"),
        /**
         *
         * @see Output
         */
        OUTPUT((short) 5, "output"),
        DATA((short) 6, "data"),
        TITLE((short) 7, "title"),
        DESCRIPTION((short) 8, "description"),
        PLUGIN((short) 9, "plugin");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // IID
                    return IID;
                case 2: // INPUT
                    return INPUT;
                case 3: // STRUCTURE
                    return STRUCTURE;
                case 4: // PRESET
                    return PRESET;
                case 5: // OUTPUT
                    return OUTPUT;
                case 6: // DATA
                    return DATA;
                case 7: // TITLE
                    return TITLE;
                case 8: // DESCRIPTION
                    return DESCRIPTION;
                case 9: // PLUGIN
                    return PLUGIN;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __IID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.IID, new org.apache.thrift.meta_data.FieldMetaData("iid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "InteractionID")));
        tmpMap.put(_Fields.INPUT, new org.apache.thrift.meta_data.FieldMetaData("input", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Input.class)));
        tmpMap.put(_Fields.STRUCTURE, new org.apache.thrift.meta_data.FieldMetaData("structure", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.PRESET, new org.apache.thrift.meta_data.FieldMetaData("preset", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.OUTPUT, new org.apache.thrift.meta_data.FieldMetaData("output", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Output.class)));
        tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PLUGIN, new org.apache.thrift.meta_data.FieldMetaData("plugin", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InteractionTask.class, metaDataMap);
    }

    public InteractionTask() {
    }

    public InteractionTask(
            int iid,
            Input input,
            List<String> structure,
            List<String> preset,
            Output output,
            List<String> data,
            String title,
            String description,
            String plugin) {
        this();
        this.iid = iid;
        setIidIsSet(true);
        this.input = input;
        this.structure = structure;
        this.preset = preset;
        this.output = output;
        this.data = data;
        this.title = title;
        this.description = description;
        this.plugin = plugin;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public InteractionTask(InteractionTask other) {
        __isset_bitfield = other.__isset_bitfield;
        this.iid = other.iid;
        if (other.isSetInput()) {
            this.input = other.input;
        }
        if (other.isSetStructure()) {
            List<String> __this__structure = new ArrayList<String>(other.structure);
            this.structure = __this__structure;
        }
        if (other.isSetPreset()) {
            List<String> __this__preset = new ArrayList<String>(other.preset);
            this.preset = __this__preset;
        }
        if (other.isSetOutput()) {
            this.output = other.output;
        }
        if (other.isSetData()) {
            List<String> __this__data = new ArrayList<String>(other.data);
            this.data = __this__data;
        }
        if (other.isSetTitle()) {
            this.title = other.title;
        }
        if (other.isSetDescription()) {
            this.description = other.description;
        }
        if (other.isSetPlugin()) {
            this.plugin = other.plugin;
        }
    }

    public InteractionTask deepCopy() {
        return new InteractionTask(this);
    }

    @Override
    public void clear() {
        setIidIsSet(false);
        this.iid = 0;
        this.input = null;
        this.structure = null;
        this.preset = null;
        this.output = null;
        this.data = null;
        this.title = null;
        this.description = null;
        this.plugin = null;
    }

    public int getIid() {
        return this.iid;
    }

    public InteractionTask setIid(int iid) {
        this.iid = iid;
        setIidIsSet(true);
        return this;
    }

    public void unsetIid() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IID_ISSET_ID);
    }

    /** Returns true if field iid is set (has been assigned a value) and false otherwise */
    public boolean isSetIid() {
        return EncodingUtils.testBit(__isset_bitfield, __IID_ISSET_ID);
    }

    public void setIidIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IID_ISSET_ID, value);
    }

    /**
     *
     * @see Input
     */
    public Input getInput() {
        return this.input;
    }

    /**
     *
     * @see Input
     */
    public InteractionTask setInput(Input input) {
        this.input = input;
        return this;
    }

    public void unsetInput() {
        this.input = null;
    }

    /** Returns true if field input is set (has been assigned a value) and false otherwise */
    public boolean isSetInput() {
        return this.input != null;
    }

    public void setInputIsSet(boolean value) {
        if (!value) {
            this.input = null;
        }
    }

    public int getStructureSize() {
        return (this.structure == null) ? 0 : this.structure.size();
    }

    public java.util.Iterator<String> getStructureIterator() {
        return (this.structure == null) ? null : this.structure.iterator();
    }

    public void addToStructure(String elem) {
        if (this.structure == null) {
            this.structure = new ArrayList<String>();
        }
        this.structure.add(elem);
    }

    public List<String> getStructure() {
        return this.structure;
    }

    public InteractionTask setStructure(List<String> structure) {
        this.structure = structure;
        return this;
    }

    public void unsetStructure() {
        this.structure = null;
    }

    /** Returns true if field structure is set (has been assigned a value) and false otherwise */
    public boolean isSetStructure() {
        return this.structure != null;
    }

    public void setStructureIsSet(boolean value) {
        if (!value) {
            this.structure = null;
        }
    }

    public int getPresetSize() {
        return (this.preset == null) ? 0 : this.preset.size();
    }

    public java.util.Iterator<String> getPresetIterator() {
        return (this.preset == null) ? null : this.preset.iterator();
    }

    public void addToPreset(String elem) {
        if (this.preset == null) {
            this.preset = new ArrayList<String>();
        }
        this.preset.add(elem);
    }

    public List<String> getPreset() {
        return this.preset;
    }

    public InteractionTask setPreset(List<String> preset) {
        this.preset = preset;
        return this;
    }

    public void unsetPreset() {
        this.preset = null;
    }

    /** Returns true if field preset is set (has been assigned a value) and false otherwise */
    public boolean isSetPreset() {
        return this.preset != null;
    }

    public void setPresetIsSet(boolean value) {
        if (!value) {
            this.preset = null;
        }
    }

    /**
     *
     * @see Output
     */
    public Output getOutput() {
        return this.output;
    }

    /**
     *
     * @see Output
     */
    public InteractionTask setOutput(Output output) {
        this.output = output;
        return this;
    }

    public void unsetOutput() {
        this.output = null;
    }

    /** Returns true if field output is set (has been assigned a value) and false otherwise */
    public boolean isSetOutput() {
        return this.output != null;
    }

    public void setOutputIsSet(boolean value) {
        if (!value) {
            this.output = null;
        }
    }

    public int getDataSize() {
        return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<String> getDataIterator() {
        return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(String elem) {
        if (this.data == null) {
            this.data = new ArrayList<String>();
        }
        this.data.add(elem);
    }

    public List<String> getData() {
        return this.data;
    }

    public InteractionTask setData(List<String> data) {
        this.data = data;
        return this;
    }

    public void unsetData() {
        this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
        return this.data != null;
    }

    public void setDataIsSet(boolean value) {
        if (!value) {
            this.data = null;
        }
    }

    public String getTitle() {
        return this.title;
    }

    public InteractionTask setTitle(String title) {
        this.title = title;
        return this;
    }

    public void unsetTitle() {
        this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
        return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
        if (!value) {
            this.title = null;
        }
    }

    public String getDescription() {
        return this.description;
    }

    public InteractionTask setDescription(String description) {
        this.description = description;
        return this;
    }

    public void unsetDescription() {
        this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
        return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
        if (!value) {
            this.description = null;
        }
    }

    public String getPlugin() {
        return this.plugin;
    }

    public InteractionTask setPlugin(String plugin) {
        this.plugin = plugin;
        return this;
    }

    public void unsetPlugin() {
        this.plugin = null;
    }

    /** Returns true if field plugin is set (has been assigned a value) and false otherwise */
    public boolean isSetPlugin() {
        return this.plugin != null;
    }

    public void setPluginIsSet(boolean value) {
        if (!value) {
            this.plugin = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case IID:
                if (value == null) {
                    unsetIid();
                } else {
                    setIid((Integer) value);
                }
                break;

            case INPUT:
                if (value == null) {
                    unsetInput();
                } else {
                    setInput((Input) value);
                }
                break;

            case STRUCTURE:
                if (value == null) {
                    unsetStructure();
                } else {
                    setStructure((List<String>) value);
                }
                break;

            case PRESET:
                if (value == null) {
                    unsetPreset();
                } else {
                    setPreset((List<String>) value);
                }
                break;

            case OUTPUT:
                if (value == null) {
                    unsetOutput();
                } else {
                    setOutput((Output) value);
                }
                break;

            case DATA:
                if (value == null) {
                    unsetData();
                } else {
                    setData((List<String>) value);
                }
                break;

            case TITLE:
                if (value == null) {
                    unsetTitle();
                } else {
                    setTitle((String) value);
                }
                break;

            case DESCRIPTION:
                if (value == null) {
                    unsetDescription();
                } else {
                    setDescription((String) value);
                }
                break;

            case PLUGIN:
                if (value == null) {
                    unsetPlugin();
                } else {
                    setPlugin((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case IID:
                return getIid();

            case INPUT:
                return getInput();

            case STRUCTURE:
                return getStructure();

            case PRESET:
                return getPreset();

            case OUTPUT:
                return getOutput();

            case DATA:
                return getData();

            case TITLE:
                return getTitle();

            case DESCRIPTION:
                return getDescription();

            case PLUGIN:
                return getPlugin();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case IID:
                return isSetIid();
            case INPUT:
                return isSetInput();
            case STRUCTURE:
                return isSetStructure();
            case PRESET:
                return isSetPreset();
            case OUTPUT:
                return isSetOutput();
            case DATA:
                return isSetData();
            case TITLE:
                return isSetTitle();
            case DESCRIPTION:
                return isSetDescription();
            case PLUGIN:
                return isSetPlugin();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof InteractionTask)
            return this.equals((InteractionTask) that);
        return false;
    }

    public boolean equals(InteractionTask that) {
        if (that == null)
            return false;

        boolean this_present_iid = true;
        boolean that_present_iid = true;
        if (this_present_iid || that_present_iid) {
            if (!(this_present_iid && that_present_iid))
                return false;
            if (this.iid != that.iid)
                return false;
        }

        boolean this_present_input = true && this.isSetInput();
        boolean that_present_input = true && that.isSetInput();
        if (this_present_input || that_present_input) {
            if (!(this_present_input && that_present_input))
                return false;
            if (!this.input.equals(that.input))
                return false;
        }

        boolean this_present_structure = true && this.isSetStructure();
        boolean that_present_structure = true && that.isSetStructure();
        if (this_present_structure || that_present_structure) {
            if (!(this_present_structure && that_present_structure))
                return false;
            if (!this.structure.equals(that.structure))
                return false;
        }

        boolean this_present_preset = true && this.isSetPreset();
        boolean that_present_preset = true && that.isSetPreset();
        if (this_present_preset || that_present_preset) {
            if (!(this_present_preset && that_present_preset))
                return false;
            if (!this.preset.equals(that.preset))
                return false;
        }

        boolean this_present_output = true && this.isSetOutput();
        boolean that_present_output = true && that.isSetOutput();
        if (this_present_output || that_present_output) {
            if (!(this_present_output && that_present_output))
                return false;
            if (!this.output.equals(that.output))
                return false;
        }

        boolean this_present_data = true && this.isSetData();
        boolean that_present_data = true && that.isSetData();
        if (this_present_data || that_present_data) {
            if (!(this_present_data && that_present_data))
                return false;
            if (!this.data.equals(that.data))
                return false;
        }

        boolean this_present_title = true && this.isSetTitle();
        boolean that_present_title = true && that.isSetTitle();
        if (this_present_title || that_present_title) {
            if (!(this_present_title && that_present_title))
                return false;
            if (!this.title.equals(that.title))
                return false;
        }

        boolean this_present_description = true && this.isSetDescription();
        boolean that_present_description = true && that.isSetDescription();
        if (this_present_description || that_present_description) {
            if (!(this_present_description && that_present_description))
                return false;
            if (!this.description.equals(that.description))
                return false;
        }

        boolean this_present_plugin = true && this.isSetPlugin();
        boolean that_present_plugin = true && that.isSetPlugin();
        if (this_present_plugin || that_present_plugin) {
            if (!(this_present_plugin && that_present_plugin))
                return false;
            if (!this.plugin.equals(that.plugin))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_iid = true;
        list.add(present_iid);
        if (present_iid)
            list.add(iid);

        boolean present_input = true && (isSetInput());
        list.add(present_input);
        if (present_input)
            list.add(input.getValue());

        boolean present_structure = true && (isSetStructure());
        list.add(present_structure);
        if (present_structure)
            list.add(structure);

        boolean present_preset = true && (isSetPreset());
        list.add(present_preset);
        if (present_preset)
            list.add(preset);

        boolean present_output = true && (isSetOutput());
        list.add(present_output);
        if (present_output)
            list.add(output.getValue());

        boolean present_data = true && (isSetData());
        list.add(present_data);
        if (present_data)
            list.add(data);

        boolean present_title = true && (isSetTitle());
        list.add(present_title);
        if (present_title)
            list.add(title);

        boolean present_description = true && (isSetDescription());
        list.add(present_description);
        if (present_description)
            list.add(description);

        boolean present_plugin = true && (isSetPlugin());
        list.add(present_plugin);
        if (present_plugin)
            list.add(plugin);

        return list.hashCode();
    }

    @Override
    public int compareTo(InteractionTask other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetIid()).compareTo(other.isSetIid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIid()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iid, other.iid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetInput()).compareTo(other.isSetInput());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetInput()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input, other.input);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetStructure()).compareTo(other.isSetStructure());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStructure()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.structure, other.structure);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPreset()).compareTo(other.isSetPreset());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPreset()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preset, other.preset);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOutput()).compareTo(other.isSetOutput());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOutput()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output, other.output);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetData()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTitle()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDescription()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPlugin()).compareTo(other.isSetPlugin());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPlugin()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plugin, other.plugin);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InteractionTask(");
        boolean first = true;

        sb.append("iid:");
        sb.append(this.iid);
        first = false;
        if (!first) sb.append(", ");
        sb.append("input:");
        if (this.input == null) {
            sb.append("null");
        } else {
            sb.append(this.input);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("structure:");
        if (this.structure == null) {
            sb.append("null");
        } else {
            sb.append(this.structure);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("preset:");
        if (this.preset == null) {
            sb.append("null");
        } else {
            sb.append(this.preset);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("output:");
        if (this.output == null) {
            sb.append("null");
        } else {
            sb.append(this.output);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("data:");
        if (this.data == null) {
            sb.append("null");
        } else {
            sb.append(this.data);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("title:");
        if (this.title == null) {
            sb.append("null");
        } else {
            sb.append(this.title);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("description:");
        if (this.description == null) {
            sb.append("null");
        } else {
            sb.append(this.description);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("plugin:");
        if (this.plugin == null) {
            sb.append("null");
        } else {
            sb.append(this.plugin);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class InteractionTaskStandardSchemeFactory implements SchemeFactory {
        public InteractionTaskStandardScheme getScheme() {
            return new InteractionTaskStandardScheme();
        }
    }

    private static class InteractionTaskStandardScheme extends StandardScheme<InteractionTask> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, InteractionTask struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // IID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.iid = iprot.readI32();
                            struct.setIidIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // INPUT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.input = org.pyload.thrift.Input.findByValue(iprot.readI32());
                            struct.setInputIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // STRUCTURE
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                                struct.structure = new ArrayList<String>(_list24.size);
                                String _elem25;
                                for (int _i26 = 0; _i26 < _list24.size; ++_i26) {
                                    _elem25 = iprot.readString();
                                    struct.structure.add(_elem25);
                                }
                                iprot.readListEnd();
                            }
                            struct.setStructureIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // PRESET
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                                struct.preset = new ArrayList<String>(_list27.size);
                                String _elem28;
                                for (int _i29 = 0; _i29 < _list27.size; ++_i29) {
                                    _elem28 = iprot.readString();
                                    struct.preset.add(_elem28);
                                }
                                iprot.readListEnd();
                            }
                            struct.setPresetIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // OUTPUT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.output = org.pyload.thrift.Output.findByValue(iprot.readI32());
                            struct.setOutputIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // DATA
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                                struct.data = new ArrayList<String>(_list30.size);
                                String _elem31;
                                for (int _i32 = 0; _i32 < _list30.size; ++_i32) {
                                    _elem31 = iprot.readString();
                                    struct.data.add(_elem31);
                                }
                                iprot.readListEnd();
                            }
                            struct.setDataIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // TITLE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.title = iprot.readString();
                            struct.setTitleIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // DESCRIPTION
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.description = iprot.readString();
                            struct.setDescriptionIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // PLUGIN
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.plugin = iprot.readString();
                            struct.setPluginIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, InteractionTask struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(IID_FIELD_DESC);
            oprot.writeI32(struct.iid);
            oprot.writeFieldEnd();
            if (struct.input != null) {
                oprot.writeFieldBegin(INPUT_FIELD_DESC);
                oprot.writeI32(struct.input.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.structure != null) {
                oprot.writeFieldBegin(STRUCTURE_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.structure.size()));
                    for (String _iter33 : struct.structure) {
                        oprot.writeString(_iter33);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.preset != null) {
                oprot.writeFieldBegin(PRESET_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.preset.size()));
                    for (String _iter34 : struct.preset) {
                        oprot.writeString(_iter34);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.output != null) {
                oprot.writeFieldBegin(OUTPUT_FIELD_DESC);
                oprot.writeI32(struct.output.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.data != null) {
                oprot.writeFieldBegin(DATA_FIELD_DESC);
                {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.data.size()));
                    for (String _iter35 : struct.data) {
                        oprot.writeString(_iter35);
                    }
                    oprot.writeListEnd();
                }
                oprot.writeFieldEnd();
            }
            if (struct.title != null) {
                oprot.writeFieldBegin(TITLE_FIELD_DESC);
                oprot.writeString(struct.title);
                oprot.writeFieldEnd();
            }
            if (struct.description != null) {
                oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
                oprot.writeString(struct.description);
                oprot.writeFieldEnd();
            }
            if (struct.plugin != null) {
                oprot.writeFieldBegin(PLUGIN_FIELD_DESC);
                oprot.writeString(struct.plugin);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class InteractionTaskTupleSchemeFactory implements SchemeFactory {
        public InteractionTaskTupleScheme getScheme() {
            return new InteractionTaskTupleScheme();
        }
    }

    private static class InteractionTaskTupleScheme extends TupleScheme<InteractionTask> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, InteractionTask struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetIid()) {
                optionals.set(0);
            }
            if (struct.isSetInput()) {
                optionals.set(1);
            }
            if (struct.isSetStructure()) {
                optionals.set(2);
            }
            if (struct.isSetPreset()) {
                optionals.set(3);
            }
            if (struct.isSetOutput()) {
                optionals.set(4);
            }
            if (struct.isSetData()) {
                optionals.set(5);
            }
            if (struct.isSetTitle()) {
                optionals.set(6);
            }
            if (struct.isSetDescription()) {
                optionals.set(7);
            }
            if (struct.isSetPlugin()) {
                optionals.set(8);
            }
            oprot.writeBitSet(optionals, 9);
            if (struct.isSetIid()) {
                oprot.writeI32(struct.iid);
            }
            if (struct.isSetInput()) {
                oprot.writeI32(struct.input.getValue());
            }
            if (struct.isSetStructure()) {
                {
                    oprot.writeI32(struct.structure.size());
                    for (String _iter36 : struct.structure) {
                        oprot.writeString(_iter36);
                    }
                }
            }
            if (struct.isSetPreset()) {
                {
                    oprot.writeI32(struct.preset.size());
                    for (String _iter37 : struct.preset) {
                        oprot.writeString(_iter37);
                    }
                }
            }
            if (struct.isSetOutput()) {
                oprot.writeI32(struct.output.getValue());
            }
            if (struct.isSetData()) {
                {
                    oprot.writeI32(struct.data.size());
                    for (String _iter38 : struct.data) {
                        oprot.writeString(_iter38);
                    }
                }
            }
            if (struct.isSetTitle()) {
                oprot.writeString(struct.title);
            }
            if (struct.isSetDescription()) {
                oprot.writeString(struct.description);
            }
            if (struct.isSetPlugin()) {
                oprot.writeString(struct.plugin);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, InteractionTask struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(9);
            if (incoming.get(0)) {
                struct.iid = iprot.readI32();
                struct.setIidIsSet(true);
            }
            if (incoming.get(1)) {
                struct.input = org.pyload.thrift.Input.findByValue(iprot.readI32());
                struct.setInputIsSet(true);
            }
            if (incoming.get(2)) {
                {
                    org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.structure = new ArrayList<String>(_list39.size);
                    String _elem40;
                    for (int _i41 = 0; _i41 < _list39.size; ++_i41) {
                        _elem40 = iprot.readString();
                        struct.structure.add(_elem40);
                    }
                }
                struct.setStructureIsSet(true);
            }
            if (incoming.get(3)) {
                {
                    org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.preset = new ArrayList<String>(_list42.size);
                    String _elem43;
                    for (int _i44 = 0; _i44 < _list42.size; ++_i44) {
                        _elem43 = iprot.readString();
                        struct.preset.add(_elem43);
                    }
                }
                struct.setPresetIsSet(true);
            }
            if (incoming.get(4)) {
                struct.output = org.pyload.thrift.Output.findByValue(iprot.readI32());
                struct.setOutputIsSet(true);
            }
            if (incoming.get(5)) {
                {
                    org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                    struct.data = new ArrayList<String>(_list45.size);
                    String _elem46;
                    for (int _i47 = 0; _i47 < _list45.size; ++_i47) {
                        _elem46 = iprot.readString();
                        struct.data.add(_elem46);
                    }
                }
                struct.setDataIsSet(true);
            }
            if (incoming.get(6)) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
            }
            if (incoming.get(7)) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
            }
            if (incoming.get(8)) {
                struct.plugin = iprot.readString();
                struct.setPluginIsSet(true);
            }
        }
    }

}

