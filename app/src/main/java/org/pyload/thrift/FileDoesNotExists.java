/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.pyload.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class FileDoesNotExists extends TException implements org.apache.thrift.TBase<FileDoesNotExists, FileDoesNotExists._Fields>, java.io.Serializable, Cloneable, Comparable<FileDoesNotExists>, android.os.Parcelable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileDoesNotExists");

    private static final org.apache.thrift.protocol.TField FID_FIELD_DESC = new org.apache.thrift.protocol.TField("fid", org.apache.thrift.protocol.TType.I32, (short) 1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new FileDoesNotExistsStandardSchemeFactory());
        schemes.put(TupleScheme.class, new FileDoesNotExistsTupleSchemeFactory());
    }

    public int fid; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
        //primitive bitfield of type: byte
        out.writeByte(__isset_bitfield);

        out.writeInt(fid);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    public FileDoesNotExists(android.os.Parcel in) {
        //primitive bitfield of type: byte
        __isset_bitfield = in.readByte();

        this.fid = in.readInt();
    }

    public static final android.os.Parcelable.Creator<FileDoesNotExists> CREATOR = new android.os.Parcelable.Creator<FileDoesNotExists>() {
        @Override
        public FileDoesNotExists[] newArray(int size) {
            return new FileDoesNotExists[size];
        }

        @Override
        public FileDoesNotExists createFromParcel(android.os.Parcel in) {
            return new FileDoesNotExists(in);
        }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        FID((short) 1, "fid");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // FID
                    return FID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __FID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.FID, new org.apache.thrift.meta_data.FieldMetaData("fid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "FileID")));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileDoesNotExists.class, metaDataMap);
    }

    public FileDoesNotExists() {
    }

    public FileDoesNotExists(
            int fid) {
        this();
        this.fid = fid;
        setFidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FileDoesNotExists(FileDoesNotExists other) {
        __isset_bitfield = other.__isset_bitfield;
        this.fid = other.fid;
    }

    public FileDoesNotExists deepCopy() {
        return new FileDoesNotExists(this);
    }

    @Override
    public void clear() {
        setFidIsSet(false);
        this.fid = 0;
    }

    public int getFid() {
        return this.fid;
    }

    public FileDoesNotExists setFid(int fid) {
        this.fid = fid;
        setFidIsSet(true);
        return this;
    }

    public void unsetFid() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FID_ISSET_ID);
    }

    /** Returns true if field fid is set (has been assigned a value) and false otherwise */
    public boolean isSetFid() {
        return EncodingUtils.testBit(__isset_bitfield, __FID_ISSET_ID);
    }

    public void setFidIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case FID:
                if (value == null) {
                    unsetFid();
                } else {
                    setFid((Integer) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case FID:
                return getFid();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case FID:
                return isSetFid();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof FileDoesNotExists)
            return this.equals((FileDoesNotExists) that);
        return false;
    }

    public boolean equals(FileDoesNotExists that) {
        if (that == null)
            return false;

        boolean this_present_fid = true;
        boolean that_present_fid = true;
        if (this_present_fid || that_present_fid) {
            if (!(this_present_fid && that_present_fid))
                return false;
            if (this.fid != that.fid)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_fid = true;
        list.add(present_fid);
        if (present_fid)
            list.add(fid);

        return list.hashCode();
    }

    @Override
    public int compareTo(FileDoesNotExists other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetFid()).compareTo(other.isSetFid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFid()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fid, other.fid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("FileDoesNotExists(");
        boolean first = true;

        sb.append("fid:");
        sb.append(this.fid);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class FileDoesNotExistsStandardSchemeFactory implements SchemeFactory {
        public FileDoesNotExistsStandardScheme getScheme() {
            return new FileDoesNotExistsStandardScheme();
        }
    }

    private static class FileDoesNotExistsStandardScheme extends StandardScheme<FileDoesNotExists> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, FileDoesNotExists struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // FID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.fid = iprot.readI32();
                            struct.setFidIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, FileDoesNotExists struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(FID_FIELD_DESC);
            oprot.writeI32(struct.fid);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class FileDoesNotExistsTupleSchemeFactory implements SchemeFactory {
        public FileDoesNotExistsTupleScheme getScheme() {
            return new FileDoesNotExistsTupleScheme();
        }
    }

    private static class FileDoesNotExistsTupleScheme extends TupleScheme<FileDoesNotExists> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, FileDoesNotExists struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetFid()) {
                optionals.set(0);
            }
            oprot.writeBitSet(optionals, 1);
            if (struct.isSetFid()) {
                oprot.writeI32(struct.fid);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, FileDoesNotExists struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(1);
            if (incoming.get(0)) {
                struct.fid = iprot.readI32();
                struct.setFidIsSet(true);
            }
        }
    }

}

