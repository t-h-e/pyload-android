/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.pyload.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class Pyload {

    public interface Iface {

        public String getConfigValue(String category, String option, String section) throws org.apache.thrift.TException;

        public void setConfigValue(String category, String option, String value, String section) throws org.apache.thrift.TException;

        public Map<String, ConfigSection> getConfig() throws org.apache.thrift.TException;

        public Map<String, ConfigSection> getPluginConfig() throws org.apache.thrift.TException;

        public void pauseServer() throws org.apache.thrift.TException;

        public void unpauseServer() throws org.apache.thrift.TException;

        public boolean togglePause() throws org.apache.thrift.TException;

        public ServerStatus statusServer() throws org.apache.thrift.TException;

        public long freeSpace() throws org.apache.thrift.TException;

        public String getServerVersion() throws org.apache.thrift.TException;

        public void kill() throws org.apache.thrift.TException;

        public void restart() throws org.apache.thrift.TException;

        public List<String> getLog(int offset) throws org.apache.thrift.TException;

        public boolean isTimeDownload() throws org.apache.thrift.TException;

        public boolean isTimeReconnect() throws org.apache.thrift.TException;

        public boolean toggleReconnect() throws org.apache.thrift.TException;

        public Map<String, List<String>> generatePackages(List<String> links) throws org.apache.thrift.TException;

        public Map<String, List<String>> checkURLs(List<String> urls) throws org.apache.thrift.TException;

        public Map<String, List<String>> parseURLs(String html, String url) throws org.apache.thrift.TException;

        public OnlineCheck checkOnlineStatus(List<String> urls) throws org.apache.thrift.TException;

        public OnlineCheck checkOnlineStatusContainer(List<String> urls, String filename, ByteBuffer data) throws org.apache.thrift.TException;

        public OnlineCheck pollResults(int rid) throws org.apache.thrift.TException;

        public List<DownloadInfo> statusDownloads() throws org.apache.thrift.TException;

        public PackageData getPackageData(int pid) throws PackageDoesNotExists, org.apache.thrift.TException;

        public PackageData getPackageInfo(int pid) throws PackageDoesNotExists, org.apache.thrift.TException;

        public FileData getFileData(int fid) throws FileDoesNotExists, org.apache.thrift.TException;

        public List<PackageData> getQueue() throws org.apache.thrift.TException;

        public List<PackageData> getCollector() throws org.apache.thrift.TException;

        public List<PackageData> getQueueData() throws org.apache.thrift.TException;

        public List<PackageData> getCollectorData() throws org.apache.thrift.TException;

        public Map<Short, Integer> getPackageOrder(Destination destination) throws org.apache.thrift.TException;

        public Map<Short, Integer> getFileOrder(int pid) throws org.apache.thrift.TException;

        public List<Integer> generateAndAddPackages(List<String> links, Destination dest) throws org.apache.thrift.TException;

        public int addPackage(String name, List<String> links, Destination dest) throws org.apache.thrift.TException;

        public void addFiles(int pid, List<String> links) throws org.apache.thrift.TException;

        public void uploadContainer(String filename, ByteBuffer data) throws org.apache.thrift.TException;

        public void deleteFiles(List<Integer> fids) throws org.apache.thrift.TException;

        public void deletePackages(List<Integer> pids) throws org.apache.thrift.TException;

        public void pushToQueue(int pid) throws org.apache.thrift.TException;

        public void pullFromQueue(int pid) throws org.apache.thrift.TException;

        public void restartPackage(int pid) throws org.apache.thrift.TException;

        public void restartFile(int fid) throws org.apache.thrift.TException;

        public void recheckPackage(int pid) throws org.apache.thrift.TException;

        public void stopAllDownloads() throws org.apache.thrift.TException;

        public void stopDownloads(List<Integer> fids) throws org.apache.thrift.TException;

        public void setPackageName(int pid, String name) throws org.apache.thrift.TException;

        public void movePackage(Destination destination, int pid) throws org.apache.thrift.TException;

        public void moveFiles(List<Integer> fids, int pid) throws org.apache.thrift.TException;

        public void orderPackage(int pid, short position) throws org.apache.thrift.TException;

        public void orderFile(int fid, short position) throws org.apache.thrift.TException;

        public void setPackageData(int pid, Map<String, String> data) throws PackageDoesNotExists, org.apache.thrift.TException;

        public List<Integer> deleteFinished() throws org.apache.thrift.TException;

        public void restartFailed() throws org.apache.thrift.TException;

        public List<EventInfo> getEvents(String uuid) throws org.apache.thrift.TException;

        public List<AccountInfo> getAccounts(boolean refresh) throws org.apache.thrift.TException;

        public List<String> getAccountTypes() throws org.apache.thrift.TException;

        public void updateAccount(String plugin, String account, String password, Map<String, String> options) throws org.apache.thrift.TException;

        public void removeAccount(String plugin, String account) throws org.apache.thrift.TException;

        public boolean login(String username, String password) throws org.apache.thrift.TException;

        public UserData getUserData(String username, String password) throws org.apache.thrift.TException;

        public Map<String, UserData> getAllUserData() throws org.apache.thrift.TException;

        public Map<String, Map<String, String>> getServices() throws org.apache.thrift.TException;

        public boolean hasService(String plugin, String func) throws org.apache.thrift.TException;

        public String call(ServiceCall info) throws ServiceDoesNotExists, ServiceException, org.apache.thrift.TException;

        public Map<String, Map<String, String>> getAllInfo() throws org.apache.thrift.TException;

        public Map<String, String> getInfoByPlugin(String plugin) throws org.apache.thrift.TException;

        public boolean isCaptchaWaiting() throws org.apache.thrift.TException;

        public CaptchaTask getCaptchaTask(boolean exclusive) throws org.apache.thrift.TException;

        public String getCaptchaTaskStatus(int tid) throws org.apache.thrift.TException;

        public void setCaptchaResult(int tid, String result) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void getConfigValue(String category, String option, String section, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void setConfigValue(String category, String option, String value, String section, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getPluginConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void pauseServer(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void unpauseServer(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void togglePause(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void statusServer(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void freeSpace(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getServerVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void kill(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void restart(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getLog(int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void isTimeDownload(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void isTimeReconnect(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void toggleReconnect(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void generatePackages(List<String> links, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void checkURLs(List<String> urls, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void parseURLs(String html, String url, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void checkOnlineStatus(List<String> urls, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void checkOnlineStatusContainer(List<String> urls, String filename, ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void pollResults(int rid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void statusDownloads(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getPackageData(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getPackageInfo(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getFileData(int fid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getQueue(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getCollector(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getQueueData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getCollectorData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getPackageOrder(Destination destination, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getFileOrder(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void generateAndAddPackages(List<String> links, Destination dest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void addPackage(String name, List<String> links, Destination dest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void addFiles(int pid, List<String> links, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void uploadContainer(String filename, ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void deleteFiles(List<Integer> fids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void deletePackages(List<Integer> pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void pushToQueue(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void pullFromQueue(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void restartPackage(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void restartFile(int fid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void recheckPackage(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void stopAllDownloads(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void stopDownloads(List<Integer> fids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void setPackageName(int pid, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void movePackage(Destination destination, int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void moveFiles(List<Integer> fids, int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void orderPackage(int pid, short position, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void orderFile(int fid, short position, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void setPackageData(int pid, Map<String, String> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void deleteFinished(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void restartFailed(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getEvents(String uuid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getAccounts(boolean refresh, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getAccountTypes(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void updateAccount(String plugin, String account, String password, Map<String, String> options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void removeAccount(String plugin, String account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void login(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getUserData(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getAllUserData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getServices(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void hasService(String plugin, String func, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void call(ServiceCall info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getAllInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getInfoByPlugin(String plugin, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void isCaptchaWaiting(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getCaptchaTask(boolean exclusive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void getCaptchaTaskStatus(int tid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void setCaptchaResult(int tid, String result, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public String getConfigValue(String category, String option, String section) throws org.apache.thrift.TException {
            send_getConfigValue(category, option, section);
            return recv_getConfigValue();
        }

        public void send_getConfigValue(String category, String option, String section) throws org.apache.thrift.TException {
            getConfigValue_args args = new getConfigValue_args();
            args.setCategory(category);
            args.setOption(option);
            args.setSection(section);
            sendBase("getConfigValue", args);
        }

        public String recv_getConfigValue() throws org.apache.thrift.TException {
            getConfigValue_result result = new getConfigValue_result();
            receiveBase(result, "getConfigValue");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConfigValue failed: unknown result");
        }

        public void setConfigValue(String category, String option, String value, String section) throws org.apache.thrift.TException {
            send_setConfigValue(category, option, value, section);
            recv_setConfigValue();
        }

        public void send_setConfigValue(String category, String option, String value, String section) throws org.apache.thrift.TException {
            setConfigValue_args args = new setConfigValue_args();
            args.setCategory(category);
            args.setOption(option);
            args.setValue(value);
            args.setSection(section);
            sendBase("setConfigValue", args);
        }

        public void recv_setConfigValue() throws org.apache.thrift.TException {
            setConfigValue_result result = new setConfigValue_result();
            receiveBase(result, "setConfigValue");
            return;
        }

        public Map<String, ConfigSection> getConfig() throws org.apache.thrift.TException {
            send_getConfig();
            return recv_getConfig();
        }

        public void send_getConfig() throws org.apache.thrift.TException {
            getConfig_args args = new getConfig_args();
            sendBase("getConfig", args);
        }

        public Map<String, ConfigSection> recv_getConfig() throws org.apache.thrift.TException {
            getConfig_result result = new getConfig_result();
            receiveBase(result, "getConfig");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getConfig failed: unknown result");
        }

        public Map<String, ConfigSection> getPluginConfig() throws org.apache.thrift.TException {
            send_getPluginConfig();
            return recv_getPluginConfig();
        }

        public void send_getPluginConfig() throws org.apache.thrift.TException {
            getPluginConfig_args args = new getPluginConfig_args();
            sendBase("getPluginConfig", args);
        }

        public Map<String, ConfigSection> recv_getPluginConfig() throws org.apache.thrift.TException {
            getPluginConfig_result result = new getPluginConfig_result();
            receiveBase(result, "getPluginConfig");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPluginConfig failed: unknown result");
        }

        public void pauseServer() throws org.apache.thrift.TException {
            send_pauseServer();
            recv_pauseServer();
        }

        public void send_pauseServer() throws org.apache.thrift.TException {
            pauseServer_args args = new pauseServer_args();
            sendBase("pauseServer", args);
        }

        public void recv_pauseServer() throws org.apache.thrift.TException {
            pauseServer_result result = new pauseServer_result();
            receiveBase(result, "pauseServer");
            return;
        }

        public void unpauseServer() throws org.apache.thrift.TException {
            send_unpauseServer();
            recv_unpauseServer();
        }

        public void send_unpauseServer() throws org.apache.thrift.TException {
            unpauseServer_args args = new unpauseServer_args();
            sendBase("unpauseServer", args);
        }

        public void recv_unpauseServer() throws org.apache.thrift.TException {
            unpauseServer_result result = new unpauseServer_result();
            receiveBase(result, "unpauseServer");
            return;
        }

        public boolean togglePause() throws org.apache.thrift.TException {
            send_togglePause();
            return recv_togglePause();
        }

        public void send_togglePause() throws org.apache.thrift.TException {
            togglePause_args args = new togglePause_args();
            sendBase("togglePause", args);
        }

        public boolean recv_togglePause() throws org.apache.thrift.TException {
            togglePause_result result = new togglePause_result();
            receiveBase(result, "togglePause");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "togglePause failed: unknown result");
        }

        public ServerStatus statusServer() throws org.apache.thrift.TException {
            send_statusServer();
            return recv_statusServer();
        }

        public void send_statusServer() throws org.apache.thrift.TException {
            statusServer_args args = new statusServer_args();
            sendBase("statusServer", args);
        }

        public ServerStatus recv_statusServer() throws org.apache.thrift.TException {
            statusServer_result result = new statusServer_result();
            receiveBase(result, "statusServer");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statusServer failed: unknown result");
        }

        public long freeSpace() throws org.apache.thrift.TException {
            send_freeSpace();
            return recv_freeSpace();
        }

        public void send_freeSpace() throws org.apache.thrift.TException {
            freeSpace_args args = new freeSpace_args();
            sendBase("freeSpace", args);
        }

        public long recv_freeSpace() throws org.apache.thrift.TException {
            freeSpace_result result = new freeSpace_result();
            receiveBase(result, "freeSpace");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "freeSpace failed: unknown result");
        }

        public String getServerVersion() throws org.apache.thrift.TException {
            send_getServerVersion();
            return recv_getServerVersion();
        }

        public void send_getServerVersion() throws org.apache.thrift.TException {
            getServerVersion_args args = new getServerVersion_args();
            sendBase("getServerVersion", args);
        }

        public String recv_getServerVersion() throws org.apache.thrift.TException {
            getServerVersion_result result = new getServerVersion_result();
            receiveBase(result, "getServerVersion");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServerVersion failed: unknown result");
        }

        public void kill() throws org.apache.thrift.TException {
            send_kill();
            recv_kill();
        }

        public void send_kill() throws org.apache.thrift.TException {
            kill_args args = new kill_args();
            sendBase("kill", args);
        }

        public void recv_kill() throws org.apache.thrift.TException {
            kill_result result = new kill_result();
            receiveBase(result, "kill");
            return;
        }

        public void restart() throws org.apache.thrift.TException {
            send_restart();
            recv_restart();
        }

        public void send_restart() throws org.apache.thrift.TException {
            restart_args args = new restart_args();
            sendBase("restart", args);
        }

        public void recv_restart() throws org.apache.thrift.TException {
            restart_result result = new restart_result();
            receiveBase(result, "restart");
            return;
        }

        public List<String> getLog(int offset) throws org.apache.thrift.TException {
            send_getLog(offset);
            return recv_getLog();
        }

        public void send_getLog(int offset) throws org.apache.thrift.TException {
            getLog_args args = new getLog_args();
            args.setOffset(offset);
            sendBase("getLog", args);
        }

        public List<String> recv_getLog() throws org.apache.thrift.TException {
            getLog_result result = new getLog_result();
            receiveBase(result, "getLog");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLog failed: unknown result");
        }

        public boolean isTimeDownload() throws org.apache.thrift.TException {
            send_isTimeDownload();
            return recv_isTimeDownload();
        }

        public void send_isTimeDownload() throws org.apache.thrift.TException {
            isTimeDownload_args args = new isTimeDownload_args();
            sendBase("isTimeDownload", args);
        }

        public boolean recv_isTimeDownload() throws org.apache.thrift.TException {
            isTimeDownload_result result = new isTimeDownload_result();
            receiveBase(result, "isTimeDownload");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isTimeDownload failed: unknown result");
        }

        public boolean isTimeReconnect() throws org.apache.thrift.TException {
            send_isTimeReconnect();
            return recv_isTimeReconnect();
        }

        public void send_isTimeReconnect() throws org.apache.thrift.TException {
            isTimeReconnect_args args = new isTimeReconnect_args();
            sendBase("isTimeReconnect", args);
        }

        public boolean recv_isTimeReconnect() throws org.apache.thrift.TException {
            isTimeReconnect_result result = new isTimeReconnect_result();
            receiveBase(result, "isTimeReconnect");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isTimeReconnect failed: unknown result");
        }

        public boolean toggleReconnect() throws org.apache.thrift.TException {
            send_toggleReconnect();
            return recv_toggleReconnect();
        }

        public void send_toggleReconnect() throws org.apache.thrift.TException {
            toggleReconnect_args args = new toggleReconnect_args();
            sendBase("toggleReconnect", args);
        }

        public boolean recv_toggleReconnect() throws org.apache.thrift.TException {
            toggleReconnect_result result = new toggleReconnect_result();
            receiveBase(result, "toggleReconnect");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "toggleReconnect failed: unknown result");
        }

        public Map<String, List<String>> generatePackages(List<String> links) throws org.apache.thrift.TException {
            send_generatePackages(links);
            return recv_generatePackages();
        }

        public void send_generatePackages(List<String> links) throws org.apache.thrift.TException {
            generatePackages_args args = new generatePackages_args();
            args.setLinks(links);
            sendBase("generatePackages", args);
        }

        public Map<String, List<String>> recv_generatePackages() throws org.apache.thrift.TException {
            generatePackages_result result = new generatePackages_result();
            receiveBase(result, "generatePackages");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generatePackages failed: unknown result");
        }

        public Map<String, List<String>> checkURLs(List<String> urls) throws org.apache.thrift.TException {
            send_checkURLs(urls);
            return recv_checkURLs();
        }

        public void send_checkURLs(List<String> urls) throws org.apache.thrift.TException {
            checkURLs_args args = new checkURLs_args();
            args.setUrls(urls);
            sendBase("checkURLs", args);
        }

        public Map<String, List<String>> recv_checkURLs() throws org.apache.thrift.TException {
            checkURLs_result result = new checkURLs_result();
            receiveBase(result, "checkURLs");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkURLs failed: unknown result");
        }

        public Map<String, List<String>> parseURLs(String html, String url) throws org.apache.thrift.TException {
            send_parseURLs(html, url);
            return recv_parseURLs();
        }

        public void send_parseURLs(String html, String url) throws org.apache.thrift.TException {
            parseURLs_args args = new parseURLs_args();
            args.setHtml(html);
            args.setUrl(url);
            sendBase("parseURLs", args);
        }

        public Map<String, List<String>> recv_parseURLs() throws org.apache.thrift.TException {
            parseURLs_result result = new parseURLs_result();
            receiveBase(result, "parseURLs");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parseURLs failed: unknown result");
        }

        public OnlineCheck checkOnlineStatus(List<String> urls) throws org.apache.thrift.TException {
            send_checkOnlineStatus(urls);
            return recv_checkOnlineStatus();
        }

        public void send_checkOnlineStatus(List<String> urls) throws org.apache.thrift.TException {
            checkOnlineStatus_args args = new checkOnlineStatus_args();
            args.setUrls(urls);
            sendBase("checkOnlineStatus", args);
        }

        public OnlineCheck recv_checkOnlineStatus() throws org.apache.thrift.TException {
            checkOnlineStatus_result result = new checkOnlineStatus_result();
            receiveBase(result, "checkOnlineStatus");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkOnlineStatus failed: unknown result");
        }

        public OnlineCheck checkOnlineStatusContainer(List<String> urls, String filename, ByteBuffer data) throws org.apache.thrift.TException {
            send_checkOnlineStatusContainer(urls, filename, data);
            return recv_checkOnlineStatusContainer();
        }

        public void send_checkOnlineStatusContainer(List<String> urls, String filename, ByteBuffer data) throws org.apache.thrift.TException {
            checkOnlineStatusContainer_args args = new checkOnlineStatusContainer_args();
            args.setUrls(urls);
            args.setFilename(filename);
            args.setData(data);
            sendBase("checkOnlineStatusContainer", args);
        }

        public OnlineCheck recv_checkOnlineStatusContainer() throws org.apache.thrift.TException {
            checkOnlineStatusContainer_result result = new checkOnlineStatusContainer_result();
            receiveBase(result, "checkOnlineStatusContainer");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkOnlineStatusContainer failed: unknown result");
        }

        public OnlineCheck pollResults(int rid) throws org.apache.thrift.TException {
            send_pollResults(rid);
            return recv_pollResults();
        }

        public void send_pollResults(int rid) throws org.apache.thrift.TException {
            pollResults_args args = new pollResults_args();
            args.setRid(rid);
            sendBase("pollResults", args);
        }

        public OnlineCheck recv_pollResults() throws org.apache.thrift.TException {
            pollResults_result result = new pollResults_result();
            receiveBase(result, "pollResults");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pollResults failed: unknown result");
        }

        public List<DownloadInfo> statusDownloads() throws org.apache.thrift.TException {
            send_statusDownloads();
            return recv_statusDownloads();
        }

        public void send_statusDownloads() throws org.apache.thrift.TException {
            statusDownloads_args args = new statusDownloads_args();
            sendBase("statusDownloads", args);
        }

        public List<DownloadInfo> recv_statusDownloads() throws org.apache.thrift.TException {
            statusDownloads_result result = new statusDownloads_result();
            receiveBase(result, "statusDownloads");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "statusDownloads failed: unknown result");
        }

        public PackageData getPackageData(int pid) throws PackageDoesNotExists, org.apache.thrift.TException {
            send_getPackageData(pid);
            return recv_getPackageData();
        }

        public void send_getPackageData(int pid) throws org.apache.thrift.TException {
            getPackageData_args args = new getPackageData_args();
            args.setPid(pid);
            sendBase("getPackageData", args);
        }

        public PackageData recv_getPackageData() throws PackageDoesNotExists, org.apache.thrift.TException {
            getPackageData_result result = new getPackageData_result();
            receiveBase(result, "getPackageData");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPackageData failed: unknown result");
        }

        public PackageData getPackageInfo(int pid) throws PackageDoesNotExists, org.apache.thrift.TException {
            send_getPackageInfo(pid);
            return recv_getPackageInfo();
        }

        public void send_getPackageInfo(int pid) throws org.apache.thrift.TException {
            getPackageInfo_args args = new getPackageInfo_args();
            args.setPid(pid);
            sendBase("getPackageInfo", args);
        }

        public PackageData recv_getPackageInfo() throws PackageDoesNotExists, org.apache.thrift.TException {
            getPackageInfo_result result = new getPackageInfo_result();
            receiveBase(result, "getPackageInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPackageInfo failed: unknown result");
        }

        public FileData getFileData(int fid) throws FileDoesNotExists, org.apache.thrift.TException {
            send_getFileData(fid);
            return recv_getFileData();
        }

        public void send_getFileData(int fid) throws org.apache.thrift.TException {
            getFileData_args args = new getFileData_args();
            args.setFid(fid);
            sendBase("getFileData", args);
        }

        public FileData recv_getFileData() throws FileDoesNotExists, org.apache.thrift.TException {
            getFileData_result result = new getFileData_result();
            receiveBase(result, "getFileData");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFileData failed: unknown result");
        }

        public List<PackageData> getQueue() throws org.apache.thrift.TException {
            send_getQueue();
            return recv_getQueue();
        }

        public void send_getQueue() throws org.apache.thrift.TException {
            getQueue_args args = new getQueue_args();
            sendBase("getQueue", args);
        }

        public List<PackageData> recv_getQueue() throws org.apache.thrift.TException {
            getQueue_result result = new getQueue_result();
            receiveBase(result, "getQueue");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQueue failed: unknown result");
        }

        public List<PackageData> getCollector() throws org.apache.thrift.TException {
            send_getCollector();
            return recv_getCollector();
        }

        public void send_getCollector() throws org.apache.thrift.TException {
            getCollector_args args = new getCollector_args();
            sendBase("getCollector", args);
        }

        public List<PackageData> recv_getCollector() throws org.apache.thrift.TException {
            getCollector_result result = new getCollector_result();
            receiveBase(result, "getCollector");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollector failed: unknown result");
        }

        public List<PackageData> getQueueData() throws org.apache.thrift.TException {
            send_getQueueData();
            return recv_getQueueData();
        }

        public void send_getQueueData() throws org.apache.thrift.TException {
            getQueueData_args args = new getQueueData_args();
            sendBase("getQueueData", args);
        }

        public List<PackageData> recv_getQueueData() throws org.apache.thrift.TException {
            getQueueData_result result = new getQueueData_result();
            receiveBase(result, "getQueueData");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQueueData failed: unknown result");
        }

        public List<PackageData> getCollectorData() throws org.apache.thrift.TException {
            send_getCollectorData();
            return recv_getCollectorData();
        }

        public void send_getCollectorData() throws org.apache.thrift.TException {
            getCollectorData_args args = new getCollectorData_args();
            sendBase("getCollectorData", args);
        }

        public List<PackageData> recv_getCollectorData() throws org.apache.thrift.TException {
            getCollectorData_result result = new getCollectorData_result();
            receiveBase(result, "getCollectorData");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectorData failed: unknown result");
        }

        public Map<Short, Integer> getPackageOrder(Destination destination) throws org.apache.thrift.TException {
            send_getPackageOrder(destination);
            return recv_getPackageOrder();
        }

        public void send_getPackageOrder(Destination destination) throws org.apache.thrift.TException {
            getPackageOrder_args args = new getPackageOrder_args();
            args.setDestination(destination);
            sendBase("getPackageOrder", args);
        }

        public Map<Short, Integer> recv_getPackageOrder() throws org.apache.thrift.TException {
            getPackageOrder_result result = new getPackageOrder_result();
            receiveBase(result, "getPackageOrder");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPackageOrder failed: unknown result");
        }

        public Map<Short, Integer> getFileOrder(int pid) throws org.apache.thrift.TException {
            send_getFileOrder(pid);
            return recv_getFileOrder();
        }

        public void send_getFileOrder(int pid) throws org.apache.thrift.TException {
            getFileOrder_args args = new getFileOrder_args();
            args.setPid(pid);
            sendBase("getFileOrder", args);
        }

        public Map<Short, Integer> recv_getFileOrder() throws org.apache.thrift.TException {
            getFileOrder_result result = new getFileOrder_result();
            receiveBase(result, "getFileOrder");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFileOrder failed: unknown result");
        }

        public List<Integer> generateAndAddPackages(List<String> links, Destination dest) throws org.apache.thrift.TException {
            send_generateAndAddPackages(links, dest);
            return recv_generateAndAddPackages();
        }

        public void send_generateAndAddPackages(List<String> links, Destination dest) throws org.apache.thrift.TException {
            generateAndAddPackages_args args = new generateAndAddPackages_args();
            args.setLinks(links);
            args.setDest(dest);
            sendBase("generateAndAddPackages", args);
        }

        public List<Integer> recv_generateAndAddPackages() throws org.apache.thrift.TException {
            generateAndAddPackages_result result = new generateAndAddPackages_result();
            receiveBase(result, "generateAndAddPackages");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generateAndAddPackages failed: unknown result");
        }

        public int addPackage(String name, List<String> links, Destination dest) throws org.apache.thrift.TException {
            send_addPackage(name, links, dest);
            return recv_addPackage();
        }

        public void send_addPackage(String name, List<String> links, Destination dest) throws org.apache.thrift.TException {
            addPackage_args args = new addPackage_args();
            args.setName(name);
            args.setLinks(links);
            args.setDest(dest);
            sendBase("addPackage", args);
        }

        public int recv_addPackage() throws org.apache.thrift.TException {
            addPackage_result result = new addPackage_result();
            receiveBase(result, "addPackage");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPackage failed: unknown result");
        }

        public void addFiles(int pid, List<String> links) throws org.apache.thrift.TException {
            send_addFiles(pid, links);
            recv_addFiles();
        }

        public void send_addFiles(int pid, List<String> links) throws org.apache.thrift.TException {
            addFiles_args args = new addFiles_args();
            args.setPid(pid);
            args.setLinks(links);
            sendBase("addFiles", args);
        }

        public void recv_addFiles() throws org.apache.thrift.TException {
            addFiles_result result = new addFiles_result();
            receiveBase(result, "addFiles");
            return;
        }

        public void uploadContainer(String filename, ByteBuffer data) throws org.apache.thrift.TException {
            send_uploadContainer(filename, data);
            recv_uploadContainer();
        }

        public void send_uploadContainer(String filename, ByteBuffer data) throws org.apache.thrift.TException {
            uploadContainer_args args = new uploadContainer_args();
            args.setFilename(filename);
            args.setData(data);
            sendBase("uploadContainer", args);
        }

        public void recv_uploadContainer() throws org.apache.thrift.TException {
            uploadContainer_result result = new uploadContainer_result();
            receiveBase(result, "uploadContainer");
            return;
        }

        public void deleteFiles(List<Integer> fids) throws org.apache.thrift.TException {
            send_deleteFiles(fids);
            recv_deleteFiles();
        }

        public void send_deleteFiles(List<Integer> fids) throws org.apache.thrift.TException {
            deleteFiles_args args = new deleteFiles_args();
            args.setFids(fids);
            sendBase("deleteFiles", args);
        }

        public void recv_deleteFiles() throws org.apache.thrift.TException {
            deleteFiles_result result = new deleteFiles_result();
            receiveBase(result, "deleteFiles");
            return;
        }

        public void deletePackages(List<Integer> pids) throws org.apache.thrift.TException {
            send_deletePackages(pids);
            recv_deletePackages();
        }

        public void send_deletePackages(List<Integer> pids) throws org.apache.thrift.TException {
            deletePackages_args args = new deletePackages_args();
            args.setPids(pids);
            sendBase("deletePackages", args);
        }

        public void recv_deletePackages() throws org.apache.thrift.TException {
            deletePackages_result result = new deletePackages_result();
            receiveBase(result, "deletePackages");
            return;
        }

        public void pushToQueue(int pid) throws org.apache.thrift.TException {
            send_pushToQueue(pid);
            recv_pushToQueue();
        }

        public void send_pushToQueue(int pid) throws org.apache.thrift.TException {
            pushToQueue_args args = new pushToQueue_args();
            args.setPid(pid);
            sendBase("pushToQueue", args);
        }

        public void recv_pushToQueue() throws org.apache.thrift.TException {
            pushToQueue_result result = new pushToQueue_result();
            receiveBase(result, "pushToQueue");
            return;
        }

        public void pullFromQueue(int pid) throws org.apache.thrift.TException {
            send_pullFromQueue(pid);
            recv_pullFromQueue();
        }

        public void send_pullFromQueue(int pid) throws org.apache.thrift.TException {
            pullFromQueue_args args = new pullFromQueue_args();
            args.setPid(pid);
            sendBase("pullFromQueue", args);
        }

        public void recv_pullFromQueue() throws org.apache.thrift.TException {
            pullFromQueue_result result = new pullFromQueue_result();
            receiveBase(result, "pullFromQueue");
            return;
        }

        public void restartPackage(int pid) throws org.apache.thrift.TException {
            send_restartPackage(pid);
            recv_restartPackage();
        }

        public void send_restartPackage(int pid) throws org.apache.thrift.TException {
            restartPackage_args args = new restartPackage_args();
            args.setPid(pid);
            sendBase("restartPackage", args);
        }

        public void recv_restartPackage() throws org.apache.thrift.TException {
            restartPackage_result result = new restartPackage_result();
            receiveBase(result, "restartPackage");
            return;
        }

        public void restartFile(int fid) throws org.apache.thrift.TException {
            send_restartFile(fid);
            recv_restartFile();
        }

        public void send_restartFile(int fid) throws org.apache.thrift.TException {
            restartFile_args args = new restartFile_args();
            args.setFid(fid);
            sendBase("restartFile", args);
        }

        public void recv_restartFile() throws org.apache.thrift.TException {
            restartFile_result result = new restartFile_result();
            receiveBase(result, "restartFile");
            return;
        }

        public void recheckPackage(int pid) throws org.apache.thrift.TException {
            send_recheckPackage(pid);
            recv_recheckPackage();
        }

        public void send_recheckPackage(int pid) throws org.apache.thrift.TException {
            recheckPackage_args args = new recheckPackage_args();
            args.setPid(pid);
            sendBase("recheckPackage", args);
        }

        public void recv_recheckPackage() throws org.apache.thrift.TException {
            recheckPackage_result result = new recheckPackage_result();
            receiveBase(result, "recheckPackage");
            return;
        }

        public void stopAllDownloads() throws org.apache.thrift.TException {
            send_stopAllDownloads();
            recv_stopAllDownloads();
        }

        public void send_stopAllDownloads() throws org.apache.thrift.TException {
            stopAllDownloads_args args = new stopAllDownloads_args();
            sendBase("stopAllDownloads", args);
        }

        public void recv_stopAllDownloads() throws org.apache.thrift.TException {
            stopAllDownloads_result result = new stopAllDownloads_result();
            receiveBase(result, "stopAllDownloads");
            return;
        }

        public void stopDownloads(List<Integer> fids) throws org.apache.thrift.TException {
            send_stopDownloads(fids);
            recv_stopDownloads();
        }

        public void send_stopDownloads(List<Integer> fids) throws org.apache.thrift.TException {
            stopDownloads_args args = new stopDownloads_args();
            args.setFids(fids);
            sendBase("stopDownloads", args);
        }

        public void recv_stopDownloads() throws org.apache.thrift.TException {
            stopDownloads_result result = new stopDownloads_result();
            receiveBase(result, "stopDownloads");
            return;
        }

        public void setPackageName(int pid, String name) throws org.apache.thrift.TException {
            send_setPackageName(pid, name);
            recv_setPackageName();
        }

        public void send_setPackageName(int pid, String name) throws org.apache.thrift.TException {
            setPackageName_args args = new setPackageName_args();
            args.setPid(pid);
            args.setName(name);
            sendBase("setPackageName", args);
        }

        public void recv_setPackageName() throws org.apache.thrift.TException {
            setPackageName_result result = new setPackageName_result();
            receiveBase(result, "setPackageName");
            return;
        }

        public void movePackage(Destination destination, int pid) throws org.apache.thrift.TException {
            send_movePackage(destination, pid);
            recv_movePackage();
        }

        public void send_movePackage(Destination destination, int pid) throws org.apache.thrift.TException {
            movePackage_args args = new movePackage_args();
            args.setDestination(destination);
            args.setPid(pid);
            sendBase("movePackage", args);
        }

        public void recv_movePackage() throws org.apache.thrift.TException {
            movePackage_result result = new movePackage_result();
            receiveBase(result, "movePackage");
            return;
        }

        public void moveFiles(List<Integer> fids, int pid) throws org.apache.thrift.TException {
            send_moveFiles(fids, pid);
            recv_moveFiles();
        }

        public void send_moveFiles(List<Integer> fids, int pid) throws org.apache.thrift.TException {
            moveFiles_args args = new moveFiles_args();
            args.setFids(fids);
            args.setPid(pid);
            sendBase("moveFiles", args);
        }

        public void recv_moveFiles() throws org.apache.thrift.TException {
            moveFiles_result result = new moveFiles_result();
            receiveBase(result, "moveFiles");
            return;
        }

        public void orderPackage(int pid, short position) throws org.apache.thrift.TException {
            send_orderPackage(pid, position);
            recv_orderPackage();
        }

        public void send_orderPackage(int pid, short position) throws org.apache.thrift.TException {
            orderPackage_args args = new orderPackage_args();
            args.setPid(pid);
            args.setPosition(position);
            sendBase("orderPackage", args);
        }

        public void recv_orderPackage() throws org.apache.thrift.TException {
            orderPackage_result result = new orderPackage_result();
            receiveBase(result, "orderPackage");
            return;
        }

        public void orderFile(int fid, short position) throws org.apache.thrift.TException {
            send_orderFile(fid, position);
            recv_orderFile();
        }

        public void send_orderFile(int fid, short position) throws org.apache.thrift.TException {
            orderFile_args args = new orderFile_args();
            args.setFid(fid);
            args.setPosition(position);
            sendBase("orderFile", args);
        }

        public void recv_orderFile() throws org.apache.thrift.TException {
            orderFile_result result = new orderFile_result();
            receiveBase(result, "orderFile");
            return;
        }

        public void setPackageData(int pid, Map<String, String> data) throws PackageDoesNotExists, org.apache.thrift.TException {
            send_setPackageData(pid, data);
            recv_setPackageData();
        }

        public void send_setPackageData(int pid, Map<String, String> data) throws org.apache.thrift.TException {
            setPackageData_args args = new setPackageData_args();
            args.setPid(pid);
            args.setData(data);
            sendBase("setPackageData", args);
        }

        public void recv_setPackageData() throws PackageDoesNotExists, org.apache.thrift.TException {
            setPackageData_result result = new setPackageData_result();
            receiveBase(result, "setPackageData");
            if (result.e != null) {
                throw result.e;
            }
            return;
        }

        public List<Integer> deleteFinished() throws org.apache.thrift.TException {
            send_deleteFinished();
            return recv_deleteFinished();
        }

        public void send_deleteFinished() throws org.apache.thrift.TException {
            deleteFinished_args args = new deleteFinished_args();
            sendBase("deleteFinished", args);
        }

        public List<Integer> recv_deleteFinished() throws org.apache.thrift.TException {
            deleteFinished_result result = new deleteFinished_result();
            receiveBase(result, "deleteFinished");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteFinished failed: unknown result");
        }

        public void restartFailed() throws org.apache.thrift.TException {
            send_restartFailed();
            recv_restartFailed();
        }

        public void send_restartFailed() throws org.apache.thrift.TException {
            restartFailed_args args = new restartFailed_args();
            sendBase("restartFailed", args);
        }

        public void recv_restartFailed() throws org.apache.thrift.TException {
            restartFailed_result result = new restartFailed_result();
            receiveBase(result, "restartFailed");
            return;
        }

        public List<EventInfo> getEvents(String uuid) throws org.apache.thrift.TException {
            send_getEvents(uuid);
            return recv_getEvents();
        }

        public void send_getEvents(String uuid) throws org.apache.thrift.TException {
            getEvents_args args = new getEvents_args();
            args.setUuid(uuid);
            sendBase("getEvents", args);
        }

        public List<EventInfo> recv_getEvents() throws org.apache.thrift.TException {
            getEvents_result result = new getEvents_result();
            receiveBase(result, "getEvents");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEvents failed: unknown result");
        }

        public List<AccountInfo> getAccounts(boolean refresh) throws org.apache.thrift.TException {
            send_getAccounts(refresh);
            return recv_getAccounts();
        }

        public void send_getAccounts(boolean refresh) throws org.apache.thrift.TException {
            getAccounts_args args = new getAccounts_args();
            args.setRefresh(refresh);
            sendBase("getAccounts", args);
        }

        public List<AccountInfo> recv_getAccounts() throws org.apache.thrift.TException {
            getAccounts_result result = new getAccounts_result();
            receiveBase(result, "getAccounts");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccounts failed: unknown result");
        }

        public List<String> getAccountTypes() throws org.apache.thrift.TException {
            send_getAccountTypes();
            return recv_getAccountTypes();
        }

        public void send_getAccountTypes() throws org.apache.thrift.TException {
            getAccountTypes_args args = new getAccountTypes_args();
            sendBase("getAccountTypes", args);
        }

        public List<String> recv_getAccountTypes() throws org.apache.thrift.TException {
            getAccountTypes_result result = new getAccountTypes_result();
            receiveBase(result, "getAccountTypes");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAccountTypes failed: unknown result");
        }

        public void updateAccount(String plugin, String account, String password, Map<String, String> options) throws org.apache.thrift.TException {
            send_updateAccount(plugin, account, password, options);
            recv_updateAccount();
        }

        public void send_updateAccount(String plugin, String account, String password, Map<String, String> options) throws org.apache.thrift.TException {
            updateAccount_args args = new updateAccount_args();
            args.setPlugin(plugin);
            args.setAccount(account);
            args.setPassword(password);
            args.setOptions(options);
            sendBase("updateAccount", args);
        }

        public void recv_updateAccount() throws org.apache.thrift.TException {
            updateAccount_result result = new updateAccount_result();
            receiveBase(result, "updateAccount");
            return;
        }

        public void removeAccount(String plugin, String account) throws org.apache.thrift.TException {
            send_removeAccount(plugin, account);
            recv_removeAccount();
        }

        public void send_removeAccount(String plugin, String account) throws org.apache.thrift.TException {
            removeAccount_args args = new removeAccount_args();
            args.setPlugin(plugin);
            args.setAccount(account);
            sendBase("removeAccount", args);
        }

        public void recv_removeAccount() throws org.apache.thrift.TException {
            removeAccount_result result = new removeAccount_result();
            receiveBase(result, "removeAccount");
            return;
        }

        public boolean login(String username, String password) throws org.apache.thrift.TException {
            send_login(username, password);
            return recv_login();
        }

        public void send_login(String username, String password) throws org.apache.thrift.TException {
            login_args args = new login_args();
            args.setUsername(username);
            args.setPassword(password);
            sendBase("login", args);
        }

        public boolean recv_login() throws org.apache.thrift.TException {
            login_result result = new login_result();
            receiveBase(result, "login");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
        }

        public UserData getUserData(String username, String password) throws org.apache.thrift.TException {
            send_getUserData(username, password);
            return recv_getUserData();
        }

        public void send_getUserData(String username, String password) throws org.apache.thrift.TException {
            getUserData_args args = new getUserData_args();
            args.setUsername(username);
            args.setPassword(password);
            sendBase("getUserData", args);
        }

        public UserData recv_getUserData() throws org.apache.thrift.TException {
            getUserData_result result = new getUserData_result();
            receiveBase(result, "getUserData");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserData failed: unknown result");
        }

        public Map<String, UserData> getAllUserData() throws org.apache.thrift.TException {
            send_getAllUserData();
            return recv_getAllUserData();
        }

        public void send_getAllUserData() throws org.apache.thrift.TException {
            getAllUserData_args args = new getAllUserData_args();
            sendBase("getAllUserData", args);
        }

        public Map<String, UserData> recv_getAllUserData() throws org.apache.thrift.TException {
            getAllUserData_result result = new getAllUserData_result();
            receiveBase(result, "getAllUserData");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllUserData failed: unknown result");
        }

        public Map<String, Map<String, String>> getServices() throws org.apache.thrift.TException {
            send_getServices();
            return recv_getServices();
        }

        public void send_getServices() throws org.apache.thrift.TException {
            getServices_args args = new getServices_args();
            sendBase("getServices", args);
        }

        public Map<String, Map<String, String>> recv_getServices() throws org.apache.thrift.TException {
            getServices_result result = new getServices_result();
            receiveBase(result, "getServices");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServices failed: unknown result");
        }

        public boolean hasService(String plugin, String func) throws org.apache.thrift.TException {
            send_hasService(plugin, func);
            return recv_hasService();
        }

        public void send_hasService(String plugin, String func) throws org.apache.thrift.TException {
            hasService_args args = new hasService_args();
            args.setPlugin(plugin);
            args.setFunc(func);
            sendBase("hasService", args);
        }

        public boolean recv_hasService() throws org.apache.thrift.TException {
            hasService_result result = new hasService_result();
            receiveBase(result, "hasService");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "hasService failed: unknown result");
        }

        public String call(ServiceCall info) throws ServiceDoesNotExists, ServiceException, org.apache.thrift.TException {
            send_call(info);
            return recv_call();
        }

        public void send_call(ServiceCall info) throws org.apache.thrift.TException {
            call_args args = new call_args();
            args.setInfo(info);
            sendBase("call", args);
        }

        public String recv_call() throws ServiceDoesNotExists, ServiceException, org.apache.thrift.TException {
            call_result result = new call_result();
            receiveBase(result, "call");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.ex != null) {
                throw result.ex;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "call failed: unknown result");
        }

        public Map<String, Map<String, String>> getAllInfo() throws org.apache.thrift.TException {
            send_getAllInfo();
            return recv_getAllInfo();
        }

        public void send_getAllInfo() throws org.apache.thrift.TException {
            getAllInfo_args args = new getAllInfo_args();
            sendBase("getAllInfo", args);
        }

        public Map<String, Map<String, String>> recv_getAllInfo() throws org.apache.thrift.TException {
            getAllInfo_result result = new getAllInfo_result();
            receiveBase(result, "getAllInfo");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllInfo failed: unknown result");
        }

        public Map<String, String> getInfoByPlugin(String plugin) throws org.apache.thrift.TException {
            send_getInfoByPlugin(plugin);
            return recv_getInfoByPlugin();
        }

        public void send_getInfoByPlugin(String plugin) throws org.apache.thrift.TException {
            getInfoByPlugin_args args = new getInfoByPlugin_args();
            args.setPlugin(plugin);
            sendBase("getInfoByPlugin", args);
        }

        public Map<String, String> recv_getInfoByPlugin() throws org.apache.thrift.TException {
            getInfoByPlugin_result result = new getInfoByPlugin_result();
            receiveBase(result, "getInfoByPlugin");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInfoByPlugin failed: unknown result");
        }

        public boolean isCaptchaWaiting() throws org.apache.thrift.TException {
            send_isCaptchaWaiting();
            return recv_isCaptchaWaiting();
        }

        public void send_isCaptchaWaiting() throws org.apache.thrift.TException {
            isCaptchaWaiting_args args = new isCaptchaWaiting_args();
            sendBase("isCaptchaWaiting", args);
        }

        public boolean recv_isCaptchaWaiting() throws org.apache.thrift.TException {
            isCaptchaWaiting_result result = new isCaptchaWaiting_result();
            receiveBase(result, "isCaptchaWaiting");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isCaptchaWaiting failed: unknown result");
        }

        public CaptchaTask getCaptchaTask(boolean exclusive) throws org.apache.thrift.TException {
            send_getCaptchaTask(exclusive);
            return recv_getCaptchaTask();
        }

        public void send_getCaptchaTask(boolean exclusive) throws org.apache.thrift.TException {
            getCaptchaTask_args args = new getCaptchaTask_args();
            args.setExclusive(exclusive);
            sendBase("getCaptchaTask", args);
        }

        public CaptchaTask recv_getCaptchaTask() throws org.apache.thrift.TException {
            getCaptchaTask_result result = new getCaptchaTask_result();
            receiveBase(result, "getCaptchaTask");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCaptchaTask failed: unknown result");
        }

        public String getCaptchaTaskStatus(int tid) throws org.apache.thrift.TException {
            send_getCaptchaTaskStatus(tid);
            return recv_getCaptchaTaskStatus();
        }

        public void send_getCaptchaTaskStatus(int tid) throws org.apache.thrift.TException {
            getCaptchaTaskStatus_args args = new getCaptchaTaskStatus_args();
            args.setTid(tid);
            sendBase("getCaptchaTaskStatus", args);
        }

        public String recv_getCaptchaTaskStatus() throws org.apache.thrift.TException {
            getCaptchaTaskStatus_result result = new getCaptchaTaskStatus_result();
            receiveBase(result, "getCaptchaTaskStatus");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCaptchaTaskStatus failed: unknown result");
        }

        public void setCaptchaResult(int tid, String result) throws org.apache.thrift.TException {
            send_setCaptchaResult(tid, result);
            recv_setCaptchaResult();
        }

        public void send_setCaptchaResult(int tid, String result) throws org.apache.thrift.TException {
            setCaptchaResult_args args = new setCaptchaResult_args();
            args.setTid(tid);
            args.setResult(result);
            sendBase("setCaptchaResult", args);
        }

        public void recv_setCaptchaResult() throws org.apache.thrift.TException {
            setCaptchaResult_result result = new setCaptchaResult_result();
            receiveBase(result, "setCaptchaResult");
            return;
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void getConfigValue(String category, String option, String section, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getConfigValue_call method_call = new getConfigValue_call(category, option, section, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getConfigValue_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String category;
            private String option;
            private String section;

            public getConfigValue_call(String category, String option, String section, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.category = category;
                this.option = option;
                this.section = section;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConfigValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getConfigValue_args args = new getConfigValue_args();
                args.setCategory(category);
                args.setOption(option);
                args.setSection(section);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getConfigValue();
            }
        }

        public void setConfigValue(String category, String option, String value, String section, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            setConfigValue_call method_call = new setConfigValue_call(category, option, value, section, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class setConfigValue_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String category;
            private String option;
            private String value;
            private String section;

            public setConfigValue_call(String category, String option, String value, String section, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.category = category;
                this.option = option;
                this.value = value;
                this.section = section;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setConfigValue", org.apache.thrift.protocol.TMessageType.CALL, 0));
                setConfigValue_args args = new setConfigValue_args();
                args.setCategory(category);
                args.setOption(option);
                args.setValue(value);
                args.setSection(section);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_setConfigValue();
            }
        }

        public void getConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getConfig_call method_call = new getConfig_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getConfig_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getConfig_args args = new getConfig_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<String, ConfigSection> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getConfig();
            }
        }

        public void getPluginConfig(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPluginConfig_call method_call = new getPluginConfig_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPluginConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getPluginConfig_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPluginConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPluginConfig_args args = new getPluginConfig_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<String, ConfigSection> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPluginConfig();
            }
        }

        public void pauseServer(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            pauseServer_call method_call = new pauseServer_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class pauseServer_call extends org.apache.thrift.async.TAsyncMethodCall {
            public pauseServer_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pauseServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
                pauseServer_args args = new pauseServer_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_pauseServer();
            }
        }

        public void unpauseServer(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            unpauseServer_call method_call = new unpauseServer_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class unpauseServer_call extends org.apache.thrift.async.TAsyncMethodCall {
            public unpauseServer_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unpauseServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
                unpauseServer_args args = new unpauseServer_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_unpauseServer();
            }
        }

        public void togglePause(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            togglePause_call method_call = new togglePause_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class togglePause_call extends org.apache.thrift.async.TAsyncMethodCall {
            public togglePause_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("togglePause", org.apache.thrift.protocol.TMessageType.CALL, 0));
                togglePause_args args = new togglePause_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_togglePause();
            }
        }

        public void statusServer(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            statusServer_call method_call = new statusServer_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class statusServer_call extends org.apache.thrift.async.TAsyncMethodCall {
            public statusServer_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statusServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
                statusServer_args args = new statusServer_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public ServerStatus getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_statusServer();
            }
        }

        public void freeSpace(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            freeSpace_call method_call = new freeSpace_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class freeSpace_call extends org.apache.thrift.async.TAsyncMethodCall {
            public freeSpace_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("freeSpace", org.apache.thrift.protocol.TMessageType.CALL, 0));
                freeSpace_args args = new freeSpace_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public long getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_freeSpace();
            }
        }

        public void getServerVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getServerVersion_call method_call = new getServerVersion_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getServerVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getServerVersion_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServerVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getServerVersion_args args = new getServerVersion_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getServerVersion();
            }
        }

        public void kill(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            kill_call method_call = new kill_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class kill_call extends org.apache.thrift.async.TAsyncMethodCall {
            public kill_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("kill", org.apache.thrift.protocol.TMessageType.CALL, 0));
                kill_args args = new kill_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_kill();
            }
        }

        public void restart(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            restart_call method_call = new restart_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class restart_call extends org.apache.thrift.async.TAsyncMethodCall {
            public restart_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restart", org.apache.thrift.protocol.TMessageType.CALL, 0));
                restart_args args = new restart_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_restart();
            }
        }

        public void getLog(int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getLog_call method_call = new getLog_call(offset, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getLog_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int offset;

            public getLog_call(int offset, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.offset = offset;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getLog_args args = new getLog_args();
                args.setOffset(offset);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getLog();
            }
        }

        public void isTimeDownload(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            isTimeDownload_call method_call = new isTimeDownload_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class isTimeDownload_call extends org.apache.thrift.async.TAsyncMethodCall {
            public isTimeDownload_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isTimeDownload", org.apache.thrift.protocol.TMessageType.CALL, 0));
                isTimeDownload_args args = new isTimeDownload_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_isTimeDownload();
            }
        }

        public void isTimeReconnect(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            isTimeReconnect_call method_call = new isTimeReconnect_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class isTimeReconnect_call extends org.apache.thrift.async.TAsyncMethodCall {
            public isTimeReconnect_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isTimeReconnect", org.apache.thrift.protocol.TMessageType.CALL, 0));
                isTimeReconnect_args args = new isTimeReconnect_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_isTimeReconnect();
            }
        }

        public void toggleReconnect(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            toggleReconnect_call method_call = new toggleReconnect_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class toggleReconnect_call extends org.apache.thrift.async.TAsyncMethodCall {
            public toggleReconnect_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("toggleReconnect", org.apache.thrift.protocol.TMessageType.CALL, 0));
                toggleReconnect_args args = new toggleReconnect_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_toggleReconnect();
            }
        }

        public void generatePackages(List<String> links, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            generatePackages_call method_call = new generatePackages_call(links, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class generatePackages_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<String> links;

            public generatePackages_call(List<String> links, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.links = links;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generatePackages", org.apache.thrift.protocol.TMessageType.CALL, 0));
                generatePackages_args args = new generatePackages_args();
                args.setLinks(links);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<String, List<String>> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_generatePackages();
            }
        }

        public void checkURLs(List<String> urls, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            checkURLs_call method_call = new checkURLs_call(urls, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class checkURLs_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<String> urls;

            public checkURLs_call(List<String> urls, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.urls = urls;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkURLs", org.apache.thrift.protocol.TMessageType.CALL, 0));
                checkURLs_args args = new checkURLs_args();
                args.setUrls(urls);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<String, List<String>> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_checkURLs();
            }
        }

        public void parseURLs(String html, String url, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            parseURLs_call method_call = new parseURLs_call(html, url, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class parseURLs_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String html;
            private String url;

            public parseURLs_call(String html, String url, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.html = html;
                this.url = url;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parseURLs", org.apache.thrift.protocol.TMessageType.CALL, 0));
                parseURLs_args args = new parseURLs_args();
                args.setHtml(html);
                args.setUrl(url);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<String, List<String>> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_parseURLs();
            }
        }

        public void checkOnlineStatus(List<String> urls, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            checkOnlineStatus_call method_call = new checkOnlineStatus_call(urls, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class checkOnlineStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<String> urls;

            public checkOnlineStatus_call(List<String> urls, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.urls = urls;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkOnlineStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
                checkOnlineStatus_args args = new checkOnlineStatus_args();
                args.setUrls(urls);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public OnlineCheck getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_checkOnlineStatus();
            }
        }

        public void checkOnlineStatusContainer(List<String> urls, String filename, ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            checkOnlineStatusContainer_call method_call = new checkOnlineStatusContainer_call(urls, filename, data, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class checkOnlineStatusContainer_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<String> urls;
            private String filename;
            private ByteBuffer data;

            public checkOnlineStatusContainer_call(List<String> urls, String filename, ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.urls = urls;
                this.filename = filename;
                this.data = data;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkOnlineStatusContainer", org.apache.thrift.protocol.TMessageType.CALL, 0));
                checkOnlineStatusContainer_args args = new checkOnlineStatusContainer_args();
                args.setUrls(urls);
                args.setFilename(filename);
                args.setData(data);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public OnlineCheck getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_checkOnlineStatusContainer();
            }
        }

        public void pollResults(int rid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            pollResults_call method_call = new pollResults_call(rid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class pollResults_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int rid;

            public pollResults_call(int rid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.rid = rid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pollResults", org.apache.thrift.protocol.TMessageType.CALL, 0));
                pollResults_args args = new pollResults_args();
                args.setRid(rid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public OnlineCheck getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_pollResults();
            }
        }

        public void statusDownloads(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            statusDownloads_call method_call = new statusDownloads_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class statusDownloads_call extends org.apache.thrift.async.TAsyncMethodCall {
            public statusDownloads_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("statusDownloads", org.apache.thrift.protocol.TMessageType.CALL, 0));
                statusDownloads_args args = new statusDownloads_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<DownloadInfo> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_statusDownloads();
            }
        }

        public void getPackageData(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPackageData_call method_call = new getPackageData_call(pid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPackageData_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int pid;

            public getPackageData_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPackageData", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPackageData_args args = new getPackageData_args();
                args.setPid(pid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PackageData getResult() throws PackageDoesNotExists, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPackageData();
            }
        }

        public void getPackageInfo(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPackageInfo_call method_call = new getPackageInfo_call(pid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPackageInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int pid;

            public getPackageInfo_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPackageInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPackageInfo_args args = new getPackageInfo_args();
                args.setPid(pid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public PackageData getResult() throws PackageDoesNotExists, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPackageInfo();
            }
        }

        public void getFileData(int fid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getFileData_call method_call = new getFileData_call(fid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getFileData_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int fid;

            public getFileData_call(int fid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fid = fid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileData", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getFileData_args args = new getFileData_args();
                args.setFid(fid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public FileData getResult() throws FileDoesNotExists, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getFileData();
            }
        }

        public void getQueue(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getQueue_call method_call = new getQueue_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getQueue_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getQueue_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQueue", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getQueue_args args = new getQueue_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<PackageData> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getQueue();
            }
        }

        public void getCollector(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCollector_call method_call = new getCollector_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCollector_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getCollector_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollector", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCollector_args args = new getCollector_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<PackageData> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCollector();
            }
        }

        public void getQueueData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getQueueData_call method_call = new getQueueData_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getQueueData_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getQueueData_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQueueData", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getQueueData_args args = new getQueueData_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<PackageData> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getQueueData();
            }
        }

        public void getCollectorData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCollectorData_call method_call = new getCollectorData_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCollectorData_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getCollectorData_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectorData", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCollectorData_args args = new getCollectorData_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<PackageData> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCollectorData();
            }
        }

        public void getPackageOrder(Destination destination, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getPackageOrder_call method_call = new getPackageOrder_call(destination, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPackageOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
            private Destination destination;

            public getPackageOrder_call(Destination destination, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.destination = destination;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPackageOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getPackageOrder_args args = new getPackageOrder_args();
                args.setDestination(destination);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<Short, Integer> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPackageOrder();
            }
        }

        public void getFileOrder(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getFileOrder_call method_call = new getFileOrder_call(pid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getFileOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int pid;

            public getFileOrder_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFileOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getFileOrder_args args = new getFileOrder_args();
                args.setPid(pid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<Short, Integer> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getFileOrder();
            }
        }

        public void generateAndAddPackages(List<String> links, Destination dest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            generateAndAddPackages_call method_call = new generateAndAddPackages_call(links, dest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class generateAndAddPackages_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<String> links;
            private Destination dest;

            public generateAndAddPackages_call(List<String> links, Destination dest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.links = links;
                this.dest = dest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generateAndAddPackages", org.apache.thrift.protocol.TMessageType.CALL, 0));
                generateAndAddPackages_args args = new generateAndAddPackages_args();
                args.setLinks(links);
                args.setDest(dest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Integer> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_generateAndAddPackages();
            }
        }

        public void addPackage(String name, List<String> links, Destination dest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addPackage_call method_call = new addPackage_call(name, links, dest, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addPackage_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String name;
            private List<String> links;
            private Destination dest;

            public addPackage_call(String name, List<String> links, Destination dest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.name = name;
                this.links = links;
                this.dest = dest;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addPackage_args args = new addPackage_args();
                args.setName(name);
                args.setLinks(links);
                args.setDest(dest);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public int getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_addPackage();
            }
        }

        public void addFiles(int pid, List<String> links, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            addFiles_call method_call = new addFiles_call(pid, links, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class addFiles_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int pid;
            private List<String> links;

            public addFiles_call(int pid, List<String> links, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
                this.links = links;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
                addFiles_args args = new addFiles_args();
                args.setPid(pid);
                args.setLinks(links);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_addFiles();
            }
        }

        public void uploadContainer(String filename, ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            uploadContainer_call method_call = new uploadContainer_call(filename, data, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class uploadContainer_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String filename;
            private ByteBuffer data;

            public uploadContainer_call(String filename, ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.filename = filename;
                this.data = data;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadContainer", org.apache.thrift.protocol.TMessageType.CALL, 0));
                uploadContainer_args args = new uploadContainer_args();
                args.setFilename(filename);
                args.setData(data);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_uploadContainer();
            }
        }

        public void deleteFiles(List<Integer> fids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            deleteFiles_call method_call = new deleteFiles_call(fids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteFiles_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<Integer> fids;

            public deleteFiles_call(List<Integer> fids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fids = fids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteFiles_args args = new deleteFiles_args();
                args.setFids(fids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_deleteFiles();
            }
        }

        public void deletePackages(List<Integer> pids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            deletePackages_call method_call = new deletePackages_call(pids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deletePackages_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<Integer> pids;

            public deletePackages_call(List<Integer> pids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pids = pids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deletePackages", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deletePackages_args args = new deletePackages_args();
                args.setPids(pids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_deletePackages();
            }
        }

        public void pushToQueue(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            pushToQueue_call method_call = new pushToQueue_call(pid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class pushToQueue_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int pid;

            public pushToQueue_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushToQueue", org.apache.thrift.protocol.TMessageType.CALL, 0));
                pushToQueue_args args = new pushToQueue_args();
                args.setPid(pid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_pushToQueue();
            }
        }

        public void pullFromQueue(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            pullFromQueue_call method_call = new pullFromQueue_call(pid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class pullFromQueue_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int pid;

            public pullFromQueue_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pullFromQueue", org.apache.thrift.protocol.TMessageType.CALL, 0));
                pullFromQueue_args args = new pullFromQueue_args();
                args.setPid(pid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_pullFromQueue();
            }
        }

        public void restartPackage(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            restartPackage_call method_call = new restartPackage_call(pid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class restartPackage_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int pid;

            public restartPackage_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restartPackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
                restartPackage_args args = new restartPackage_args();
                args.setPid(pid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_restartPackage();
            }
        }

        public void restartFile(int fid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            restartFile_call method_call = new restartFile_call(fid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class restartFile_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int fid;

            public restartFile_call(int fid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fid = fid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restartFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                restartFile_args args = new restartFile_args();
                args.setFid(fid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_restartFile();
            }
        }

        public void recheckPackage(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            recheckPackage_call method_call = new recheckPackage_call(pid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class recheckPackage_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int pid;

            public recheckPackage_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("recheckPackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
                recheckPackage_args args = new recheckPackage_args();
                args.setPid(pid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_recheckPackage();
            }
        }

        public void stopAllDownloads(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            stopAllDownloads_call method_call = new stopAllDownloads_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class stopAllDownloads_call extends org.apache.thrift.async.TAsyncMethodCall {
            public stopAllDownloads_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopAllDownloads", org.apache.thrift.protocol.TMessageType.CALL, 0));
                stopAllDownloads_args args = new stopAllDownloads_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_stopAllDownloads();
            }
        }

        public void stopDownloads(List<Integer> fids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            stopDownloads_call method_call = new stopDownloads_call(fids, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class stopDownloads_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<Integer> fids;

            public stopDownloads_call(List<Integer> fids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fids = fids;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopDownloads", org.apache.thrift.protocol.TMessageType.CALL, 0));
                stopDownloads_args args = new stopDownloads_args();
                args.setFids(fids);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_stopDownloads();
            }
        }

        public void setPackageName(int pid, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            setPackageName_call method_call = new setPackageName_call(pid, name, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class setPackageName_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int pid;
            private String name;

            public setPackageName_call(int pid, String name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
                this.name = name;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPackageName", org.apache.thrift.protocol.TMessageType.CALL, 0));
                setPackageName_args args = new setPackageName_args();
                args.setPid(pid);
                args.setName(name);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_setPackageName();
            }
        }

        public void movePackage(Destination destination, int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            movePackage_call method_call = new movePackage_call(destination, pid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class movePackage_call extends org.apache.thrift.async.TAsyncMethodCall {
            private Destination destination;
            private int pid;

            public movePackage_call(Destination destination, int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.destination = destination;
                this.pid = pid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("movePackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
                movePackage_args args = new movePackage_args();
                args.setDestination(destination);
                args.setPid(pid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_movePackage();
            }
        }

        public void moveFiles(List<Integer> fids, int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            moveFiles_call method_call = new moveFiles_call(fids, pid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class moveFiles_call extends org.apache.thrift.async.TAsyncMethodCall {
            private List<Integer> fids;
            private int pid;

            public moveFiles_call(List<Integer> fids, int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fids = fids;
                this.pid = pid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("moveFiles", org.apache.thrift.protocol.TMessageType.CALL, 0));
                moveFiles_args args = new moveFiles_args();
                args.setFids(fids);
                args.setPid(pid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_moveFiles();
            }
        }

        public void orderPackage(int pid, short position, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            orderPackage_call method_call = new orderPackage_call(pid, position, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class orderPackage_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int pid;
            private short position;

            public orderPackage_call(int pid, short position, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
                this.position = position;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("orderPackage", org.apache.thrift.protocol.TMessageType.CALL, 0));
                orderPackage_args args = new orderPackage_args();
                args.setPid(pid);
                args.setPosition(position);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_orderPackage();
            }
        }

        public void orderFile(int fid, short position, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            orderFile_call method_call = new orderFile_call(fid, position, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class orderFile_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int fid;
            private short position;

            public orderFile_call(int fid, short position, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.fid = fid;
                this.position = position;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("orderFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
                orderFile_args args = new orderFile_args();
                args.setFid(fid);
                args.setPosition(position);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_orderFile();
            }
        }

        public void setPackageData(int pid, Map<String, String> data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            setPackageData_call method_call = new setPackageData_call(pid, data, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class setPackageData_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int pid;
            private Map<String, String> data;

            public setPackageData_call(int pid, Map<String, String> data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.pid = pid;
                this.data = data;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPackageData", org.apache.thrift.protocol.TMessageType.CALL, 0));
                setPackageData_args args = new setPackageData_args();
                args.setPid(pid);
                args.setData(data);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws PackageDoesNotExists, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_setPackageData();
            }
        }

        public void deleteFinished(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            deleteFinished_call method_call = new deleteFinished_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteFinished_call extends org.apache.thrift.async.TAsyncMethodCall {
            public deleteFinished_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFinished", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteFinished_args args = new deleteFinished_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Integer> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_deleteFinished();
            }
        }

        public void restartFailed(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            restartFailed_call method_call = new restartFailed_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class restartFailed_call extends org.apache.thrift.async.TAsyncMethodCall {
            public restartFailed_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restartFailed", org.apache.thrift.protocol.TMessageType.CALL, 0));
                restartFailed_args args = new restartFailed_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_restartFailed();
            }
        }

        public void getEvents(String uuid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getEvents_call method_call = new getEvents_call(uuid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getEvents_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String uuid;

            public getEvents_call(String uuid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uuid = uuid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEvents", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getEvents_args args = new getEvents_args();
                args.setUuid(uuid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<EventInfo> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getEvents();
            }
        }

        public void getAccounts(boolean refresh, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getAccounts_call method_call = new getAccounts_call(refresh, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getAccounts_call extends org.apache.thrift.async.TAsyncMethodCall {
            private boolean refresh;

            public getAccounts_call(boolean refresh, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.refresh = refresh;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccounts", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getAccounts_args args = new getAccounts_args();
                args.setRefresh(refresh);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<AccountInfo> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getAccounts();
            }
        }

        public void getAccountTypes(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getAccountTypes_call method_call = new getAccountTypes_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getAccountTypes_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getAccountTypes_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAccountTypes", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getAccountTypes_args args = new getAccountTypes_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getAccountTypes();
            }
        }

        public void updateAccount(String plugin, String account, String password, Map<String, String> options, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            updateAccount_call method_call = new updateAccount_call(plugin, account, password, options, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class updateAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String plugin;
            private String account;
            private String password;
            private Map<String, String> options;

            public updateAccount_call(String plugin, String account, String password, Map<String, String> options, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.plugin = plugin;
                this.account = account;
                this.password = password;
                this.options = options;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateAccount_args args = new updateAccount_args();
                args.setPlugin(plugin);
                args.setAccount(account);
                args.setPassword(password);
                args.setOptions(options);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_updateAccount();
            }
        }

        public void removeAccount(String plugin, String account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            removeAccount_call method_call = new removeAccount_call(plugin, account, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class removeAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String plugin;
            private String account;

            public removeAccount_call(String plugin, String account, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.plugin = plugin;
                this.account = account;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
                removeAccount_args args = new removeAccount_args();
                args.setPlugin(plugin);
                args.setAccount(account);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_removeAccount();
            }
        }

        public void login(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            login_call method_call = new login_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class login_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String username;
            private String password;

            public login_call(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.username = username;
                this.password = password;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
                login_args args = new login_args();
                args.setUsername(username);
                args.setPassword(password);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_login();
            }
        }

        public void getUserData(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getUserData_call method_call = new getUserData_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getUserData_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String username;
            private String password;

            public getUserData_call(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.username = username;
                this.password = password;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserData", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getUserData_args args = new getUserData_args();
                args.setUsername(username);
                args.setPassword(password);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public UserData getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getUserData();
            }
        }

        public void getAllUserData(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getAllUserData_call method_call = new getAllUserData_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getAllUserData_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getAllUserData_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllUserData", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getAllUserData_args args = new getAllUserData_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<String, UserData> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getAllUserData();
            }
        }

        public void getServices(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getServices_call method_call = new getServices_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getServices_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getServices_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServices", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getServices_args args = new getServices_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<String, Map<String, String>> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getServices();
            }
        }

        public void hasService(String plugin, String func, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            hasService_call method_call = new hasService_call(plugin, func, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class hasService_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String plugin;
            private String func;

            public hasService_call(String plugin, String func, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.plugin = plugin;
                this.func = func;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hasService", org.apache.thrift.protocol.TMessageType.CALL, 0));
                hasService_args args = new hasService_args();
                args.setPlugin(plugin);
                args.setFunc(func);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_hasService();
            }
        }

        public void call(ServiceCall info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            call_call method_call = new call_call(info, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class call_call extends org.apache.thrift.async.TAsyncMethodCall {
            private ServiceCall info;

            public call_call(ServiceCall info, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.info = info;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("call", org.apache.thrift.protocol.TMessageType.CALL, 0));
                call_args args = new call_args();
                args.setInfo(info);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws ServiceDoesNotExists, ServiceException, org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_call();
            }
        }

        public void getAllInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getAllInfo_call method_call = new getAllInfo_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getAllInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
            public getAllInfo_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getAllInfo_args args = new getAllInfo_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<String, Map<String, String>> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getAllInfo();
            }
        }

        public void getInfoByPlugin(String plugin, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getInfoByPlugin_call method_call = new getInfoByPlugin_call(plugin, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getInfoByPlugin_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String plugin;

            public getInfoByPlugin_call(String plugin, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.plugin = plugin;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInfoByPlugin", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getInfoByPlugin_args args = new getInfoByPlugin_args();
                args.setPlugin(plugin);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Map<String, String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getInfoByPlugin();
            }
        }

        public void isCaptchaWaiting(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            isCaptchaWaiting_call method_call = new isCaptchaWaiting_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class isCaptchaWaiting_call extends org.apache.thrift.async.TAsyncMethodCall {
            public isCaptchaWaiting_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isCaptchaWaiting", org.apache.thrift.protocol.TMessageType.CALL, 0));
                isCaptchaWaiting_args args = new isCaptchaWaiting_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_isCaptchaWaiting();
            }
        }

        public void getCaptchaTask(boolean exclusive, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCaptchaTask_call method_call = new getCaptchaTask_call(exclusive, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCaptchaTask_call extends org.apache.thrift.async.TAsyncMethodCall {
            private boolean exclusive;

            public getCaptchaTask_call(boolean exclusive, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.exclusive = exclusive;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCaptchaTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCaptchaTask_args args = new getCaptchaTask_args();
                args.setExclusive(exclusive);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public CaptchaTask getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCaptchaTask();
            }
        }

        public void getCaptchaTaskStatus(int tid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            getCaptchaTaskStatus_call method_call = new getCaptchaTaskStatus_call(tid, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getCaptchaTaskStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int tid;

            public getCaptchaTaskStatus_call(int tid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.tid = tid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCaptchaTaskStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
                getCaptchaTaskStatus_args args = new getCaptchaTaskStatus_args();
                args.setTid(tid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getCaptchaTaskStatus();
            }
        }

        public void setCaptchaResult(int tid, String result, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            setCaptchaResult_call method_call = new setCaptchaResult_call(tid, result, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class setCaptchaResult_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int tid;
            private String result;

            public setCaptchaResult_call(int tid, String result, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.tid = tid;
                this.result = result;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCaptchaResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
                setCaptchaResult_args args = new setCaptchaResult_args();
                args.setTid(tid);
                args.setResult(result);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_setCaptchaResult();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("getConfigValue", new getConfigValue());
            processMap.put("setConfigValue", new setConfigValue());
            processMap.put("getConfig", new getConfig());
            processMap.put("getPluginConfig", new getPluginConfig());
            processMap.put("pauseServer", new pauseServer());
            processMap.put("unpauseServer", new unpauseServer());
            processMap.put("togglePause", new togglePause());
            processMap.put("statusServer", new statusServer());
            processMap.put("freeSpace", new freeSpace());
            processMap.put("getServerVersion", new getServerVersion());
            processMap.put("kill", new kill());
            processMap.put("restart", new restart());
            processMap.put("getLog", new getLog());
            processMap.put("isTimeDownload", new isTimeDownload());
            processMap.put("isTimeReconnect", new isTimeReconnect());
            processMap.put("toggleReconnect", new toggleReconnect());
            processMap.put("generatePackages", new generatePackages());
            processMap.put("checkURLs", new checkURLs());
            processMap.put("parseURLs", new parseURLs());
            processMap.put("checkOnlineStatus", new checkOnlineStatus());
            processMap.put("checkOnlineStatusContainer", new checkOnlineStatusContainer());
            processMap.put("pollResults", new pollResults());
            processMap.put("statusDownloads", new statusDownloads());
            processMap.put("getPackageData", new getPackageData());
            processMap.put("getPackageInfo", new getPackageInfo());
            processMap.put("getFileData", new getFileData());
            processMap.put("getQueue", new getQueue());
            processMap.put("getCollector", new getCollector());
            processMap.put("getQueueData", new getQueueData());
            processMap.put("getCollectorData", new getCollectorData());
            processMap.put("getPackageOrder", new getPackageOrder());
            processMap.put("getFileOrder", new getFileOrder());
            processMap.put("generateAndAddPackages", new generateAndAddPackages());
            processMap.put("addPackage", new addPackage());
            processMap.put("addFiles", new addFiles());
            processMap.put("uploadContainer", new uploadContainer());
            processMap.put("deleteFiles", new deleteFiles());
            processMap.put("deletePackages", new deletePackages());
            processMap.put("pushToQueue", new pushToQueue());
            processMap.put("pullFromQueue", new pullFromQueue());
            processMap.put("restartPackage", new restartPackage());
            processMap.put("restartFile", new restartFile());
            processMap.put("recheckPackage", new recheckPackage());
            processMap.put("stopAllDownloads", new stopAllDownloads());
            processMap.put("stopDownloads", new stopDownloads());
            processMap.put("setPackageName", new setPackageName());
            processMap.put("movePackage", new movePackage());
            processMap.put("moveFiles", new moveFiles());
            processMap.put("orderPackage", new orderPackage());
            processMap.put("orderFile", new orderFile());
            processMap.put("setPackageData", new setPackageData());
            processMap.put("deleteFinished", new deleteFinished());
            processMap.put("restartFailed", new restartFailed());
            processMap.put("getEvents", new getEvents());
            processMap.put("getAccounts", new getAccounts());
            processMap.put("getAccountTypes", new getAccountTypes());
            processMap.put("updateAccount", new updateAccount());
            processMap.put("removeAccount", new removeAccount());
            processMap.put("login", new login());
            processMap.put("getUserData", new getUserData());
            processMap.put("getAllUserData", new getAllUserData());
            processMap.put("getServices", new getServices());
            processMap.put("hasService", new hasService());
            processMap.put("call", new call());
            processMap.put("getAllInfo", new getAllInfo());
            processMap.put("getInfoByPlugin", new getInfoByPlugin());
            processMap.put("isCaptchaWaiting", new isCaptchaWaiting());
            processMap.put("getCaptchaTask", new getCaptchaTask());
            processMap.put("getCaptchaTaskStatus", new getCaptchaTaskStatus());
            processMap.put("setCaptchaResult", new setCaptchaResult());
            return processMap;
        }

        public static class getConfigValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConfigValue_args> {
            public getConfigValue() {
                super("getConfigValue");
            }

            public getConfigValue_args getEmptyArgsInstance() {
                return new getConfigValue_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getConfigValue_result getResult(I iface, getConfigValue_args args) throws org.apache.thrift.TException {
                getConfigValue_result result = new getConfigValue_result();
                result.success = iface.getConfigValue(args.category, args.option, args.section);
                return result;
            }
        }

        public static class setConfigValue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setConfigValue_args> {
            public setConfigValue() {
                super("setConfigValue");
            }

            public setConfigValue_args getEmptyArgsInstance() {
                return new setConfigValue_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public setConfigValue_result getResult(I iface, setConfigValue_args args) throws org.apache.thrift.TException {
                setConfigValue_result result = new setConfigValue_result();
                iface.setConfigValue(args.category, args.option, args.value, args.section);
                return result;
            }
        }

        public static class getConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getConfig_args> {
            public getConfig() {
                super("getConfig");
            }

            public getConfig_args getEmptyArgsInstance() {
                return new getConfig_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getConfig_result getResult(I iface, getConfig_args args) throws org.apache.thrift.TException {
                getConfig_result result = new getConfig_result();
                result.success = iface.getConfig();
                return result;
            }
        }

        public static class getPluginConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPluginConfig_args> {
            public getPluginConfig() {
                super("getPluginConfig");
            }

            public getPluginConfig_args getEmptyArgsInstance() {
                return new getPluginConfig_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPluginConfig_result getResult(I iface, getPluginConfig_args args) throws org.apache.thrift.TException {
                getPluginConfig_result result = new getPluginConfig_result();
                result.success = iface.getPluginConfig();
                return result;
            }
        }

        public static class pauseServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pauseServer_args> {
            public pauseServer() {
                super("pauseServer");
            }

            public pauseServer_args getEmptyArgsInstance() {
                return new pauseServer_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public pauseServer_result getResult(I iface, pauseServer_args args) throws org.apache.thrift.TException {
                pauseServer_result result = new pauseServer_result();
                iface.pauseServer();
                return result;
            }
        }

        public static class unpauseServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unpauseServer_args> {
            public unpauseServer() {
                super("unpauseServer");
            }

            public unpauseServer_args getEmptyArgsInstance() {
                return new unpauseServer_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public unpauseServer_result getResult(I iface, unpauseServer_args args) throws org.apache.thrift.TException {
                unpauseServer_result result = new unpauseServer_result();
                iface.unpauseServer();
                return result;
            }
        }

        public static class togglePause<I extends Iface> extends org.apache.thrift.ProcessFunction<I, togglePause_args> {
            public togglePause() {
                super("togglePause");
            }

            public togglePause_args getEmptyArgsInstance() {
                return new togglePause_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public togglePause_result getResult(I iface, togglePause_args args) throws org.apache.thrift.TException {
                togglePause_result result = new togglePause_result();
                result.success = iface.togglePause();
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class statusServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statusServer_args> {
            public statusServer() {
                super("statusServer");
            }

            public statusServer_args getEmptyArgsInstance() {
                return new statusServer_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public statusServer_result getResult(I iface, statusServer_args args) throws org.apache.thrift.TException {
                statusServer_result result = new statusServer_result();
                result.success = iface.statusServer();
                return result;
            }
        }

        public static class freeSpace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, freeSpace_args> {
            public freeSpace() {
                super("freeSpace");
            }

            public freeSpace_args getEmptyArgsInstance() {
                return new freeSpace_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public freeSpace_result getResult(I iface, freeSpace_args args) throws org.apache.thrift.TException {
                freeSpace_result result = new freeSpace_result();
                result.success = iface.freeSpace();
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class getServerVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServerVersion_args> {
            public getServerVersion() {
                super("getServerVersion");
            }

            public getServerVersion_args getEmptyArgsInstance() {
                return new getServerVersion_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getServerVersion_result getResult(I iface, getServerVersion_args args) throws org.apache.thrift.TException {
                getServerVersion_result result = new getServerVersion_result();
                result.success = iface.getServerVersion();
                return result;
            }
        }

        public static class kill<I extends Iface> extends org.apache.thrift.ProcessFunction<I, kill_args> {
            public kill() {
                super("kill");
            }

            public kill_args getEmptyArgsInstance() {
                return new kill_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public kill_result getResult(I iface, kill_args args) throws org.apache.thrift.TException {
                kill_result result = new kill_result();
                iface.kill();
                return result;
            }
        }

        public static class restart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restart_args> {
            public restart() {
                super("restart");
            }

            public restart_args getEmptyArgsInstance() {
                return new restart_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public restart_result getResult(I iface, restart_args args) throws org.apache.thrift.TException {
                restart_result result = new restart_result();
                iface.restart();
                return result;
            }
        }

        public static class getLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLog_args> {
            public getLog() {
                super("getLog");
            }

            public getLog_args getEmptyArgsInstance() {
                return new getLog_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getLog_result getResult(I iface, getLog_args args) throws org.apache.thrift.TException {
                getLog_result result = new getLog_result();
                result.success = iface.getLog(args.offset);
                return result;
            }
        }

        public static class isTimeDownload<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isTimeDownload_args> {
            public isTimeDownload() {
                super("isTimeDownload");
            }

            public isTimeDownload_args getEmptyArgsInstance() {
                return new isTimeDownload_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public isTimeDownload_result getResult(I iface, isTimeDownload_args args) throws org.apache.thrift.TException {
                isTimeDownload_result result = new isTimeDownload_result();
                result.success = iface.isTimeDownload();
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class isTimeReconnect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isTimeReconnect_args> {
            public isTimeReconnect() {
                super("isTimeReconnect");
            }

            public isTimeReconnect_args getEmptyArgsInstance() {
                return new isTimeReconnect_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public isTimeReconnect_result getResult(I iface, isTimeReconnect_args args) throws org.apache.thrift.TException {
                isTimeReconnect_result result = new isTimeReconnect_result();
                result.success = iface.isTimeReconnect();
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class toggleReconnect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, toggleReconnect_args> {
            public toggleReconnect() {
                super("toggleReconnect");
            }

            public toggleReconnect_args getEmptyArgsInstance() {
                return new toggleReconnect_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public toggleReconnect_result getResult(I iface, toggleReconnect_args args) throws org.apache.thrift.TException {
                toggleReconnect_result result = new toggleReconnect_result();
                result.success = iface.toggleReconnect();
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class generatePackages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generatePackages_args> {
            public generatePackages() {
                super("generatePackages");
            }

            public generatePackages_args getEmptyArgsInstance() {
                return new generatePackages_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public generatePackages_result getResult(I iface, generatePackages_args args) throws org.apache.thrift.TException {
                generatePackages_result result = new generatePackages_result();
                result.success = iface.generatePackages(args.links);
                return result;
            }
        }

        public static class checkURLs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkURLs_args> {
            public checkURLs() {
                super("checkURLs");
            }

            public checkURLs_args getEmptyArgsInstance() {
                return new checkURLs_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public checkURLs_result getResult(I iface, checkURLs_args args) throws org.apache.thrift.TException {
                checkURLs_result result = new checkURLs_result();
                result.success = iface.checkURLs(args.urls);
                return result;
            }
        }

        public static class parseURLs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parseURLs_args> {
            public parseURLs() {
                super("parseURLs");
            }

            public parseURLs_args getEmptyArgsInstance() {
                return new parseURLs_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public parseURLs_result getResult(I iface, parseURLs_args args) throws org.apache.thrift.TException {
                parseURLs_result result = new parseURLs_result();
                result.success = iface.parseURLs(args.html, args.url);
                return result;
            }
        }

        public static class checkOnlineStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkOnlineStatus_args> {
            public checkOnlineStatus() {
                super("checkOnlineStatus");
            }

            public checkOnlineStatus_args getEmptyArgsInstance() {
                return new checkOnlineStatus_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public checkOnlineStatus_result getResult(I iface, checkOnlineStatus_args args) throws org.apache.thrift.TException {
                checkOnlineStatus_result result = new checkOnlineStatus_result();
                result.success = iface.checkOnlineStatus(args.urls);
                return result;
            }
        }

        public static class checkOnlineStatusContainer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkOnlineStatusContainer_args> {
            public checkOnlineStatusContainer() {
                super("checkOnlineStatusContainer");
            }

            public checkOnlineStatusContainer_args getEmptyArgsInstance() {
                return new checkOnlineStatusContainer_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public checkOnlineStatusContainer_result getResult(I iface, checkOnlineStatusContainer_args args) throws org.apache.thrift.TException {
                checkOnlineStatusContainer_result result = new checkOnlineStatusContainer_result();
                result.success = iface.checkOnlineStatusContainer(args.urls, args.filename, args.data);
                return result;
            }
        }

        public static class pollResults<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pollResults_args> {
            public pollResults() {
                super("pollResults");
            }

            public pollResults_args getEmptyArgsInstance() {
                return new pollResults_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public pollResults_result getResult(I iface, pollResults_args args) throws org.apache.thrift.TException {
                pollResults_result result = new pollResults_result();
                result.success = iface.pollResults(args.rid);
                return result;
            }
        }

        public static class statusDownloads<I extends Iface> extends org.apache.thrift.ProcessFunction<I, statusDownloads_args> {
            public statusDownloads() {
                super("statusDownloads");
            }

            public statusDownloads_args getEmptyArgsInstance() {
                return new statusDownloads_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public statusDownloads_result getResult(I iface, statusDownloads_args args) throws org.apache.thrift.TException {
                statusDownloads_result result = new statusDownloads_result();
                result.success = iface.statusDownloads();
                return result;
            }
        }

        public static class getPackageData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPackageData_args> {
            public getPackageData() {
                super("getPackageData");
            }

            public getPackageData_args getEmptyArgsInstance() {
                return new getPackageData_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPackageData_result getResult(I iface, getPackageData_args args) throws org.apache.thrift.TException {
                getPackageData_result result = new getPackageData_result();
                try {
                    result.success = iface.getPackageData(args.pid);
                } catch (PackageDoesNotExists e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getPackageInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPackageInfo_args> {
            public getPackageInfo() {
                super("getPackageInfo");
            }

            public getPackageInfo_args getEmptyArgsInstance() {
                return new getPackageInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPackageInfo_result getResult(I iface, getPackageInfo_args args) throws org.apache.thrift.TException {
                getPackageInfo_result result = new getPackageInfo_result();
                try {
                    result.success = iface.getPackageInfo(args.pid);
                } catch (PackageDoesNotExists e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getFileData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileData_args> {
            public getFileData() {
                super("getFileData");
            }

            public getFileData_args getEmptyArgsInstance() {
                return new getFileData_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getFileData_result getResult(I iface, getFileData_args args) throws org.apache.thrift.TException {
                getFileData_result result = new getFileData_result();
                try {
                    result.success = iface.getFileData(args.fid);
                } catch (FileDoesNotExists e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getQueue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQueue_args> {
            public getQueue() {
                super("getQueue");
            }

            public getQueue_args getEmptyArgsInstance() {
                return new getQueue_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getQueue_result getResult(I iface, getQueue_args args) throws org.apache.thrift.TException {
                getQueue_result result = new getQueue_result();
                result.success = iface.getQueue();
                return result;
            }
        }

        public static class getCollector<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollector_args> {
            public getCollector() {
                super("getCollector");
            }

            public getCollector_args getEmptyArgsInstance() {
                return new getCollector_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCollector_result getResult(I iface, getCollector_args args) throws org.apache.thrift.TException {
                getCollector_result result = new getCollector_result();
                result.success = iface.getCollector();
                return result;
            }
        }

        public static class getQueueData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQueueData_args> {
            public getQueueData() {
                super("getQueueData");
            }

            public getQueueData_args getEmptyArgsInstance() {
                return new getQueueData_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getQueueData_result getResult(I iface, getQueueData_args args) throws org.apache.thrift.TException {
                getQueueData_result result = new getQueueData_result();
                result.success = iface.getQueueData();
                return result;
            }
        }

        public static class getCollectorData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectorData_args> {
            public getCollectorData() {
                super("getCollectorData");
            }

            public getCollectorData_args getEmptyArgsInstance() {
                return new getCollectorData_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCollectorData_result getResult(I iface, getCollectorData_args args) throws org.apache.thrift.TException {
                getCollectorData_result result = new getCollectorData_result();
                result.success = iface.getCollectorData();
                return result;
            }
        }

        public static class getPackageOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPackageOrder_args> {
            public getPackageOrder() {
                super("getPackageOrder");
            }

            public getPackageOrder_args getEmptyArgsInstance() {
                return new getPackageOrder_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getPackageOrder_result getResult(I iface, getPackageOrder_args args) throws org.apache.thrift.TException {
                getPackageOrder_result result = new getPackageOrder_result();
                result.success = iface.getPackageOrder(args.destination);
                return result;
            }
        }

        public static class getFileOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFileOrder_args> {
            public getFileOrder() {
                super("getFileOrder");
            }

            public getFileOrder_args getEmptyArgsInstance() {
                return new getFileOrder_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getFileOrder_result getResult(I iface, getFileOrder_args args) throws org.apache.thrift.TException {
                getFileOrder_result result = new getFileOrder_result();
                result.success = iface.getFileOrder(args.pid);
                return result;
            }
        }

        public static class generateAndAddPackages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generateAndAddPackages_args> {
            public generateAndAddPackages() {
                super("generateAndAddPackages");
            }

            public generateAndAddPackages_args getEmptyArgsInstance() {
                return new generateAndAddPackages_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public generateAndAddPackages_result getResult(I iface, generateAndAddPackages_args args) throws org.apache.thrift.TException {
                generateAndAddPackages_result result = new generateAndAddPackages_result();
                result.success = iface.generateAndAddPackages(args.links, args.dest);
                return result;
            }
        }

        public static class addPackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPackage_args> {
            public addPackage() {
                super("addPackage");
            }

            public addPackage_args getEmptyArgsInstance() {
                return new addPackage_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addPackage_result getResult(I iface, addPackage_args args) throws org.apache.thrift.TException {
                addPackage_result result = new addPackage_result();
                result.success = iface.addPackage(args.name, args.links, args.dest);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class addFiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFiles_args> {
            public addFiles() {
                super("addFiles");
            }

            public addFiles_args getEmptyArgsInstance() {
                return new addFiles_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public addFiles_result getResult(I iface, addFiles_args args) throws org.apache.thrift.TException {
                addFiles_result result = new addFiles_result();
                iface.addFiles(args.pid, args.links);
                return result;
            }
        }

        public static class uploadContainer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadContainer_args> {
            public uploadContainer() {
                super("uploadContainer");
            }

            public uploadContainer_args getEmptyArgsInstance() {
                return new uploadContainer_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public uploadContainer_result getResult(I iface, uploadContainer_args args) throws org.apache.thrift.TException {
                uploadContainer_result result = new uploadContainer_result();
                iface.uploadContainer(args.filename, args.data);
                return result;
            }
        }

        public static class deleteFiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFiles_args> {
            public deleteFiles() {
                super("deleteFiles");
            }

            public deleteFiles_args getEmptyArgsInstance() {
                return new deleteFiles_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public deleteFiles_result getResult(I iface, deleteFiles_args args) throws org.apache.thrift.TException {
                deleteFiles_result result = new deleteFiles_result();
                iface.deleteFiles(args.fids);
                return result;
            }
        }

        public static class deletePackages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deletePackages_args> {
            public deletePackages() {
                super("deletePackages");
            }

            public deletePackages_args getEmptyArgsInstance() {
                return new deletePackages_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public deletePackages_result getResult(I iface, deletePackages_args args) throws org.apache.thrift.TException {
                deletePackages_result result = new deletePackages_result();
                iface.deletePackages(args.pids);
                return result;
            }
        }

        public static class pushToQueue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushToQueue_args> {
            public pushToQueue() {
                super("pushToQueue");
            }

            public pushToQueue_args getEmptyArgsInstance() {
                return new pushToQueue_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public pushToQueue_result getResult(I iface, pushToQueue_args args) throws org.apache.thrift.TException {
                pushToQueue_result result = new pushToQueue_result();
                iface.pushToQueue(args.pid);
                return result;
            }
        }

        public static class pullFromQueue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pullFromQueue_args> {
            public pullFromQueue() {
                super("pullFromQueue");
            }

            public pullFromQueue_args getEmptyArgsInstance() {
                return new pullFromQueue_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public pullFromQueue_result getResult(I iface, pullFromQueue_args args) throws org.apache.thrift.TException {
                pullFromQueue_result result = new pullFromQueue_result();
                iface.pullFromQueue(args.pid);
                return result;
            }
        }

        public static class restartPackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restartPackage_args> {
            public restartPackage() {
                super("restartPackage");
            }

            public restartPackage_args getEmptyArgsInstance() {
                return new restartPackage_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public restartPackage_result getResult(I iface, restartPackage_args args) throws org.apache.thrift.TException {
                restartPackage_result result = new restartPackage_result();
                iface.restartPackage(args.pid);
                return result;
            }
        }

        public static class restartFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restartFile_args> {
            public restartFile() {
                super("restartFile");
            }

            public restartFile_args getEmptyArgsInstance() {
                return new restartFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public restartFile_result getResult(I iface, restartFile_args args) throws org.apache.thrift.TException {
                restartFile_result result = new restartFile_result();
                iface.restartFile(args.fid);
                return result;
            }
        }

        public static class recheckPackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, recheckPackage_args> {
            public recheckPackage() {
                super("recheckPackage");
            }

            public recheckPackage_args getEmptyArgsInstance() {
                return new recheckPackage_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public recheckPackage_result getResult(I iface, recheckPackage_args args) throws org.apache.thrift.TException {
                recheckPackage_result result = new recheckPackage_result();
                iface.recheckPackage(args.pid);
                return result;
            }
        }

        public static class stopAllDownloads<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopAllDownloads_args> {
            public stopAllDownloads() {
                super("stopAllDownloads");
            }

            public stopAllDownloads_args getEmptyArgsInstance() {
                return new stopAllDownloads_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public stopAllDownloads_result getResult(I iface, stopAllDownloads_args args) throws org.apache.thrift.TException {
                stopAllDownloads_result result = new stopAllDownloads_result();
                iface.stopAllDownloads();
                return result;
            }
        }

        public static class stopDownloads<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopDownloads_args> {
            public stopDownloads() {
                super("stopDownloads");
            }

            public stopDownloads_args getEmptyArgsInstance() {
                return new stopDownloads_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public stopDownloads_result getResult(I iface, stopDownloads_args args) throws org.apache.thrift.TException {
                stopDownloads_result result = new stopDownloads_result();
                iface.stopDownloads(args.fids);
                return result;
            }
        }

        public static class setPackageName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPackageName_args> {
            public setPackageName() {
                super("setPackageName");
            }

            public setPackageName_args getEmptyArgsInstance() {
                return new setPackageName_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public setPackageName_result getResult(I iface, setPackageName_args args) throws org.apache.thrift.TException {
                setPackageName_result result = new setPackageName_result();
                iface.setPackageName(args.pid, args.name);
                return result;
            }
        }

        public static class movePackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, movePackage_args> {
            public movePackage() {
                super("movePackage");
            }

            public movePackage_args getEmptyArgsInstance() {
                return new movePackage_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public movePackage_result getResult(I iface, movePackage_args args) throws org.apache.thrift.TException {
                movePackage_result result = new movePackage_result();
                iface.movePackage(args.destination, args.pid);
                return result;
            }
        }

        public static class moveFiles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveFiles_args> {
            public moveFiles() {
                super("moveFiles");
            }

            public moveFiles_args getEmptyArgsInstance() {
                return new moveFiles_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public moveFiles_result getResult(I iface, moveFiles_args args) throws org.apache.thrift.TException {
                moveFiles_result result = new moveFiles_result();
                iface.moveFiles(args.fids, args.pid);
                return result;
            }
        }

        public static class orderPackage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, orderPackage_args> {
            public orderPackage() {
                super("orderPackage");
            }

            public orderPackage_args getEmptyArgsInstance() {
                return new orderPackage_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public orderPackage_result getResult(I iface, orderPackage_args args) throws org.apache.thrift.TException {
                orderPackage_result result = new orderPackage_result();
                iface.orderPackage(args.pid, args.position);
                return result;
            }
        }

        public static class orderFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, orderFile_args> {
            public orderFile() {
                super("orderFile");
            }

            public orderFile_args getEmptyArgsInstance() {
                return new orderFile_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public orderFile_result getResult(I iface, orderFile_args args) throws org.apache.thrift.TException {
                orderFile_result result = new orderFile_result();
                iface.orderFile(args.fid, args.position);
                return result;
            }
        }

        public static class setPackageData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPackageData_args> {
            public setPackageData() {
                super("setPackageData");
            }

            public setPackageData_args getEmptyArgsInstance() {
                return new setPackageData_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public setPackageData_result getResult(I iface, setPackageData_args args) throws org.apache.thrift.TException {
                setPackageData_result result = new setPackageData_result();
                try {
                    iface.setPackageData(args.pid, args.data);
                } catch (PackageDoesNotExists e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class deleteFinished<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFinished_args> {
            public deleteFinished() {
                super("deleteFinished");
            }

            public deleteFinished_args getEmptyArgsInstance() {
                return new deleteFinished_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public deleteFinished_result getResult(I iface, deleteFinished_args args) throws org.apache.thrift.TException {
                deleteFinished_result result = new deleteFinished_result();
                result.success = iface.deleteFinished();
                return result;
            }
        }

        public static class restartFailed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restartFailed_args> {
            public restartFailed() {
                super("restartFailed");
            }

            public restartFailed_args getEmptyArgsInstance() {
                return new restartFailed_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public restartFailed_result getResult(I iface, restartFailed_args args) throws org.apache.thrift.TException {
                restartFailed_result result = new restartFailed_result();
                iface.restartFailed();
                return result;
            }
        }

        public static class getEvents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEvents_args> {
            public getEvents() {
                super("getEvents");
            }

            public getEvents_args getEmptyArgsInstance() {
                return new getEvents_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getEvents_result getResult(I iface, getEvents_args args) throws org.apache.thrift.TException {
                getEvents_result result = new getEvents_result();
                result.success = iface.getEvents(args.uuid);
                return result;
            }
        }

        public static class getAccounts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccounts_args> {
            public getAccounts() {
                super("getAccounts");
            }

            public getAccounts_args getEmptyArgsInstance() {
                return new getAccounts_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getAccounts_result getResult(I iface, getAccounts_args args) throws org.apache.thrift.TException {
                getAccounts_result result = new getAccounts_result();
                result.success = iface.getAccounts(args.refresh);
                return result;
            }
        }

        public static class getAccountTypes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAccountTypes_args> {
            public getAccountTypes() {
                super("getAccountTypes");
            }

            public getAccountTypes_args getEmptyArgsInstance() {
                return new getAccountTypes_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getAccountTypes_result getResult(I iface, getAccountTypes_args args) throws org.apache.thrift.TException {
                getAccountTypes_result result = new getAccountTypes_result();
                result.success = iface.getAccountTypes();
                return result;
            }
        }

        public static class updateAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAccount_args> {
            public updateAccount() {
                super("updateAccount");
            }

            public updateAccount_args getEmptyArgsInstance() {
                return new updateAccount_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public updateAccount_result getResult(I iface, updateAccount_args args) throws org.apache.thrift.TException {
                updateAccount_result result = new updateAccount_result();
                iface.updateAccount(args.plugin, args.account, args.password, args.options);
                return result;
            }
        }

        public static class removeAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeAccount_args> {
            public removeAccount() {
                super("removeAccount");
            }

            public removeAccount_args getEmptyArgsInstance() {
                return new removeAccount_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public removeAccount_result getResult(I iface, removeAccount_args args) throws org.apache.thrift.TException {
                removeAccount_result result = new removeAccount_result();
                iface.removeAccount(args.plugin, args.account);
                return result;
            }
        }

        public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
            public login() {
                super("login");
            }

            public login_args getEmptyArgsInstance() {
                return new login_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
                login_result result = new login_result();
                result.success = iface.login(args.username, args.password);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class getUserData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserData_args> {
            public getUserData() {
                super("getUserData");
            }

            public getUserData_args getEmptyArgsInstance() {
                return new getUserData_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getUserData_result getResult(I iface, getUserData_args args) throws org.apache.thrift.TException {
                getUserData_result result = new getUserData_result();
                result.success = iface.getUserData(args.username, args.password);
                return result;
            }
        }

        public static class getAllUserData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllUserData_args> {
            public getAllUserData() {
                super("getAllUserData");
            }

            public getAllUserData_args getEmptyArgsInstance() {
                return new getAllUserData_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getAllUserData_result getResult(I iface, getAllUserData_args args) throws org.apache.thrift.TException {
                getAllUserData_result result = new getAllUserData_result();
                result.success = iface.getAllUserData();
                return result;
            }
        }

        public static class getServices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServices_args> {
            public getServices() {
                super("getServices");
            }

            public getServices_args getEmptyArgsInstance() {
                return new getServices_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getServices_result getResult(I iface, getServices_args args) throws org.apache.thrift.TException {
                getServices_result result = new getServices_result();
                result.success = iface.getServices();
                return result;
            }
        }

        public static class hasService<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hasService_args> {
            public hasService() {
                super("hasService");
            }

            public hasService_args getEmptyArgsInstance() {
                return new hasService_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public hasService_result getResult(I iface, hasService_args args) throws org.apache.thrift.TException {
                hasService_result result = new hasService_result();
                result.success = iface.hasService(args.plugin, args.func);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class call<I extends Iface> extends org.apache.thrift.ProcessFunction<I, call_args> {
            public call() {
                super("call");
            }

            public call_args getEmptyArgsInstance() {
                return new call_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public call_result getResult(I iface, call_args args) throws org.apache.thrift.TException {
                call_result result = new call_result();
                try {
                    result.success = iface.call(args.info);
                } catch (ServiceDoesNotExists ex) {
                    result.ex = ex;
                } catch (ServiceException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class getAllInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllInfo_args> {
            public getAllInfo() {
                super("getAllInfo");
            }

            public getAllInfo_args getEmptyArgsInstance() {
                return new getAllInfo_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getAllInfo_result getResult(I iface, getAllInfo_args args) throws org.apache.thrift.TException {
                getAllInfo_result result = new getAllInfo_result();
                result.success = iface.getAllInfo();
                return result;
            }
        }

        public static class getInfoByPlugin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInfoByPlugin_args> {
            public getInfoByPlugin() {
                super("getInfoByPlugin");
            }

            public getInfoByPlugin_args getEmptyArgsInstance() {
                return new getInfoByPlugin_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getInfoByPlugin_result getResult(I iface, getInfoByPlugin_args args) throws org.apache.thrift.TException {
                getInfoByPlugin_result result = new getInfoByPlugin_result();
                result.success = iface.getInfoByPlugin(args.plugin);
                return result;
            }
        }

        public static class isCaptchaWaiting<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isCaptchaWaiting_args> {
            public isCaptchaWaiting() {
                super("isCaptchaWaiting");
            }

            public isCaptchaWaiting_args getEmptyArgsInstance() {
                return new isCaptchaWaiting_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public isCaptchaWaiting_result getResult(I iface, isCaptchaWaiting_args args) throws org.apache.thrift.TException {
                isCaptchaWaiting_result result = new isCaptchaWaiting_result();
                result.success = iface.isCaptchaWaiting();
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class getCaptchaTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCaptchaTask_args> {
            public getCaptchaTask() {
                super("getCaptchaTask");
            }

            public getCaptchaTask_args getEmptyArgsInstance() {
                return new getCaptchaTask_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCaptchaTask_result getResult(I iface, getCaptchaTask_args args) throws org.apache.thrift.TException {
                getCaptchaTask_result result = new getCaptchaTask_result();
                result.success = iface.getCaptchaTask(args.exclusive);
                return result;
            }
        }

        public static class getCaptchaTaskStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCaptchaTaskStatus_args> {
            public getCaptchaTaskStatus() {
                super("getCaptchaTaskStatus");
            }

            public getCaptchaTaskStatus_args getEmptyArgsInstance() {
                return new getCaptchaTaskStatus_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public getCaptchaTaskStatus_result getResult(I iface, getCaptchaTaskStatus_args args) throws org.apache.thrift.TException {
                getCaptchaTaskStatus_result result = new getCaptchaTaskStatus_result();
                result.success = iface.getCaptchaTaskStatus(args.tid);
                return result;
            }
        }

        public static class setCaptchaResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCaptchaResult_args> {
            public setCaptchaResult() {
                super("setCaptchaResult");
            }

            public setCaptchaResult_args getEmptyArgsInstance() {
                return new setCaptchaResult_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public setCaptchaResult_result getResult(I iface, setCaptchaResult_args args) throws org.apache.thrift.TException {
                setCaptchaResult_result result = new setCaptchaResult_result();
                iface.setCaptchaResult(args.tid, args.result);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("getConfigValue", new getConfigValue());
            processMap.put("setConfigValue", new setConfigValue());
            processMap.put("getConfig", new getConfig());
            processMap.put("getPluginConfig", new getPluginConfig());
            processMap.put("pauseServer", new pauseServer());
            processMap.put("unpauseServer", new unpauseServer());
            processMap.put("togglePause", new togglePause());
            processMap.put("statusServer", new statusServer());
            processMap.put("freeSpace", new freeSpace());
            processMap.put("getServerVersion", new getServerVersion());
            processMap.put("kill", new kill());
            processMap.put("restart", new restart());
            processMap.put("getLog", new getLog());
            processMap.put("isTimeDownload", new isTimeDownload());
            processMap.put("isTimeReconnect", new isTimeReconnect());
            processMap.put("toggleReconnect", new toggleReconnect());
            processMap.put("generatePackages", new generatePackages());
            processMap.put("checkURLs", new checkURLs());
            processMap.put("parseURLs", new parseURLs());
            processMap.put("checkOnlineStatus", new checkOnlineStatus());
            processMap.put("checkOnlineStatusContainer", new checkOnlineStatusContainer());
            processMap.put("pollResults", new pollResults());
            processMap.put("statusDownloads", new statusDownloads());
            processMap.put("getPackageData", new getPackageData());
            processMap.put("getPackageInfo", new getPackageInfo());
            processMap.put("getFileData", new getFileData());
            processMap.put("getQueue", new getQueue());
            processMap.put("getCollector", new getCollector());
            processMap.put("getQueueData", new getQueueData());
            processMap.put("getCollectorData", new getCollectorData());
            processMap.put("getPackageOrder", new getPackageOrder());
            processMap.put("getFileOrder", new getFileOrder());
            processMap.put("generateAndAddPackages", new generateAndAddPackages());
            processMap.put("addPackage", new addPackage());
            processMap.put("addFiles", new addFiles());
            processMap.put("uploadContainer", new uploadContainer());
            processMap.put("deleteFiles", new deleteFiles());
            processMap.put("deletePackages", new deletePackages());
            processMap.put("pushToQueue", new pushToQueue());
            processMap.put("pullFromQueue", new pullFromQueue());
            processMap.put("restartPackage", new restartPackage());
            processMap.put("restartFile", new restartFile());
            processMap.put("recheckPackage", new recheckPackage());
            processMap.put("stopAllDownloads", new stopAllDownloads());
            processMap.put("stopDownloads", new stopDownloads());
            processMap.put("setPackageName", new setPackageName());
            processMap.put("movePackage", new movePackage());
            processMap.put("moveFiles", new moveFiles());
            processMap.put("orderPackage", new orderPackage());
            processMap.put("orderFile", new orderFile());
            processMap.put("setPackageData", new setPackageData());
            processMap.put("deleteFinished", new deleteFinished());
            processMap.put("restartFailed", new restartFailed());
            processMap.put("getEvents", new getEvents());
            processMap.put("getAccounts", new getAccounts());
            processMap.put("getAccountTypes", new getAccountTypes());
            processMap.put("updateAccount", new updateAccount());
            processMap.put("removeAccount", new removeAccount());
            processMap.put("login", new login());
            processMap.put("getUserData", new getUserData());
            processMap.put("getAllUserData", new getAllUserData());
            processMap.put("getServices", new getServices());
            processMap.put("hasService", new hasService());
            processMap.put("call", new call());
            processMap.put("getAllInfo", new getAllInfo());
            processMap.put("getInfoByPlugin", new getInfoByPlugin());
            processMap.put("isCaptchaWaiting", new isCaptchaWaiting());
            processMap.put("getCaptchaTask", new getCaptchaTask());
            processMap.put("getCaptchaTaskStatus", new getCaptchaTaskStatus());
            processMap.put("setCaptchaResult", new setCaptchaResult());
            return processMap;
        }

        public static class getConfigValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConfigValue_args, String> {
            public getConfigValue() {
                super("getConfigValue");
            }

            public getConfigValue_args getEmptyArgsInstance() {
                return new getConfigValue_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        getConfigValue_result result = new getConfigValue_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getConfigValue_result result = new getConfigValue_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getConfigValue_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.getConfigValue(args.category, args.option, args.section, resultHandler);
            }
        }

        public static class setConfigValue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setConfigValue_args, Void> {
            public setConfigValue() {
                super("setConfigValue");
            }

            public setConfigValue_args getEmptyArgsInstance() {
                return new setConfigValue_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        setConfigValue_result result = new setConfigValue_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        setConfigValue_result result = new setConfigValue_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, setConfigValue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.setConfigValue(args.category, args.option, args.value, args.section, resultHandler);
            }
        }

        public static class getConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getConfig_args, Map<String, ConfigSection>> {
            public getConfig() {
                super("getConfig");
            }

            public getConfig_args getEmptyArgsInstance() {
                return new getConfig_args();
            }

            public AsyncMethodCallback<Map<String, ConfigSection>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<String, ConfigSection>>() {
                    public void onComplete(Map<String, ConfigSection> o) {
                        getConfig_result result = new getConfig_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getConfig_result result = new getConfig_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getConfig_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String, ConfigSection>> resultHandler) throws TException {
                iface.getConfig(resultHandler);
            }
        }

        public static class getPluginConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPluginConfig_args, Map<String, ConfigSection>> {
            public getPluginConfig() {
                super("getPluginConfig");
            }

            public getPluginConfig_args getEmptyArgsInstance() {
                return new getPluginConfig_args();
            }

            public AsyncMethodCallback<Map<String, ConfigSection>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<String, ConfigSection>>() {
                    public void onComplete(Map<String, ConfigSection> o) {
                        getPluginConfig_result result = new getPluginConfig_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getPluginConfig_result result = new getPluginConfig_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPluginConfig_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String, ConfigSection>> resultHandler) throws TException {
                iface.getPluginConfig(resultHandler);
            }
        }

        public static class pauseServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pauseServer_args, Void> {
            public pauseServer() {
                super("pauseServer");
            }

            public pauseServer_args getEmptyArgsInstance() {
                return new pauseServer_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        pauseServer_result result = new pauseServer_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        pauseServer_result result = new pauseServer_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, pauseServer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.pauseServer(resultHandler);
            }
        }

        public static class unpauseServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unpauseServer_args, Void> {
            public unpauseServer() {
                super("unpauseServer");
            }

            public unpauseServer_args getEmptyArgsInstance() {
                return new unpauseServer_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        unpauseServer_result result = new unpauseServer_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        unpauseServer_result result = new unpauseServer_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, unpauseServer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.unpauseServer(resultHandler);
            }
        }

        public static class togglePause<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, togglePause_args, Boolean> {
            public togglePause() {
                super("togglePause");
            }

            public togglePause_args getEmptyArgsInstance() {
                return new togglePause_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        togglePause_result result = new togglePause_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        togglePause_result result = new togglePause_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, togglePause_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.togglePause(resultHandler);
            }
        }

        public static class statusServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statusServer_args, ServerStatus> {
            public statusServer() {
                super("statusServer");
            }

            public statusServer_args getEmptyArgsInstance() {
                return new statusServer_args();
            }

            public AsyncMethodCallback<ServerStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<ServerStatus>() {
                    public void onComplete(ServerStatus o) {
                        statusServer_result result = new statusServer_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        statusServer_result result = new statusServer_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, statusServer_args args, org.apache.thrift.async.AsyncMethodCallback<ServerStatus> resultHandler) throws TException {
                iface.statusServer(resultHandler);
            }
        }

        public static class freeSpace<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, freeSpace_args, Long> {
            public freeSpace() {
                super("freeSpace");
            }

            public freeSpace_args getEmptyArgsInstance() {
                return new freeSpace_args();
            }

            public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Long>() {
                    public void onComplete(Long o) {
                        freeSpace_result result = new freeSpace_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        freeSpace_result result = new freeSpace_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, freeSpace_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
                iface.freeSpace(resultHandler);
            }
        }

        public static class getServerVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getServerVersion_args, String> {
            public getServerVersion() {
                super("getServerVersion");
            }

            public getServerVersion_args getEmptyArgsInstance() {
                return new getServerVersion_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        getServerVersion_result result = new getServerVersion_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getServerVersion_result result = new getServerVersion_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getServerVersion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.getServerVersion(resultHandler);
            }
        }

        public static class kill<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, kill_args, Void> {
            public kill() {
                super("kill");
            }

            public kill_args getEmptyArgsInstance() {
                return new kill_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        kill_result result = new kill_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        kill_result result = new kill_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, kill_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.kill(resultHandler);
            }
        }

        public static class restart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restart_args, Void> {
            public restart() {
                super("restart");
            }

            public restart_args getEmptyArgsInstance() {
                return new restart_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        restart_result result = new restart_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        restart_result result = new restart_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, restart_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.restart(resultHandler);
            }
        }

        public static class getLog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLog_args, List<String>> {
            public getLog() {
                super("getLog");
            }

            public getLog_args getEmptyArgsInstance() {
                return new getLog_args();
            }

            public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<String>>() {
                    public void onComplete(List<String> o) {
                        getLog_result result = new getLog_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getLog_result result = new getLog_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getLog_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
                iface.getLog(args.offset, resultHandler);
            }
        }

        public static class isTimeDownload<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isTimeDownload_args, Boolean> {
            public isTimeDownload() {
                super("isTimeDownload");
            }

            public isTimeDownload_args getEmptyArgsInstance() {
                return new isTimeDownload_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        isTimeDownload_result result = new isTimeDownload_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        isTimeDownload_result result = new isTimeDownload_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, isTimeDownload_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.isTimeDownload(resultHandler);
            }
        }

        public static class isTimeReconnect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isTimeReconnect_args, Boolean> {
            public isTimeReconnect() {
                super("isTimeReconnect");
            }

            public isTimeReconnect_args getEmptyArgsInstance() {
                return new isTimeReconnect_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        isTimeReconnect_result result = new isTimeReconnect_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        isTimeReconnect_result result = new isTimeReconnect_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, isTimeReconnect_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.isTimeReconnect(resultHandler);
            }
        }

        public static class toggleReconnect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, toggleReconnect_args, Boolean> {
            public toggleReconnect() {
                super("toggleReconnect");
            }

            public toggleReconnect_args getEmptyArgsInstance() {
                return new toggleReconnect_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        toggleReconnect_result result = new toggleReconnect_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        toggleReconnect_result result = new toggleReconnect_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, toggleReconnect_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.toggleReconnect(resultHandler);
            }
        }

        public static class generatePackages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generatePackages_args, Map<String, List<String>>> {
            public generatePackages() {
                super("generatePackages");
            }

            public generatePackages_args getEmptyArgsInstance() {
                return new generatePackages_args();
            }

            public AsyncMethodCallback<Map<String, List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<String, List<String>>>() {
                    public void onComplete(Map<String, List<String>> o) {
                        generatePackages_result result = new generatePackages_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        generatePackages_result result = new generatePackages_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, generatePackages_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String, List<String>>> resultHandler) throws TException {
                iface.generatePackages(args.links, resultHandler);
            }
        }

        public static class checkURLs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkURLs_args, Map<String, List<String>>> {
            public checkURLs() {
                super("checkURLs");
            }

            public checkURLs_args getEmptyArgsInstance() {
                return new checkURLs_args();
            }

            public AsyncMethodCallback<Map<String, List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<String, List<String>>>() {
                    public void onComplete(Map<String, List<String>> o) {
                        checkURLs_result result = new checkURLs_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        checkURLs_result result = new checkURLs_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, checkURLs_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String, List<String>>> resultHandler) throws TException {
                iface.checkURLs(args.urls, resultHandler);
            }
        }

        public static class parseURLs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parseURLs_args, Map<String, List<String>>> {
            public parseURLs() {
                super("parseURLs");
            }

            public parseURLs_args getEmptyArgsInstance() {
                return new parseURLs_args();
            }

            public AsyncMethodCallback<Map<String, List<String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<String, List<String>>>() {
                    public void onComplete(Map<String, List<String>> o) {
                        parseURLs_result result = new parseURLs_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        parseURLs_result result = new parseURLs_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, parseURLs_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String, List<String>>> resultHandler) throws TException {
                iface.parseURLs(args.html, args.url, resultHandler);
            }
        }

        public static class checkOnlineStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkOnlineStatus_args, OnlineCheck> {
            public checkOnlineStatus() {
                super("checkOnlineStatus");
            }

            public checkOnlineStatus_args getEmptyArgsInstance() {
                return new checkOnlineStatus_args();
            }

            public AsyncMethodCallback<OnlineCheck> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<OnlineCheck>() {
                    public void onComplete(OnlineCheck o) {
                        checkOnlineStatus_result result = new checkOnlineStatus_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        checkOnlineStatus_result result = new checkOnlineStatus_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, checkOnlineStatus_args args, org.apache.thrift.async.AsyncMethodCallback<OnlineCheck> resultHandler) throws TException {
                iface.checkOnlineStatus(args.urls, resultHandler);
            }
        }

        public static class checkOnlineStatusContainer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkOnlineStatusContainer_args, OnlineCheck> {
            public checkOnlineStatusContainer() {
                super("checkOnlineStatusContainer");
            }

            public checkOnlineStatusContainer_args getEmptyArgsInstance() {
                return new checkOnlineStatusContainer_args();
            }

            public AsyncMethodCallback<OnlineCheck> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<OnlineCheck>() {
                    public void onComplete(OnlineCheck o) {
                        checkOnlineStatusContainer_result result = new checkOnlineStatusContainer_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        checkOnlineStatusContainer_result result = new checkOnlineStatusContainer_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, checkOnlineStatusContainer_args args, org.apache.thrift.async.AsyncMethodCallback<OnlineCheck> resultHandler) throws TException {
                iface.checkOnlineStatusContainer(args.urls, args.filename, args.data, resultHandler);
            }
        }

        public static class pollResults<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pollResults_args, OnlineCheck> {
            public pollResults() {
                super("pollResults");
            }

            public pollResults_args getEmptyArgsInstance() {
                return new pollResults_args();
            }

            public AsyncMethodCallback<OnlineCheck> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<OnlineCheck>() {
                    public void onComplete(OnlineCheck o) {
                        pollResults_result result = new pollResults_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        pollResults_result result = new pollResults_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, pollResults_args args, org.apache.thrift.async.AsyncMethodCallback<OnlineCheck> resultHandler) throws TException {
                iface.pollResults(args.rid, resultHandler);
            }
        }

        public static class statusDownloads<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, statusDownloads_args, List<DownloadInfo>> {
            public statusDownloads() {
                super("statusDownloads");
            }

            public statusDownloads_args getEmptyArgsInstance() {
                return new statusDownloads_args();
            }

            public AsyncMethodCallback<List<DownloadInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<DownloadInfo>>() {
                    public void onComplete(List<DownloadInfo> o) {
                        statusDownloads_result result = new statusDownloads_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        statusDownloads_result result = new statusDownloads_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, statusDownloads_args args, org.apache.thrift.async.AsyncMethodCallback<List<DownloadInfo>> resultHandler) throws TException {
                iface.statusDownloads(resultHandler);
            }
        }

        public static class getPackageData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPackageData_args, PackageData> {
            public getPackageData() {
                super("getPackageData");
            }

            public getPackageData_args getEmptyArgsInstance() {
                return new getPackageData_args();
            }

            public AsyncMethodCallback<PackageData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<PackageData>() {
                    public void onComplete(PackageData o) {
                        getPackageData_result result = new getPackageData_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getPackageData_result result = new getPackageData_result();
                        if (e instanceof PackageDoesNotExists) {
                            result.e = (PackageDoesNotExists) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPackageData_args args, org.apache.thrift.async.AsyncMethodCallback<PackageData> resultHandler) throws TException {
                iface.getPackageData(args.pid, resultHandler);
            }
        }

        public static class getPackageInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPackageInfo_args, PackageData> {
            public getPackageInfo() {
                super("getPackageInfo");
            }

            public getPackageInfo_args getEmptyArgsInstance() {
                return new getPackageInfo_args();
            }

            public AsyncMethodCallback<PackageData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<PackageData>() {
                    public void onComplete(PackageData o) {
                        getPackageInfo_result result = new getPackageInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getPackageInfo_result result = new getPackageInfo_result();
                        if (e instanceof PackageDoesNotExists) {
                            result.e = (PackageDoesNotExists) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPackageInfo_args args, org.apache.thrift.async.AsyncMethodCallback<PackageData> resultHandler) throws TException {
                iface.getPackageInfo(args.pid, resultHandler);
            }
        }

        public static class getFileData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFileData_args, FileData> {
            public getFileData() {
                super("getFileData");
            }

            public getFileData_args getEmptyArgsInstance() {
                return new getFileData_args();
            }

            public AsyncMethodCallback<FileData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<FileData>() {
                    public void onComplete(FileData o) {
                        getFileData_result result = new getFileData_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getFileData_result result = new getFileData_result();
                        if (e instanceof FileDoesNotExists) {
                            result.e = (FileDoesNotExists) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getFileData_args args, org.apache.thrift.async.AsyncMethodCallback<FileData> resultHandler) throws TException {
                iface.getFileData(args.fid, resultHandler);
            }
        }

        public static class getQueue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQueue_args, List<PackageData>> {
            public getQueue() {
                super("getQueue");
            }

            public getQueue_args getEmptyArgsInstance() {
                return new getQueue_args();
            }

            public AsyncMethodCallback<List<PackageData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<PackageData>>() {
                    public void onComplete(List<PackageData> o) {
                        getQueue_result result = new getQueue_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getQueue_result result = new getQueue_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getQueue_args args, org.apache.thrift.async.AsyncMethodCallback<List<PackageData>> resultHandler) throws TException {
                iface.getQueue(resultHandler);
            }
        }

        public static class getCollector<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollector_args, List<PackageData>> {
            public getCollector() {
                super("getCollector");
            }

            public getCollector_args getEmptyArgsInstance() {
                return new getCollector_args();
            }

            public AsyncMethodCallback<List<PackageData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<PackageData>>() {
                    public void onComplete(List<PackageData> o) {
                        getCollector_result result = new getCollector_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getCollector_result result = new getCollector_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCollector_args args, org.apache.thrift.async.AsyncMethodCallback<List<PackageData>> resultHandler) throws TException {
                iface.getCollector(resultHandler);
            }
        }

        public static class getQueueData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQueueData_args, List<PackageData>> {
            public getQueueData() {
                super("getQueueData");
            }

            public getQueueData_args getEmptyArgsInstance() {
                return new getQueueData_args();
            }

            public AsyncMethodCallback<List<PackageData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<PackageData>>() {
                    public void onComplete(List<PackageData> o) {
                        getQueueData_result result = new getQueueData_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getQueueData_result result = new getQueueData_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getQueueData_args args, org.apache.thrift.async.AsyncMethodCallback<List<PackageData>> resultHandler) throws TException {
                iface.getQueueData(resultHandler);
            }
        }

        public static class getCollectorData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectorData_args, List<PackageData>> {
            public getCollectorData() {
                super("getCollectorData");
            }

            public getCollectorData_args getEmptyArgsInstance() {
                return new getCollectorData_args();
            }

            public AsyncMethodCallback<List<PackageData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<PackageData>>() {
                    public void onComplete(List<PackageData> o) {
                        getCollectorData_result result = new getCollectorData_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getCollectorData_result result = new getCollectorData_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCollectorData_args args, org.apache.thrift.async.AsyncMethodCallback<List<PackageData>> resultHandler) throws TException {
                iface.getCollectorData(resultHandler);
            }
        }

        public static class getPackageOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPackageOrder_args, Map<Short, Integer>> {
            public getPackageOrder() {
                super("getPackageOrder");
            }

            public getPackageOrder_args getEmptyArgsInstance() {
                return new getPackageOrder_args();
            }

            public AsyncMethodCallback<Map<Short, Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<Short, Integer>>() {
                    public void onComplete(Map<Short, Integer> o) {
                        getPackageOrder_result result = new getPackageOrder_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getPackageOrder_result result = new getPackageOrder_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPackageOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Short, Integer>> resultHandler) throws TException {
                iface.getPackageOrder(args.destination, resultHandler);
            }
        }

        public static class getFileOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFileOrder_args, Map<Short, Integer>> {
            public getFileOrder() {
                super("getFileOrder");
            }

            public getFileOrder_args getEmptyArgsInstance() {
                return new getFileOrder_args();
            }

            public AsyncMethodCallback<Map<Short, Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<Short, Integer>>() {
                    public void onComplete(Map<Short, Integer> o) {
                        getFileOrder_result result = new getFileOrder_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getFileOrder_result result = new getFileOrder_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getFileOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Short, Integer>> resultHandler) throws TException {
                iface.getFileOrder(args.pid, resultHandler);
            }
        }

        public static class generateAndAddPackages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, generateAndAddPackages_args, List<Integer>> {
            public generateAndAddPackages() {
                super("generateAndAddPackages");
            }

            public generateAndAddPackages_args getEmptyArgsInstance() {
                return new generateAndAddPackages_args();
            }

            public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<Integer>>() {
                    public void onComplete(List<Integer> o) {
                        generateAndAddPackages_result result = new generateAndAddPackages_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        generateAndAddPackages_result result = new generateAndAddPackages_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, generateAndAddPackages_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
                iface.generateAndAddPackages(args.links, args.dest, resultHandler);
            }
        }

        public static class addPackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPackage_args, Integer> {
            public addPackage() {
                super("addPackage");
            }

            public addPackage_args getEmptyArgsInstance() {
                return new addPackage_args();
            }

            public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Integer>() {
                    public void onComplete(Integer o) {
                        addPackage_result result = new addPackage_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        addPackage_result result = new addPackage_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addPackage_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
                iface.addPackage(args.name, args.links, args.dest, resultHandler);
            }
        }

        public static class addFiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFiles_args, Void> {
            public addFiles() {
                super("addFiles");
            }

            public addFiles_args getEmptyArgsInstance() {
                return new addFiles_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        addFiles_result result = new addFiles_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        addFiles_result result = new addFiles_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, addFiles_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.addFiles(args.pid, args.links, resultHandler);
            }
        }

        public static class uploadContainer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadContainer_args, Void> {
            public uploadContainer() {
                super("uploadContainer");
            }

            public uploadContainer_args getEmptyArgsInstance() {
                return new uploadContainer_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        uploadContainer_result result = new uploadContainer_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        uploadContainer_result result = new uploadContainer_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, uploadContainer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.uploadContainer(args.filename, args.data, resultHandler);
            }
        }

        public static class deleteFiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFiles_args, Void> {
            public deleteFiles() {
                super("deleteFiles");
            }

            public deleteFiles_args getEmptyArgsInstance() {
                return new deleteFiles_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        deleteFiles_result result = new deleteFiles_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        deleteFiles_result result = new deleteFiles_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteFiles_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.deleteFiles(args.fids, resultHandler);
            }
        }

        public static class deletePackages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deletePackages_args, Void> {
            public deletePackages() {
                super("deletePackages");
            }

            public deletePackages_args getEmptyArgsInstance() {
                return new deletePackages_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        deletePackages_result result = new deletePackages_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        deletePackages_result result = new deletePackages_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deletePackages_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.deletePackages(args.pids, resultHandler);
            }
        }

        public static class pushToQueue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pushToQueue_args, Void> {
            public pushToQueue() {
                super("pushToQueue");
            }

            public pushToQueue_args getEmptyArgsInstance() {
                return new pushToQueue_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        pushToQueue_result result = new pushToQueue_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        pushToQueue_result result = new pushToQueue_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, pushToQueue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.pushToQueue(args.pid, resultHandler);
            }
        }

        public static class pullFromQueue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pullFromQueue_args, Void> {
            public pullFromQueue() {
                super("pullFromQueue");
            }

            public pullFromQueue_args getEmptyArgsInstance() {
                return new pullFromQueue_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        pullFromQueue_result result = new pullFromQueue_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        pullFromQueue_result result = new pullFromQueue_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, pullFromQueue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.pullFromQueue(args.pid, resultHandler);
            }
        }

        public static class restartPackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restartPackage_args, Void> {
            public restartPackage() {
                super("restartPackage");
            }

            public restartPackage_args getEmptyArgsInstance() {
                return new restartPackage_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        restartPackage_result result = new restartPackage_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        restartPackage_result result = new restartPackage_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, restartPackage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.restartPackage(args.pid, resultHandler);
            }
        }

        public static class restartFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restartFile_args, Void> {
            public restartFile() {
                super("restartFile");
            }

            public restartFile_args getEmptyArgsInstance() {
                return new restartFile_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        restartFile_result result = new restartFile_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        restartFile_result result = new restartFile_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, restartFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.restartFile(args.fid, resultHandler);
            }
        }

        public static class recheckPackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, recheckPackage_args, Void> {
            public recheckPackage() {
                super("recheckPackage");
            }

            public recheckPackage_args getEmptyArgsInstance() {
                return new recheckPackage_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        recheckPackage_result result = new recheckPackage_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        recheckPackage_result result = new recheckPackage_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, recheckPackage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.recheckPackage(args.pid, resultHandler);
            }
        }

        public static class stopAllDownloads<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stopAllDownloads_args, Void> {
            public stopAllDownloads() {
                super("stopAllDownloads");
            }

            public stopAllDownloads_args getEmptyArgsInstance() {
                return new stopAllDownloads_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        stopAllDownloads_result result = new stopAllDownloads_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        stopAllDownloads_result result = new stopAllDownloads_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, stopAllDownloads_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.stopAllDownloads(resultHandler);
            }
        }

        public static class stopDownloads<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stopDownloads_args, Void> {
            public stopDownloads() {
                super("stopDownloads");
            }

            public stopDownloads_args getEmptyArgsInstance() {
                return new stopDownloads_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        stopDownloads_result result = new stopDownloads_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        stopDownloads_result result = new stopDownloads_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, stopDownloads_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.stopDownloads(args.fids, resultHandler);
            }
        }

        public static class setPackageName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPackageName_args, Void> {
            public setPackageName() {
                super("setPackageName");
            }

            public setPackageName_args getEmptyArgsInstance() {
                return new setPackageName_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        setPackageName_result result = new setPackageName_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        setPackageName_result result = new setPackageName_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, setPackageName_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.setPackageName(args.pid, args.name, resultHandler);
            }
        }

        public static class movePackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, movePackage_args, Void> {
            public movePackage() {
                super("movePackage");
            }

            public movePackage_args getEmptyArgsInstance() {
                return new movePackage_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        movePackage_result result = new movePackage_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        movePackage_result result = new movePackage_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, movePackage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.movePackage(args.destination, args.pid, resultHandler);
            }
        }

        public static class moveFiles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, moveFiles_args, Void> {
            public moveFiles() {
                super("moveFiles");
            }

            public moveFiles_args getEmptyArgsInstance() {
                return new moveFiles_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        moveFiles_result result = new moveFiles_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        moveFiles_result result = new moveFiles_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, moveFiles_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.moveFiles(args.fids, args.pid, resultHandler);
            }
        }

        public static class orderPackage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, orderPackage_args, Void> {
            public orderPackage() {
                super("orderPackage");
            }

            public orderPackage_args getEmptyArgsInstance() {
                return new orderPackage_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        orderPackage_result result = new orderPackage_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        orderPackage_result result = new orderPackage_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, orderPackage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.orderPackage(args.pid, args.position, resultHandler);
            }
        }

        public static class orderFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, orderFile_args, Void> {
            public orderFile() {
                super("orderFile");
            }

            public orderFile_args getEmptyArgsInstance() {
                return new orderFile_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        orderFile_result result = new orderFile_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        orderFile_result result = new orderFile_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, orderFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.orderFile(args.fid, args.position, resultHandler);
            }
        }

        public static class setPackageData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPackageData_args, Void> {
            public setPackageData() {
                super("setPackageData");
            }

            public setPackageData_args getEmptyArgsInstance() {
                return new setPackageData_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        setPackageData_result result = new setPackageData_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        setPackageData_result result = new setPackageData_result();
                        if (e instanceof PackageDoesNotExists) {
                            result.e = (PackageDoesNotExists) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, setPackageData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.setPackageData(args.pid, args.data, resultHandler);
            }
        }

        public static class deleteFinished<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFinished_args, List<Integer>> {
            public deleteFinished() {
                super("deleteFinished");
            }

            public deleteFinished_args getEmptyArgsInstance() {
                return new deleteFinished_args();
            }

            public AsyncMethodCallback<List<Integer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<Integer>>() {
                    public void onComplete(List<Integer> o) {
                        deleteFinished_result result = new deleteFinished_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        deleteFinished_result result = new deleteFinished_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, deleteFinished_args args, org.apache.thrift.async.AsyncMethodCallback<List<Integer>> resultHandler) throws TException {
                iface.deleteFinished(resultHandler);
            }
        }

        public static class restartFailed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restartFailed_args, Void> {
            public restartFailed() {
                super("restartFailed");
            }

            public restartFailed_args getEmptyArgsInstance() {
                return new restartFailed_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        restartFailed_result result = new restartFailed_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        restartFailed_result result = new restartFailed_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, restartFailed_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.restartFailed(resultHandler);
            }
        }

        public static class getEvents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEvents_args, List<EventInfo>> {
            public getEvents() {
                super("getEvents");
            }

            public getEvents_args getEmptyArgsInstance() {
                return new getEvents_args();
            }

            public AsyncMethodCallback<List<EventInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<EventInfo>>() {
                    public void onComplete(List<EventInfo> o) {
                        getEvents_result result = new getEvents_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getEvents_result result = new getEvents_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getEvents_args args, org.apache.thrift.async.AsyncMethodCallback<List<EventInfo>> resultHandler) throws TException {
                iface.getEvents(args.uuid, resultHandler);
            }
        }

        public static class getAccounts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAccounts_args, List<AccountInfo>> {
            public getAccounts() {
                super("getAccounts");
            }

            public getAccounts_args getEmptyArgsInstance() {
                return new getAccounts_args();
            }

            public AsyncMethodCallback<List<AccountInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<AccountInfo>>() {
                    public void onComplete(List<AccountInfo> o) {
                        getAccounts_result result = new getAccounts_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getAccounts_result result = new getAccounts_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getAccounts_args args, org.apache.thrift.async.AsyncMethodCallback<List<AccountInfo>> resultHandler) throws TException {
                iface.getAccounts(args.refresh, resultHandler);
            }
        }

        public static class getAccountTypes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAccountTypes_args, List<String>> {
            public getAccountTypes() {
                super("getAccountTypes");
            }

            public getAccountTypes_args getEmptyArgsInstance() {
                return new getAccountTypes_args();
            }

            public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<String>>() {
                    public void onComplete(List<String> o) {
                        getAccountTypes_result result = new getAccountTypes_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getAccountTypes_result result = new getAccountTypes_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getAccountTypes_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
                iface.getAccountTypes(resultHandler);
            }
        }

        public static class updateAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAccount_args, Void> {
            public updateAccount() {
                super("updateAccount");
            }

            public updateAccount_args getEmptyArgsInstance() {
                return new updateAccount_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        updateAccount_result result = new updateAccount_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        updateAccount_result result = new updateAccount_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, updateAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.updateAccount(args.plugin, args.account, args.password, args.options, resultHandler);
            }
        }

        public static class removeAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeAccount_args, Void> {
            public removeAccount() {
                super("removeAccount");
            }

            public removeAccount_args getEmptyArgsInstance() {
                return new removeAccount_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        removeAccount_result result = new removeAccount_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        removeAccount_result result = new removeAccount_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, removeAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.removeAccount(args.plugin, args.account, resultHandler);
            }
        }

        public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, Boolean> {
            public login() {
                super("login");
            }

            public login_args getEmptyArgsInstance() {
                return new login_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        login_result result = new login_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        login_result result = new login_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.login(args.username, args.password, resultHandler);
            }
        }

        public static class getUserData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserData_args, UserData> {
            public getUserData() {
                super("getUserData");
            }

            public getUserData_args getEmptyArgsInstance() {
                return new getUserData_args();
            }

            public AsyncMethodCallback<UserData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<UserData>() {
                    public void onComplete(UserData o) {
                        getUserData_result result = new getUserData_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getUserData_result result = new getUserData_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getUserData_args args, org.apache.thrift.async.AsyncMethodCallback<UserData> resultHandler) throws TException {
                iface.getUserData(args.username, args.password, resultHandler);
            }
        }

        public static class getAllUserData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllUserData_args, Map<String, UserData>> {
            public getAllUserData() {
                super("getAllUserData");
            }

            public getAllUserData_args getEmptyArgsInstance() {
                return new getAllUserData_args();
            }

            public AsyncMethodCallback<Map<String, UserData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<String, UserData>>() {
                    public void onComplete(Map<String, UserData> o) {
                        getAllUserData_result result = new getAllUserData_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getAllUserData_result result = new getAllUserData_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getAllUserData_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String, UserData>> resultHandler) throws TException {
                iface.getAllUserData(resultHandler);
            }
        }

        public static class getServices<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getServices_args, Map<String, Map<String, String>>> {
            public getServices() {
                super("getServices");
            }

            public getServices_args getEmptyArgsInstance() {
                return new getServices_args();
            }

            public AsyncMethodCallback<Map<String, Map<String, String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<String, Map<String, String>>>() {
                    public void onComplete(Map<String, Map<String, String>> o) {
                        getServices_result result = new getServices_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getServices_result result = new getServices_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getServices_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String, Map<String, String>>> resultHandler) throws TException {
                iface.getServices(resultHandler);
            }
        }

        public static class hasService<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hasService_args, Boolean> {
            public hasService() {
                super("hasService");
            }

            public hasService_args getEmptyArgsInstance() {
                return new hasService_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        hasService_result result = new hasService_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        hasService_result result = new hasService_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, hasService_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.hasService(args.plugin, args.func, resultHandler);
            }
        }

        public static class call<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, call_args, String> {
            public call() {
                super("call");
            }

            public call_args getEmptyArgsInstance() {
                return new call_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        call_result result = new call_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        call_result result = new call_result();
                        if (e instanceof ServiceDoesNotExists) {
                            result.ex = (ServiceDoesNotExists) e;
                            result.setExIsSet(true);
                            msg = result;
                        } else if (e instanceof ServiceException) {
                            result.e = (ServiceException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, call_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.call(args.info, resultHandler);
            }
        }

        public static class getAllInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllInfo_args, Map<String, Map<String, String>>> {
            public getAllInfo() {
                super("getAllInfo");
            }

            public getAllInfo_args getEmptyArgsInstance() {
                return new getAllInfo_args();
            }

            public AsyncMethodCallback<Map<String, Map<String, String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<String, Map<String, String>>>() {
                    public void onComplete(Map<String, Map<String, String>> o) {
                        getAllInfo_result result = new getAllInfo_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getAllInfo_result result = new getAllInfo_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getAllInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String, Map<String, String>>> resultHandler) throws TException {
                iface.getAllInfo(resultHandler);
            }
        }

        public static class getInfoByPlugin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInfoByPlugin_args, Map<String, String>> {
            public getInfoByPlugin() {
                super("getInfoByPlugin");
            }

            public getInfoByPlugin_args getEmptyArgsInstance() {
                return new getInfoByPlugin_args();
            }

            public AsyncMethodCallback<Map<String, String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Map<String, String>>() {
                    public void onComplete(Map<String, String> o) {
                        getInfoByPlugin_result result = new getInfoByPlugin_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getInfoByPlugin_result result = new getInfoByPlugin_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getInfoByPlugin_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String, String>> resultHandler) throws TException {
                iface.getInfoByPlugin(args.plugin, resultHandler);
            }
        }

        public static class isCaptchaWaiting<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isCaptchaWaiting_args, Boolean> {
            public isCaptchaWaiting() {
                super("isCaptchaWaiting");
            }

            public isCaptchaWaiting_args getEmptyArgsInstance() {
                return new isCaptchaWaiting_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        isCaptchaWaiting_result result = new isCaptchaWaiting_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        isCaptchaWaiting_result result = new isCaptchaWaiting_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, isCaptchaWaiting_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.isCaptchaWaiting(resultHandler);
            }
        }

        public static class getCaptchaTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCaptchaTask_args, CaptchaTask> {
            public getCaptchaTask() {
                super("getCaptchaTask");
            }

            public getCaptchaTask_args getEmptyArgsInstance() {
                return new getCaptchaTask_args();
            }

            public AsyncMethodCallback<CaptchaTask> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<CaptchaTask>() {
                    public void onComplete(CaptchaTask o) {
                        getCaptchaTask_result result = new getCaptchaTask_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getCaptchaTask_result result = new getCaptchaTask_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCaptchaTask_args args, org.apache.thrift.async.AsyncMethodCallback<CaptchaTask> resultHandler) throws TException {
                iface.getCaptchaTask(args.exclusive, resultHandler);
            }
        }

        public static class getCaptchaTaskStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCaptchaTaskStatus_args, String> {
            public getCaptchaTaskStatus() {
                super("getCaptchaTaskStatus");
            }

            public getCaptchaTaskStatus_args getEmptyArgsInstance() {
                return new getCaptchaTaskStatus_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        getCaptchaTaskStatus_result result = new getCaptchaTaskStatus_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getCaptchaTaskStatus_result result = new getCaptchaTaskStatus_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getCaptchaTaskStatus_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.getCaptchaTaskStatus(args.tid, resultHandler);
            }
        }

        public static class setCaptchaResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setCaptchaResult_args, Void> {
            public setCaptchaResult() {
                super("setCaptchaResult");
            }

            public setCaptchaResult_args getEmptyArgsInstance() {
                return new setCaptchaResult_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        setCaptchaResult_result result = new setCaptchaResult_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        setCaptchaResult_result result = new setCaptchaResult_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, setCaptchaResult_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.setCaptchaResult(args.tid, args.result, resultHandler);
            }
        }

    }

    public static class getConfigValue_args implements org.apache.thrift.TBase<getConfigValue_args, getConfigValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigValue_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigValue_args");

        private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField SECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("section", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getConfigValue_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getConfigValue_argsTupleSchemeFactory());
        }

        public String category; // required
        public String option; // required
        public String section; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(category);
            out.writeString(option);
            out.writeString(section);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getConfigValue_args(android.os.Parcel in) {
            this.category = in.readString();
            this.option = in.readString();
            this.section = in.readString();
        }

        public static final android.os.Parcelable.Creator<getConfigValue_args> CREATOR = new android.os.Parcelable.Creator<getConfigValue_args>() {
            @Override
            public getConfigValue_args[] newArray(int size) {
                return new getConfigValue_args[size];
            }

            @Override
            public getConfigValue_args createFromParcel(android.os.Parcel in) {
                return new getConfigValue_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CATEGORY((short) 1, "category"),
            OPTION((short) 2, "option"),
            SECTION((short) 3, "section");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CATEGORY
                        return CATEGORY;
                    case 2: // OPTION
                        return OPTION;
                    case 3: // SECTION
                        return SECTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SECTION, new org.apache.thrift.meta_data.FieldMetaData("section", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigValue_args.class, metaDataMap);
        }

        public getConfigValue_args() {
        }

        public getConfigValue_args(
                String category,
                String option,
                String section) {
            this();
            this.category = category;
            this.option = option;
            this.section = section;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getConfigValue_args(getConfigValue_args other) {
            if (other.isSetCategory()) {
                this.category = other.category;
            }
            if (other.isSetOption()) {
                this.option = other.option;
            }
            if (other.isSetSection()) {
                this.section = other.section;
            }
        }

        public getConfigValue_args deepCopy() {
            return new getConfigValue_args(this);
        }

        @Override
        public void clear() {
            this.category = null;
            this.option = null;
            this.section = null;
        }

        public String getCategory() {
            return this.category;
        }

        public getConfigValue_args setCategory(String category) {
            this.category = category;
            return this;
        }

        public void unsetCategory() {
            this.category = null;
        }

        /** Returns true if field category is set (has been assigned a value) and false otherwise */
        public boolean isSetCategory() {
            return this.category != null;
        }

        public void setCategoryIsSet(boolean value) {
            if (!value) {
                this.category = null;
            }
        }

        public String getOption() {
            return this.option;
        }

        public getConfigValue_args setOption(String option) {
            this.option = option;
            return this;
        }

        public void unsetOption() {
            this.option = null;
        }

        /** Returns true if field option is set (has been assigned a value) and false otherwise */
        public boolean isSetOption() {
            return this.option != null;
        }

        public void setOptionIsSet(boolean value) {
            if (!value) {
                this.option = null;
            }
        }

        public String getSection() {
            return this.section;
        }

        public getConfigValue_args setSection(String section) {
            this.section = section;
            return this;
        }

        public void unsetSection() {
            this.section = null;
        }

        /** Returns true if field section is set (has been assigned a value) and false otherwise */
        public boolean isSetSection() {
            return this.section != null;
        }

        public void setSectionIsSet(boolean value) {
            if (!value) {
                this.section = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CATEGORY:
                    if (value == null) {
                        unsetCategory();
                    } else {
                        setCategory((String) value);
                    }
                    break;

                case OPTION:
                    if (value == null) {
                        unsetOption();
                    } else {
                        setOption((String) value);
                    }
                    break;

                case SECTION:
                    if (value == null) {
                        unsetSection();
                    } else {
                        setSection((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CATEGORY:
                    return getCategory();

                case OPTION:
                    return getOption();

                case SECTION:
                    return getSection();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CATEGORY:
                    return isSetCategory();
                case OPTION:
                    return isSetOption();
                case SECTION:
                    return isSetSection();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getConfigValue_args)
                return this.equals((getConfigValue_args) that);
            return false;
        }

        public boolean equals(getConfigValue_args that) {
            if (that == null)
                return false;

            boolean this_present_category = true && this.isSetCategory();
            boolean that_present_category = true && that.isSetCategory();
            if (this_present_category || that_present_category) {
                if (!(this_present_category && that_present_category))
                    return false;
                if (!this.category.equals(that.category))
                    return false;
            }

            boolean this_present_option = true && this.isSetOption();
            boolean that_present_option = true && that.isSetOption();
            if (this_present_option || that_present_option) {
                if (!(this_present_option && that_present_option))
                    return false;
                if (!this.option.equals(that.option))
                    return false;
            }

            boolean this_present_section = true && this.isSetSection();
            boolean that_present_section = true && that.isSetSection();
            if (this_present_section || that_present_section) {
                if (!(this_present_section && that_present_section))
                    return false;
                if (!this.section.equals(that.section))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_category = true && (isSetCategory());
            list.add(present_category);
            if (present_category)
                list.add(category);

            boolean present_option = true && (isSetOption());
            list.add(present_option);
            if (present_option)
                list.add(option);

            boolean present_section = true && (isSetSection());
            list.add(present_section);
            if (present_section)
                list.add(section);

            return list.hashCode();
        }

        @Override
        public int compareTo(getConfigValue_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCategory()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOption()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSection()).compareTo(other.isSetSection());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSection()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.section, other.section);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getConfigValue_args(");
            boolean first = true;

            sb.append("category:");
            if (this.category == null) {
                sb.append("null");
            } else {
                sb.append(this.category);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("option:");
            if (this.option == null) {
                sb.append("null");
            } else {
                sb.append(this.option);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("section:");
            if (this.section == null) {
                sb.append("null");
            } else {
                sb.append(this.section);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getConfigValue_argsStandardSchemeFactory implements SchemeFactory {
            public getConfigValue_argsStandardScheme getScheme() {
                return new getConfigValue_argsStandardScheme();
            }
        }

        private static class getConfigValue_argsStandardScheme extends StandardScheme<getConfigValue_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigValue_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CATEGORY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.category = iprot.readString();
                                struct.setCategoryIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // OPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.option = iprot.readString();
                                struct.setOptionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // SECTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.section = iprot.readString();
                                struct.setSectionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigValue_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.category != null) {
                    oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
                    oprot.writeString(struct.category);
                    oprot.writeFieldEnd();
                }
                if (struct.option != null) {
                    oprot.writeFieldBegin(OPTION_FIELD_DESC);
                    oprot.writeString(struct.option);
                    oprot.writeFieldEnd();
                }
                if (struct.section != null) {
                    oprot.writeFieldBegin(SECTION_FIELD_DESC);
                    oprot.writeString(struct.section);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getConfigValue_argsTupleSchemeFactory implements SchemeFactory {
            public getConfigValue_argsTupleScheme getScheme() {
                return new getConfigValue_argsTupleScheme();
            }
        }

        private static class getConfigValue_argsTupleScheme extends TupleScheme<getConfigValue_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getConfigValue_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCategory()) {
                    optionals.set(0);
                }
                if (struct.isSetOption()) {
                    optionals.set(1);
                }
                if (struct.isSetSection()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetCategory()) {
                    oprot.writeString(struct.category);
                }
                if (struct.isSetOption()) {
                    oprot.writeString(struct.option);
                }
                if (struct.isSetSection()) {
                    oprot.writeString(struct.section);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getConfigValue_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.category = iprot.readString();
                    struct.setCategoryIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.option = iprot.readString();
                    struct.setOptionIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.section = iprot.readString();
                    struct.setSectionIsSet(true);
                }
            }
        }

    }

    public static class getConfigValue_result implements org.apache.thrift.TBase<getConfigValue_result, getConfigValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConfigValue_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfigValue_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getConfigValue_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getConfigValue_resultTupleSchemeFactory());
        }

        public String success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getConfigValue_result(android.os.Parcel in) {
            this.success = in.readString();
        }

        public static final android.os.Parcelable.Creator<getConfigValue_result> CREATOR = new android.os.Parcelable.Creator<getConfigValue_result>() {
            @Override
            public getConfigValue_result[] newArray(int size) {
                return new getConfigValue_result[size];
            }

            @Override
            public getConfigValue_result createFromParcel(android.os.Parcel in) {
                return new getConfigValue_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfigValue_result.class, metaDataMap);
        }

        public getConfigValue_result() {
        }

        public getConfigValue_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getConfigValue_result(getConfigValue_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public getConfigValue_result deepCopy() {
            return new getConfigValue_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public getConfigValue_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getConfigValue_result)
                return this.equals((getConfigValue_result) that);
            return false;
        }

        public boolean equals(getConfigValue_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getConfigValue_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getConfigValue_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getConfigValue_resultStandardSchemeFactory implements SchemeFactory {
            public getConfigValue_resultStandardScheme getScheme() {
                return new getConfigValue_resultStandardScheme();
            }
        }

        private static class getConfigValue_resultStandardScheme extends StandardScheme<getConfigValue_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getConfigValue_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getConfigValue_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getConfigValue_resultTupleSchemeFactory implements SchemeFactory {
            public getConfigValue_resultTupleScheme getScheme() {
                return new getConfigValue_resultTupleScheme();
            }
        }

        private static class getConfigValue_resultTupleScheme extends TupleScheme<getConfigValue_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getConfigValue_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getConfigValue_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class setConfigValue_args implements org.apache.thrift.TBase<setConfigValue_args, setConfigValue_args._Fields>, java.io.Serializable, Cloneable, Comparable<setConfigValue_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setConfigValue_args");

        private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField SECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("section", org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new setConfigValue_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new setConfigValue_argsTupleSchemeFactory());
        }

        public String category; // required
        public String option; // required
        public String value; // required
        public String section; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(category);
            out.writeString(option);
            out.writeString(value);
            out.writeString(section);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public setConfigValue_args(android.os.Parcel in) {
            this.category = in.readString();
            this.option = in.readString();
            this.value = in.readString();
            this.section = in.readString();
        }

        public static final android.os.Parcelable.Creator<setConfigValue_args> CREATOR = new android.os.Parcelable.Creator<setConfigValue_args>() {
            @Override
            public setConfigValue_args[] newArray(int size) {
                return new setConfigValue_args[size];
            }

            @Override
            public setConfigValue_args createFromParcel(android.os.Parcel in) {
                return new setConfigValue_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CATEGORY((short) 1, "category"),
            OPTION((short) 2, "option"),
            VALUE((short) 3, "value"),
            SECTION((short) 4, "section");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CATEGORY
                        return CATEGORY;
                    case 2: // OPTION
                        return OPTION;
                    case 3: // VALUE
                        return VALUE;
                    case 4: // SECTION
                        return SECTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SECTION, new org.apache.thrift.meta_data.FieldMetaData("section", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setConfigValue_args.class, metaDataMap);
        }

        public setConfigValue_args() {
        }

        public setConfigValue_args(
                String category,
                String option,
                String value,
                String section) {
            this();
            this.category = category;
            this.option = option;
            this.value = value;
            this.section = section;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setConfigValue_args(setConfigValue_args other) {
            if (other.isSetCategory()) {
                this.category = other.category;
            }
            if (other.isSetOption()) {
                this.option = other.option;
            }
            if (other.isSetValue()) {
                this.value = other.value;
            }
            if (other.isSetSection()) {
                this.section = other.section;
            }
        }

        public setConfigValue_args deepCopy() {
            return new setConfigValue_args(this);
        }

        @Override
        public void clear() {
            this.category = null;
            this.option = null;
            this.value = null;
            this.section = null;
        }

        public String getCategory() {
            return this.category;
        }

        public setConfigValue_args setCategory(String category) {
            this.category = category;
            return this;
        }

        public void unsetCategory() {
            this.category = null;
        }

        /** Returns true if field category is set (has been assigned a value) and false otherwise */
        public boolean isSetCategory() {
            return this.category != null;
        }

        public void setCategoryIsSet(boolean value) {
            if (!value) {
                this.category = null;
            }
        }

        public String getOption() {
            return this.option;
        }

        public setConfigValue_args setOption(String option) {
            this.option = option;
            return this;
        }

        public void unsetOption() {
            this.option = null;
        }

        /** Returns true if field option is set (has been assigned a value) and false otherwise */
        public boolean isSetOption() {
            return this.option != null;
        }

        public void setOptionIsSet(boolean value) {
            if (!value) {
                this.option = null;
            }
        }

        public String getValue() {
            return this.value;
        }

        public setConfigValue_args setValue(String value) {
            this.value = value;
            return this;
        }

        public void unsetValue() {
            this.value = null;
        }

        /** Returns true if field value is set (has been assigned a value) and false otherwise */
        public boolean isSetValue() {
            return this.value != null;
        }

        public void setValueIsSet(boolean value) {
            if (!value) {
                this.value = null;
            }
        }

        public String getSection() {
            return this.section;
        }

        public setConfigValue_args setSection(String section) {
            this.section = section;
            return this;
        }

        public void unsetSection() {
            this.section = null;
        }

        /** Returns true if field section is set (has been assigned a value) and false otherwise */
        public boolean isSetSection() {
            return this.section != null;
        }

        public void setSectionIsSet(boolean value) {
            if (!value) {
                this.section = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CATEGORY:
                    if (value == null) {
                        unsetCategory();
                    } else {
                        setCategory((String) value);
                    }
                    break;

                case OPTION:
                    if (value == null) {
                        unsetOption();
                    } else {
                        setOption((String) value);
                    }
                    break;

                case VALUE:
                    if (value == null) {
                        unsetValue();
                    } else {
                        setValue((String) value);
                    }
                    break;

                case SECTION:
                    if (value == null) {
                        unsetSection();
                    } else {
                        setSection((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CATEGORY:
                    return getCategory();

                case OPTION:
                    return getOption();

                case VALUE:
                    return getValue();

                case SECTION:
                    return getSection();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CATEGORY:
                    return isSetCategory();
                case OPTION:
                    return isSetOption();
                case VALUE:
                    return isSetValue();
                case SECTION:
                    return isSetSection();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof setConfigValue_args)
                return this.equals((setConfigValue_args) that);
            return false;
        }

        public boolean equals(setConfigValue_args that) {
            if (that == null)
                return false;

            boolean this_present_category = true && this.isSetCategory();
            boolean that_present_category = true && that.isSetCategory();
            if (this_present_category || that_present_category) {
                if (!(this_present_category && that_present_category))
                    return false;
                if (!this.category.equals(that.category))
                    return false;
            }

            boolean this_present_option = true && this.isSetOption();
            boolean that_present_option = true && that.isSetOption();
            if (this_present_option || that_present_option) {
                if (!(this_present_option && that_present_option))
                    return false;
                if (!this.option.equals(that.option))
                    return false;
            }

            boolean this_present_value = true && this.isSetValue();
            boolean that_present_value = true && that.isSetValue();
            if (this_present_value || that_present_value) {
                if (!(this_present_value && that_present_value))
                    return false;
                if (!this.value.equals(that.value))
                    return false;
            }

            boolean this_present_section = true && this.isSetSection();
            boolean that_present_section = true && that.isSetSection();
            if (this_present_section || that_present_section) {
                if (!(this_present_section && that_present_section))
                    return false;
                if (!this.section.equals(that.section))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_category = true && (isSetCategory());
            list.add(present_category);
            if (present_category)
                list.add(category);

            boolean present_option = true && (isSetOption());
            list.add(present_option);
            if (present_option)
                list.add(option);

            boolean present_value = true && (isSetValue());
            list.add(present_value);
            if (present_value)
                list.add(value);

            boolean present_section = true && (isSetSection());
            list.add(present_section);
            if (present_section)
                list.add(section);

            return list.hashCode();
        }

        @Override
        public int compareTo(setConfigValue_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCategory()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOption()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetValue()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSection()).compareTo(other.isSetSection());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSection()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.section, other.section);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("setConfigValue_args(");
            boolean first = true;

            sb.append("category:");
            if (this.category == null) {
                sb.append("null");
            } else {
                sb.append(this.category);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("option:");
            if (this.option == null) {
                sb.append("null");
            } else {
                sb.append(this.option);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("value:");
            if (this.value == null) {
                sb.append("null");
            } else {
                sb.append(this.value);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("section:");
            if (this.section == null) {
                sb.append("null");
            } else {
                sb.append(this.section);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setConfigValue_argsStandardSchemeFactory implements SchemeFactory {
            public setConfigValue_argsStandardScheme getScheme() {
                return new setConfigValue_argsStandardScheme();
            }
        }

        private static class setConfigValue_argsStandardScheme extends StandardScheme<setConfigValue_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setConfigValue_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CATEGORY
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.category = iprot.readString();
                                struct.setCategoryIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // OPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.option = iprot.readString();
                                struct.setOptionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // VALUE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.value = iprot.readString();
                                struct.setValueIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // SECTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.section = iprot.readString();
                                struct.setSectionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setConfigValue_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.category != null) {
                    oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
                    oprot.writeString(struct.category);
                    oprot.writeFieldEnd();
                }
                if (struct.option != null) {
                    oprot.writeFieldBegin(OPTION_FIELD_DESC);
                    oprot.writeString(struct.option);
                    oprot.writeFieldEnd();
                }
                if (struct.value != null) {
                    oprot.writeFieldBegin(VALUE_FIELD_DESC);
                    oprot.writeString(struct.value);
                    oprot.writeFieldEnd();
                }
                if (struct.section != null) {
                    oprot.writeFieldBegin(SECTION_FIELD_DESC);
                    oprot.writeString(struct.section);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setConfigValue_argsTupleSchemeFactory implements SchemeFactory {
            public setConfigValue_argsTupleScheme getScheme() {
                return new setConfigValue_argsTupleScheme();
            }
        }

        private static class setConfigValue_argsTupleScheme extends TupleScheme<setConfigValue_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setConfigValue_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCategory()) {
                    optionals.set(0);
                }
                if (struct.isSetOption()) {
                    optionals.set(1);
                }
                if (struct.isSetValue()) {
                    optionals.set(2);
                }
                if (struct.isSetSection()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetCategory()) {
                    oprot.writeString(struct.category);
                }
                if (struct.isSetOption()) {
                    oprot.writeString(struct.option);
                }
                if (struct.isSetValue()) {
                    oprot.writeString(struct.value);
                }
                if (struct.isSetSection()) {
                    oprot.writeString(struct.section);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setConfigValue_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.category = iprot.readString();
                    struct.setCategoryIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.option = iprot.readString();
                    struct.setOptionIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.value = iprot.readString();
                    struct.setValueIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.section = iprot.readString();
                    struct.setSectionIsSet(true);
                }
            }
        }

    }

    public static class setConfigValue_result implements org.apache.thrift.TBase<setConfigValue_result, setConfigValue_result._Fields>, java.io.Serializable, Cloneable, Comparable<setConfigValue_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setConfigValue_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new setConfigValue_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new setConfigValue_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public setConfigValue_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<setConfigValue_result> CREATOR = new android.os.Parcelable.Creator<setConfigValue_result>() {
            @Override
            public setConfigValue_result[] newArray(int size) {
                return new setConfigValue_result[size];
            }

            @Override
            public setConfigValue_result createFromParcel(android.os.Parcel in) {
                return new setConfigValue_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setConfigValue_result.class, metaDataMap);
        }

        public setConfigValue_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setConfigValue_result(setConfigValue_result other) {
        }

        public setConfigValue_result deepCopy() {
            return new setConfigValue_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof setConfigValue_result)
                return this.equals((setConfigValue_result) that);
            return false;
        }

        public boolean equals(setConfigValue_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(setConfigValue_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("setConfigValue_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setConfigValue_resultStandardSchemeFactory implements SchemeFactory {
            public setConfigValue_resultStandardScheme getScheme() {
                return new setConfigValue_resultStandardScheme();
            }
        }

        private static class setConfigValue_resultStandardScheme extends StandardScheme<setConfigValue_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setConfigValue_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setConfigValue_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setConfigValue_resultTupleSchemeFactory implements SchemeFactory {
            public setConfigValue_resultTupleScheme getScheme() {
                return new setConfigValue_resultTupleScheme();
            }
        }

        private static class setConfigValue_resultTupleScheme extends TupleScheme<setConfigValue_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setConfigValue_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setConfigValue_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getConfig_args implements org.apache.thrift.TBase<getConfig_args, getConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<getConfig_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfig_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getConfig_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getConfig_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getConfig_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<getConfig_args> CREATOR = new android.os.Parcelable.Creator<getConfig_args>() {
            @Override
            public getConfig_args[] newArray(int size) {
                return new getConfig_args[size];
            }

            @Override
            public getConfig_args createFromParcel(android.os.Parcel in) {
                return new getConfig_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfig_args.class, metaDataMap);
        }

        public getConfig_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getConfig_args(getConfig_args other) {
        }

        public getConfig_args deepCopy() {
            return new getConfig_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getConfig_args)
                return this.equals((getConfig_args) that);
            return false;
        }

        public boolean equals(getConfig_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getConfig_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getConfig_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getConfig_argsStandardSchemeFactory implements SchemeFactory {
            public getConfig_argsStandardScheme getScheme() {
                return new getConfig_argsStandardScheme();
            }
        }

        private static class getConfig_argsStandardScheme extends StandardScheme<getConfig_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getConfig_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getConfig_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getConfig_argsTupleSchemeFactory implements SchemeFactory {
            public getConfig_argsTupleScheme getScheme() {
                return new getConfig_argsTupleScheme();
            }
        }

        private static class getConfig_argsTupleScheme extends TupleScheme<getConfig_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getConfig_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getConfig_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getConfig_result implements org.apache.thrift.TBase<getConfig_result, getConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<getConfig_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getConfig_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getConfig_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getConfig_resultTupleSchemeFactory());
        }

        public Map<String, ConfigSection> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeMap(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getConfig_result(android.os.Parcel in) {
            this.success = new HashMap<String, ConfigSection>();
            in.readMap(this.success, getConfig_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getConfig_result> CREATOR = new android.os.Parcelable.Creator<getConfig_result>() {
            @Override
            public getConfig_result[] newArray(int size) {
                return new getConfig_result[size];
            }

            @Override
            public getConfig_result createFromParcel(android.os.Parcel in) {
                return new getConfig_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigSection.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getConfig_result.class, metaDataMap);
        }

        public getConfig_result() {
        }

        public getConfig_result(
                Map<String, ConfigSection> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getConfig_result(getConfig_result other) {
            if (other.isSetSuccess()) {
                Map<String, ConfigSection> __this__success = new HashMap<String, ConfigSection>(other.success.size());
                for (Map.Entry<String, ConfigSection> other_element : other.success.entrySet()) {

                    String other_element_key = other_element.getKey();
                    ConfigSection other_element_value = other_element.getValue();

                    String __this__success_copy_key = other_element_key;

                    ConfigSection __this__success_copy_value = new ConfigSection(other_element_value);

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public getConfig_result deepCopy() {
            return new getConfig_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(String key, ConfigSection val) {
            if (this.success == null) {
                this.success = new HashMap<String, ConfigSection>();
            }
            this.success.put(key, val);
        }

        public Map<String, ConfigSection> getSuccess() {
            return this.success;
        }

        public getConfig_result setSuccess(Map<String, ConfigSection> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<String, ConfigSection>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getConfig_result)
                return this.equals((getConfig_result) that);
            return false;
        }

        public boolean equals(getConfig_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getConfig_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getConfig_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getConfig_resultStandardSchemeFactory implements SchemeFactory {
            public getConfig_resultStandardScheme getScheme() {
                return new getConfig_resultStandardScheme();
            }
        }

        private static class getConfig_resultStandardScheme extends StandardScheme<getConfig_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getConfig_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                                    struct.success = new HashMap<String, ConfigSection>(2 * _map84.size);
                                    String _key85;
                                    ConfigSection _val86;
                                    for (int _i87 = 0; _i87 < _map84.size; ++_i87) {
                                        _key85 = iprot.readString();
                                        _val86 = new ConfigSection();
                                        _val86.read(iprot);
                                        struct.success.put(_key85, _val86);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getConfig_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (Map.Entry<String, ConfigSection> _iter88 : struct.success.entrySet()) {
                            oprot.writeString(_iter88.getKey());
                            _iter88.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getConfig_resultTupleSchemeFactory implements SchemeFactory {
            public getConfig_resultTupleScheme getScheme() {
                return new getConfig_resultTupleScheme();
            }
        }

        private static class getConfig_resultTupleScheme extends TupleScheme<getConfig_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getConfig_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<String, ConfigSection> _iter89 : struct.success.entrySet()) {
                            oprot.writeString(_iter89.getKey());
                            _iter89.getValue().write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getConfig_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map90 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new HashMap<String, ConfigSection>(2 * _map90.size);
                        String _key91;
                        ConfigSection _val92;
                        for (int _i93 = 0; _i93 < _map90.size; ++_i93) {
                            _key91 = iprot.readString();
                            _val92 = new ConfigSection();
                            _val92.read(iprot);
                            struct.success.put(_key91, _val92);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getPluginConfig_args implements org.apache.thrift.TBase<getPluginConfig_args, getPluginConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPluginConfig_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPluginConfig_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getPluginConfig_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPluginConfig_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getPluginConfig_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<getPluginConfig_args> CREATOR = new android.os.Parcelable.Creator<getPluginConfig_args>() {
            @Override
            public getPluginConfig_args[] newArray(int size) {
                return new getPluginConfig_args[size];
            }

            @Override
            public getPluginConfig_args createFromParcel(android.os.Parcel in) {
                return new getPluginConfig_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPluginConfig_args.class, metaDataMap);
        }

        public getPluginConfig_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPluginConfig_args(getPluginConfig_args other) {
        }

        public getPluginConfig_args deepCopy() {
            return new getPluginConfig_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPluginConfig_args)
                return this.equals((getPluginConfig_args) that);
            return false;
        }

        public boolean equals(getPluginConfig_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getPluginConfig_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPluginConfig_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPluginConfig_argsStandardSchemeFactory implements SchemeFactory {
            public getPluginConfig_argsStandardScheme getScheme() {
                return new getPluginConfig_argsStandardScheme();
            }
        }

        private static class getPluginConfig_argsStandardScheme extends StandardScheme<getPluginConfig_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPluginConfig_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPluginConfig_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPluginConfig_argsTupleSchemeFactory implements SchemeFactory {
            public getPluginConfig_argsTupleScheme getScheme() {
                return new getPluginConfig_argsTupleScheme();
            }
        }

        private static class getPluginConfig_argsTupleScheme extends TupleScheme<getPluginConfig_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPluginConfig_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPluginConfig_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getPluginConfig_result implements org.apache.thrift.TBase<getPluginConfig_result, getPluginConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPluginConfig_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPluginConfig_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getPluginConfig_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPluginConfig_resultTupleSchemeFactory());
        }

        public Map<String, ConfigSection> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeMap(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getPluginConfig_result(android.os.Parcel in) {
            this.success = new HashMap<String, ConfigSection>();
            in.readMap(this.success, getPluginConfig_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getPluginConfig_result> CREATOR = new android.os.Parcelable.Creator<getPluginConfig_result>() {
            @Override
            public getPluginConfig_result[] newArray(int size) {
                return new getPluginConfig_result[size];
            }

            @Override
            public getPluginConfig_result createFromParcel(android.os.Parcel in) {
                return new getPluginConfig_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConfigSection.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPluginConfig_result.class, metaDataMap);
        }

        public getPluginConfig_result() {
        }

        public getPluginConfig_result(
                Map<String, ConfigSection> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPluginConfig_result(getPluginConfig_result other) {
            if (other.isSetSuccess()) {
                Map<String, ConfigSection> __this__success = new HashMap<String, ConfigSection>(other.success.size());
                for (Map.Entry<String, ConfigSection> other_element : other.success.entrySet()) {

                    String other_element_key = other_element.getKey();
                    ConfigSection other_element_value = other_element.getValue();

                    String __this__success_copy_key = other_element_key;

                    ConfigSection __this__success_copy_value = new ConfigSection(other_element_value);

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public getPluginConfig_result deepCopy() {
            return new getPluginConfig_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(String key, ConfigSection val) {
            if (this.success == null) {
                this.success = new HashMap<String, ConfigSection>();
            }
            this.success.put(key, val);
        }

        public Map<String, ConfigSection> getSuccess() {
            return this.success;
        }

        public getPluginConfig_result setSuccess(Map<String, ConfigSection> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<String, ConfigSection>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPluginConfig_result)
                return this.equals((getPluginConfig_result) that);
            return false;
        }

        public boolean equals(getPluginConfig_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPluginConfig_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPluginConfig_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPluginConfig_resultStandardSchemeFactory implements SchemeFactory {
            public getPluginConfig_resultStandardScheme getScheme() {
                return new getPluginConfig_resultStandardScheme();
            }
        }

        private static class getPluginConfig_resultStandardScheme extends StandardScheme<getPluginConfig_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPluginConfig_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map94 = iprot.readMapBegin();
                                    struct.success = new HashMap<String, ConfigSection>(2 * _map94.size);
                                    String _key95;
                                    ConfigSection _val96;
                                    for (int _i97 = 0; _i97 < _map94.size; ++_i97) {
                                        _key95 = iprot.readString();
                                        _val96 = new ConfigSection();
                                        _val96.read(iprot);
                                        struct.success.put(_key95, _val96);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPluginConfig_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (Map.Entry<String, ConfigSection> _iter98 : struct.success.entrySet()) {
                            oprot.writeString(_iter98.getKey());
                            _iter98.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPluginConfig_resultTupleSchemeFactory implements SchemeFactory {
            public getPluginConfig_resultTupleScheme getScheme() {
                return new getPluginConfig_resultTupleScheme();
            }
        }

        private static class getPluginConfig_resultTupleScheme extends TupleScheme<getPluginConfig_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPluginConfig_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<String, ConfigSection> _iter99 : struct.success.entrySet()) {
                            oprot.writeString(_iter99.getKey());
                            _iter99.getValue().write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPluginConfig_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new HashMap<String, ConfigSection>(2 * _map100.size);
                        String _key101;
                        ConfigSection _val102;
                        for (int _i103 = 0; _i103 < _map100.size; ++_i103) {
                            _key101 = iprot.readString();
                            _val102 = new ConfigSection();
                            _val102.read(iprot);
                            struct.success.put(_key101, _val102);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class pauseServer_args implements org.apache.thrift.TBase<pauseServer_args, pauseServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<pauseServer_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pauseServer_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new pauseServer_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new pauseServer_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public pauseServer_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<pauseServer_args> CREATOR = new android.os.Parcelable.Creator<pauseServer_args>() {
            @Override
            public pauseServer_args[] newArray(int size) {
                return new pauseServer_args[size];
            }

            @Override
            public pauseServer_args createFromParcel(android.os.Parcel in) {
                return new pauseServer_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pauseServer_args.class, metaDataMap);
        }

        public pauseServer_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pauseServer_args(pauseServer_args other) {
        }

        public pauseServer_args deepCopy() {
            return new pauseServer_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof pauseServer_args)
                return this.equals((pauseServer_args) that);
            return false;
        }

        public boolean equals(pauseServer_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(pauseServer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("pauseServer_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class pauseServer_argsStandardSchemeFactory implements SchemeFactory {
            public pauseServer_argsStandardScheme getScheme() {
                return new pauseServer_argsStandardScheme();
            }
        }

        private static class pauseServer_argsStandardScheme extends StandardScheme<pauseServer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, pauseServer_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, pauseServer_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class pauseServer_argsTupleSchemeFactory implements SchemeFactory {
            public pauseServer_argsTupleScheme getScheme() {
                return new pauseServer_argsTupleScheme();
            }
        }

        private static class pauseServer_argsTupleScheme extends TupleScheme<pauseServer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, pauseServer_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, pauseServer_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class pauseServer_result implements org.apache.thrift.TBase<pauseServer_result, pauseServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<pauseServer_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pauseServer_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new pauseServer_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new pauseServer_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public pauseServer_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<pauseServer_result> CREATOR = new android.os.Parcelable.Creator<pauseServer_result>() {
            @Override
            public pauseServer_result[] newArray(int size) {
                return new pauseServer_result[size];
            }

            @Override
            public pauseServer_result createFromParcel(android.os.Parcel in) {
                return new pauseServer_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pauseServer_result.class, metaDataMap);
        }

        public pauseServer_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pauseServer_result(pauseServer_result other) {
        }

        public pauseServer_result deepCopy() {
            return new pauseServer_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof pauseServer_result)
                return this.equals((pauseServer_result) that);
            return false;
        }

        public boolean equals(pauseServer_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(pauseServer_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("pauseServer_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class pauseServer_resultStandardSchemeFactory implements SchemeFactory {
            public pauseServer_resultStandardScheme getScheme() {
                return new pauseServer_resultStandardScheme();
            }
        }

        private static class pauseServer_resultStandardScheme extends StandardScheme<pauseServer_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, pauseServer_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, pauseServer_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class pauseServer_resultTupleSchemeFactory implements SchemeFactory {
            public pauseServer_resultTupleScheme getScheme() {
                return new pauseServer_resultTupleScheme();
            }
        }

        private static class pauseServer_resultTupleScheme extends TupleScheme<pauseServer_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, pauseServer_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, pauseServer_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class unpauseServer_args implements org.apache.thrift.TBase<unpauseServer_args, unpauseServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<unpauseServer_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unpauseServer_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new unpauseServer_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new unpauseServer_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public unpauseServer_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<unpauseServer_args> CREATOR = new android.os.Parcelable.Creator<unpauseServer_args>() {
            @Override
            public unpauseServer_args[] newArray(int size) {
                return new unpauseServer_args[size];
            }

            @Override
            public unpauseServer_args createFromParcel(android.os.Parcel in) {
                return new unpauseServer_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unpauseServer_args.class, metaDataMap);
        }

        public unpauseServer_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public unpauseServer_args(unpauseServer_args other) {
        }

        public unpauseServer_args deepCopy() {
            return new unpauseServer_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof unpauseServer_args)
                return this.equals((unpauseServer_args) that);
            return false;
        }

        public boolean equals(unpauseServer_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(unpauseServer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("unpauseServer_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class unpauseServer_argsStandardSchemeFactory implements SchemeFactory {
            public unpauseServer_argsStandardScheme getScheme() {
                return new unpauseServer_argsStandardScheme();
            }
        }

        private static class unpauseServer_argsStandardScheme extends StandardScheme<unpauseServer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, unpauseServer_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, unpauseServer_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class unpauseServer_argsTupleSchemeFactory implements SchemeFactory {
            public unpauseServer_argsTupleScheme getScheme() {
                return new unpauseServer_argsTupleScheme();
            }
        }

        private static class unpauseServer_argsTupleScheme extends TupleScheme<unpauseServer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, unpauseServer_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, unpauseServer_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class unpauseServer_result implements org.apache.thrift.TBase<unpauseServer_result, unpauseServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<unpauseServer_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unpauseServer_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new unpauseServer_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new unpauseServer_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public unpauseServer_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<unpauseServer_result> CREATOR = new android.os.Parcelable.Creator<unpauseServer_result>() {
            @Override
            public unpauseServer_result[] newArray(int size) {
                return new unpauseServer_result[size];
            }

            @Override
            public unpauseServer_result createFromParcel(android.os.Parcel in) {
                return new unpauseServer_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unpauseServer_result.class, metaDataMap);
        }

        public unpauseServer_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public unpauseServer_result(unpauseServer_result other) {
        }

        public unpauseServer_result deepCopy() {
            return new unpauseServer_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof unpauseServer_result)
                return this.equals((unpauseServer_result) that);
            return false;
        }

        public boolean equals(unpauseServer_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(unpauseServer_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("unpauseServer_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class unpauseServer_resultStandardSchemeFactory implements SchemeFactory {
            public unpauseServer_resultStandardScheme getScheme() {
                return new unpauseServer_resultStandardScheme();
            }
        }

        private static class unpauseServer_resultStandardScheme extends StandardScheme<unpauseServer_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, unpauseServer_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, unpauseServer_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class unpauseServer_resultTupleSchemeFactory implements SchemeFactory {
            public unpauseServer_resultTupleScheme getScheme() {
                return new unpauseServer_resultTupleScheme();
            }
        }

        private static class unpauseServer_resultTupleScheme extends TupleScheme<unpauseServer_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, unpauseServer_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, unpauseServer_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class togglePause_args implements org.apache.thrift.TBase<togglePause_args, togglePause_args._Fields>, java.io.Serializable, Cloneable, Comparable<togglePause_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("togglePause_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new togglePause_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new togglePause_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public togglePause_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<togglePause_args> CREATOR = new android.os.Parcelable.Creator<togglePause_args>() {
            @Override
            public togglePause_args[] newArray(int size) {
                return new togglePause_args[size];
            }

            @Override
            public togglePause_args createFromParcel(android.os.Parcel in) {
                return new togglePause_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(togglePause_args.class, metaDataMap);
        }

        public togglePause_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public togglePause_args(togglePause_args other) {
        }

        public togglePause_args deepCopy() {
            return new togglePause_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof togglePause_args)
                return this.equals((togglePause_args) that);
            return false;
        }

        public boolean equals(togglePause_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(togglePause_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("togglePause_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class togglePause_argsStandardSchemeFactory implements SchemeFactory {
            public togglePause_argsStandardScheme getScheme() {
                return new togglePause_argsStandardScheme();
            }
        }

        private static class togglePause_argsStandardScheme extends StandardScheme<togglePause_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, togglePause_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, togglePause_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class togglePause_argsTupleSchemeFactory implements SchemeFactory {
            public togglePause_argsTupleScheme getScheme() {
                return new togglePause_argsTupleScheme();
            }
        }

        private static class togglePause_argsTupleScheme extends TupleScheme<togglePause_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, togglePause_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, togglePause_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class togglePause_result implements org.apache.thrift.TBase<togglePause_result, togglePause_result._Fields>, java.io.Serializable, Cloneable, Comparable<togglePause_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("togglePause_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new togglePause_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new togglePause_resultTupleSchemeFactory());
        }

        public boolean success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(success ? 1 : 0);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public togglePause_result(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.success = (in.readInt() == 1);
        }

        public static final android.os.Parcelable.Creator<togglePause_result> CREATOR = new android.os.Parcelable.Creator<togglePause_result>() {
            @Override
            public togglePause_result[] newArray(int size) {
                return new togglePause_result[size];
            }

            @Override
            public togglePause_result createFromParcel(android.os.Parcel in) {
                return new togglePause_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(togglePause_result.class, metaDataMap);
        }

        public togglePause_result() {
        }

        public togglePause_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public togglePause_result(togglePause_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public togglePause_result deepCopy() {
            return new togglePause_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public togglePause_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof togglePause_result)
                return this.equals((togglePause_result) that);
            return false;
        }

        public boolean equals(togglePause_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(togglePause_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("togglePause_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class togglePause_resultStandardSchemeFactory implements SchemeFactory {
            public togglePause_resultStandardScheme getScheme() {
                return new togglePause_resultStandardScheme();
            }
        }

        private static class togglePause_resultStandardScheme extends StandardScheme<togglePause_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, togglePause_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, togglePause_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class togglePause_resultTupleSchemeFactory implements SchemeFactory {
            public togglePause_resultTupleScheme getScheme() {
                return new togglePause_resultTupleScheme();
            }
        }

        private static class togglePause_resultTupleScheme extends TupleScheme<togglePause_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, togglePause_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, togglePause_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class statusServer_args implements org.apache.thrift.TBase<statusServer_args, statusServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<statusServer_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statusServer_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new statusServer_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new statusServer_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public statusServer_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<statusServer_args> CREATOR = new android.os.Parcelable.Creator<statusServer_args>() {
            @Override
            public statusServer_args[] newArray(int size) {
                return new statusServer_args[size];
            }

            @Override
            public statusServer_args createFromParcel(android.os.Parcel in) {
                return new statusServer_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statusServer_args.class, metaDataMap);
        }

        public statusServer_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public statusServer_args(statusServer_args other) {
        }

        public statusServer_args deepCopy() {
            return new statusServer_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof statusServer_args)
                return this.equals((statusServer_args) that);
            return false;
        }

        public boolean equals(statusServer_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(statusServer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("statusServer_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class statusServer_argsStandardSchemeFactory implements SchemeFactory {
            public statusServer_argsStandardScheme getScheme() {
                return new statusServer_argsStandardScheme();
            }
        }

        private static class statusServer_argsStandardScheme extends StandardScheme<statusServer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, statusServer_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, statusServer_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class statusServer_argsTupleSchemeFactory implements SchemeFactory {
            public statusServer_argsTupleScheme getScheme() {
                return new statusServer_argsTupleScheme();
            }
        }

        private static class statusServer_argsTupleScheme extends TupleScheme<statusServer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, statusServer_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, statusServer_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class statusServer_result implements org.apache.thrift.TBase<statusServer_result, statusServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<statusServer_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statusServer_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new statusServer_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new statusServer_resultTupleSchemeFactory());
        }

        public ServerStatus success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeParcelable(success, flags);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public statusServer_result(android.os.Parcel in) {
            this.success = in.readParcelable(statusServer_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<statusServer_result> CREATOR = new android.os.Parcelable.Creator<statusServer_result>() {
            @Override
            public statusServer_result[] newArray(int size) {
                return new statusServer_result[size];
            }

            @Override
            public statusServer_result createFromParcel(android.os.Parcel in) {
                return new statusServer_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerStatus.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statusServer_result.class, metaDataMap);
        }

        public statusServer_result() {
        }

        public statusServer_result(
                ServerStatus success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public statusServer_result(statusServer_result other) {
            if (other.isSetSuccess()) {
                this.success = new ServerStatus(other.success);
            }
        }

        public statusServer_result deepCopy() {
            return new statusServer_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public ServerStatus getSuccess() {
            return this.success;
        }

        public statusServer_result setSuccess(ServerStatus success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((ServerStatus) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof statusServer_result)
                return this.equals((statusServer_result) that);
            return false;
        }

        public boolean equals(statusServer_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(statusServer_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("statusServer_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class statusServer_resultStandardSchemeFactory implements SchemeFactory {
            public statusServer_resultStandardScheme getScheme() {
                return new statusServer_resultStandardScheme();
            }
        }

        private static class statusServer_resultStandardScheme extends StandardScheme<statusServer_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, statusServer_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new ServerStatus();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, statusServer_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class statusServer_resultTupleSchemeFactory implements SchemeFactory {
            public statusServer_resultTupleScheme getScheme() {
                return new statusServer_resultTupleScheme();
            }
        }

        private static class statusServer_resultTupleScheme extends TupleScheme<statusServer_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, statusServer_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, statusServer_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new ServerStatus();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class freeSpace_args implements org.apache.thrift.TBase<freeSpace_args, freeSpace_args._Fields>, java.io.Serializable, Cloneable, Comparable<freeSpace_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("freeSpace_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new freeSpace_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new freeSpace_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public freeSpace_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<freeSpace_args> CREATOR = new android.os.Parcelable.Creator<freeSpace_args>() {
            @Override
            public freeSpace_args[] newArray(int size) {
                return new freeSpace_args[size];
            }

            @Override
            public freeSpace_args createFromParcel(android.os.Parcel in) {
                return new freeSpace_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(freeSpace_args.class, metaDataMap);
        }

        public freeSpace_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public freeSpace_args(freeSpace_args other) {
        }

        public freeSpace_args deepCopy() {
            return new freeSpace_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof freeSpace_args)
                return this.equals((freeSpace_args) that);
            return false;
        }

        public boolean equals(freeSpace_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(freeSpace_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("freeSpace_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class freeSpace_argsStandardSchemeFactory implements SchemeFactory {
            public freeSpace_argsStandardScheme getScheme() {
                return new freeSpace_argsStandardScheme();
            }
        }

        private static class freeSpace_argsStandardScheme extends StandardScheme<freeSpace_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, freeSpace_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, freeSpace_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class freeSpace_argsTupleSchemeFactory implements SchemeFactory {
            public freeSpace_argsTupleScheme getScheme() {
                return new freeSpace_argsTupleScheme();
            }
        }

        private static class freeSpace_argsTupleScheme extends TupleScheme<freeSpace_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, freeSpace_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, freeSpace_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class freeSpace_result implements org.apache.thrift.TBase<freeSpace_result, freeSpace_result._Fields>, java.io.Serializable, Cloneable, Comparable<freeSpace_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("freeSpace_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new freeSpace_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new freeSpace_resultTupleSchemeFactory());
        }

        public long success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeLong(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public freeSpace_result(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.success = in.readLong();
        }

        public static final android.os.Parcelable.Creator<freeSpace_result> CREATOR = new android.os.Parcelable.Creator<freeSpace_result>() {
            @Override
            public freeSpace_result[] newArray(int size) {
                return new freeSpace_result[size];
            }

            @Override
            public freeSpace_result createFromParcel(android.os.Parcel in) {
                return new freeSpace_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(freeSpace_result.class, metaDataMap);
        }

        public freeSpace_result() {
        }

        public freeSpace_result(
                long success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public freeSpace_result(freeSpace_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public freeSpace_result deepCopy() {
            return new freeSpace_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public long getSuccess() {
            return this.success;
        }

        public freeSpace_result setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Long) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof freeSpace_result)
                return this.equals((freeSpace_result) that);
            return false;
        }

        public boolean equals(freeSpace_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(freeSpace_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("freeSpace_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class freeSpace_resultStandardSchemeFactory implements SchemeFactory {
            public freeSpace_resultStandardScheme getScheme() {
                return new freeSpace_resultStandardScheme();
            }
        }

        private static class freeSpace_resultStandardScheme extends StandardScheme<freeSpace_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, freeSpace_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, freeSpace_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class freeSpace_resultTupleSchemeFactory implements SchemeFactory {
            public freeSpace_resultTupleScheme getScheme() {
                return new freeSpace_resultTupleScheme();
            }
        }

        private static class freeSpace_resultTupleScheme extends TupleScheme<freeSpace_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, freeSpace_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI64(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, freeSpace_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getServerVersion_args implements org.apache.thrift.TBase<getServerVersion_args, getServerVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getServerVersion_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerVersion_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getServerVersion_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getServerVersion_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getServerVersion_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<getServerVersion_args> CREATOR = new android.os.Parcelable.Creator<getServerVersion_args>() {
            @Override
            public getServerVersion_args[] newArray(int size) {
                return new getServerVersion_args[size];
            }

            @Override
            public getServerVersion_args createFromParcel(android.os.Parcel in) {
                return new getServerVersion_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerVersion_args.class, metaDataMap);
        }

        public getServerVersion_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getServerVersion_args(getServerVersion_args other) {
        }

        public getServerVersion_args deepCopy() {
            return new getServerVersion_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getServerVersion_args)
                return this.equals((getServerVersion_args) that);
            return false;
        }

        public boolean equals(getServerVersion_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getServerVersion_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getServerVersion_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getServerVersion_argsStandardSchemeFactory implements SchemeFactory {
            public getServerVersion_argsStandardScheme getScheme() {
                return new getServerVersion_argsStandardScheme();
            }
        }

        private static class getServerVersion_argsStandardScheme extends StandardScheme<getServerVersion_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getServerVersion_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getServerVersion_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getServerVersion_argsTupleSchemeFactory implements SchemeFactory {
            public getServerVersion_argsTupleScheme getScheme() {
                return new getServerVersion_argsTupleScheme();
            }
        }

        private static class getServerVersion_argsTupleScheme extends TupleScheme<getServerVersion_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getServerVersion_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getServerVersion_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getServerVersion_result implements org.apache.thrift.TBase<getServerVersion_result, getServerVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getServerVersion_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerVersion_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getServerVersion_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getServerVersion_resultTupleSchemeFactory());
        }

        public String success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getServerVersion_result(android.os.Parcel in) {
            this.success = in.readString();
        }

        public static final android.os.Parcelable.Creator<getServerVersion_result> CREATOR = new android.os.Parcelable.Creator<getServerVersion_result>() {
            @Override
            public getServerVersion_result[] newArray(int size) {
                return new getServerVersion_result[size];
            }

            @Override
            public getServerVersion_result createFromParcel(android.os.Parcel in) {
                return new getServerVersion_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerVersion_result.class, metaDataMap);
        }

        public getServerVersion_result() {
        }

        public getServerVersion_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getServerVersion_result(getServerVersion_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public getServerVersion_result deepCopy() {
            return new getServerVersion_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public getServerVersion_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getServerVersion_result)
                return this.equals((getServerVersion_result) that);
            return false;
        }

        public boolean equals(getServerVersion_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getServerVersion_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getServerVersion_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getServerVersion_resultStandardSchemeFactory implements SchemeFactory {
            public getServerVersion_resultStandardScheme getScheme() {
                return new getServerVersion_resultStandardScheme();
            }
        }

        private static class getServerVersion_resultStandardScheme extends StandardScheme<getServerVersion_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getServerVersion_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getServerVersion_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getServerVersion_resultTupleSchemeFactory implements SchemeFactory {
            public getServerVersion_resultTupleScheme getScheme() {
                return new getServerVersion_resultTupleScheme();
            }
        }

        private static class getServerVersion_resultTupleScheme extends TupleScheme<getServerVersion_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getServerVersion_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getServerVersion_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class kill_args implements org.apache.thrift.TBase<kill_args, kill_args._Fields>, java.io.Serializable, Cloneable, Comparable<kill_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kill_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new kill_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new kill_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public kill_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<kill_args> CREATOR = new android.os.Parcelable.Creator<kill_args>() {
            @Override
            public kill_args[] newArray(int size) {
                return new kill_args[size];
            }

            @Override
            public kill_args createFromParcel(android.os.Parcel in) {
                return new kill_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kill_args.class, metaDataMap);
        }

        public kill_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public kill_args(kill_args other) {
        }

        public kill_args deepCopy() {
            return new kill_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof kill_args)
                return this.equals((kill_args) that);
            return false;
        }

        public boolean equals(kill_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(kill_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("kill_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class kill_argsStandardSchemeFactory implements SchemeFactory {
            public kill_argsStandardScheme getScheme() {
                return new kill_argsStandardScheme();
            }
        }

        private static class kill_argsStandardScheme extends StandardScheme<kill_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, kill_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, kill_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class kill_argsTupleSchemeFactory implements SchemeFactory {
            public kill_argsTupleScheme getScheme() {
                return new kill_argsTupleScheme();
            }
        }

        private static class kill_argsTupleScheme extends TupleScheme<kill_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, kill_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, kill_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class kill_result implements org.apache.thrift.TBase<kill_result, kill_result._Fields>, java.io.Serializable, Cloneable, Comparable<kill_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kill_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new kill_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new kill_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public kill_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<kill_result> CREATOR = new android.os.Parcelable.Creator<kill_result>() {
            @Override
            public kill_result[] newArray(int size) {
                return new kill_result[size];
            }

            @Override
            public kill_result createFromParcel(android.os.Parcel in) {
                return new kill_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kill_result.class, metaDataMap);
        }

        public kill_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public kill_result(kill_result other) {
        }

        public kill_result deepCopy() {
            return new kill_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof kill_result)
                return this.equals((kill_result) that);
            return false;
        }

        public boolean equals(kill_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(kill_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("kill_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class kill_resultStandardSchemeFactory implements SchemeFactory {
            public kill_resultStandardScheme getScheme() {
                return new kill_resultStandardScheme();
            }
        }

        private static class kill_resultStandardScheme extends StandardScheme<kill_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, kill_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, kill_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class kill_resultTupleSchemeFactory implements SchemeFactory {
            public kill_resultTupleScheme getScheme() {
                return new kill_resultTupleScheme();
            }
        }

        private static class kill_resultTupleScheme extends TupleScheme<kill_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, kill_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, kill_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class restart_args implements org.apache.thrift.TBase<restart_args, restart_args._Fields>, java.io.Serializable, Cloneable, Comparable<restart_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restart_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new restart_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new restart_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public restart_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<restart_args> CREATOR = new android.os.Parcelable.Creator<restart_args>() {
            @Override
            public restart_args[] newArray(int size) {
                return new restart_args[size];
            }

            @Override
            public restart_args createFromParcel(android.os.Parcel in) {
                return new restart_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restart_args.class, metaDataMap);
        }

        public restart_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public restart_args(restart_args other) {
        }

        public restart_args deepCopy() {
            return new restart_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof restart_args)
                return this.equals((restart_args) that);
            return false;
        }

        public boolean equals(restart_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(restart_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("restart_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class restart_argsStandardSchemeFactory implements SchemeFactory {
            public restart_argsStandardScheme getScheme() {
                return new restart_argsStandardScheme();
            }
        }

        private static class restart_argsStandardScheme extends StandardScheme<restart_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, restart_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, restart_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class restart_argsTupleSchemeFactory implements SchemeFactory {
            public restart_argsTupleScheme getScheme() {
                return new restart_argsTupleScheme();
            }
        }

        private static class restart_argsTupleScheme extends TupleScheme<restart_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, restart_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, restart_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class restart_result implements org.apache.thrift.TBase<restart_result, restart_result._Fields>, java.io.Serializable, Cloneable, Comparable<restart_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restart_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new restart_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new restart_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public restart_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<restart_result> CREATOR = new android.os.Parcelable.Creator<restart_result>() {
            @Override
            public restart_result[] newArray(int size) {
                return new restart_result[size];
            }

            @Override
            public restart_result createFromParcel(android.os.Parcel in) {
                return new restart_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restart_result.class, metaDataMap);
        }

        public restart_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public restart_result(restart_result other) {
        }

        public restart_result deepCopy() {
            return new restart_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof restart_result)
                return this.equals((restart_result) that);
            return false;
        }

        public boolean equals(restart_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(restart_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("restart_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class restart_resultStandardSchemeFactory implements SchemeFactory {
            public restart_resultStandardScheme getScheme() {
                return new restart_resultStandardScheme();
            }
        }

        private static class restart_resultStandardScheme extends StandardScheme<restart_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, restart_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, restart_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class restart_resultTupleSchemeFactory implements SchemeFactory {
            public restart_resultTupleScheme getScheme() {
                return new restart_resultTupleScheme();
            }
        }

        private static class restart_resultTupleScheme extends TupleScheme<restart_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, restart_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, restart_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getLog_args implements org.apache.thrift.TBase<getLog_args, getLog_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLog_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLog_args");

        private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getLog_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getLog_argsTupleSchemeFactory());
        }

        public int offset; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(offset);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getLog_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.offset = in.readInt();
        }

        public static final android.os.Parcelable.Creator<getLog_args> CREATOR = new android.os.Parcelable.Creator<getLog_args>() {
            @Override
            public getLog_args[] newArray(int size) {
                return new getLog_args[size];
            }

            @Override
            public getLog_args createFromParcel(android.os.Parcel in) {
                return new getLog_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            OFFSET((short) 1, "offset");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // OFFSET
                        return OFFSET;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __OFFSET_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLog_args.class, metaDataMap);
        }

        public getLog_args() {
        }

        public getLog_args(
                int offset) {
            this();
            this.offset = offset;
            setOffsetIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getLog_args(getLog_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.offset = other.offset;
        }

        public getLog_args deepCopy() {
            return new getLog_args(this);
        }

        @Override
        public void clear() {
            setOffsetIsSet(false);
            this.offset = 0;
        }

        public int getOffset() {
            return this.offset;
        }

        public getLog_args setOffset(int offset) {
            this.offset = offset;
            setOffsetIsSet(true);
            return this;
        }

        public void unsetOffset() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
        }

        /** Returns true if field offset is set (has been assigned a value) and false otherwise */
        public boolean isSetOffset() {
            return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
        }

        public void setOffsetIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case OFFSET:
                    if (value == null) {
                        unsetOffset();
                    } else {
                        setOffset((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case OFFSET:
                    return getOffset();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case OFFSET:
                    return isSetOffset();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getLog_args)
                return this.equals((getLog_args) that);
            return false;
        }

        public boolean equals(getLog_args that) {
            if (that == null)
                return false;

            boolean this_present_offset = true;
            boolean that_present_offset = true;
            if (this_present_offset || that_present_offset) {
                if (!(this_present_offset && that_present_offset))
                    return false;
                if (this.offset != that.offset)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_offset = true;
            list.add(present_offset);
            if (present_offset)
                list.add(offset);

            return list.hashCode();
        }

        @Override
        public int compareTo(getLog_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOffset()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getLog_args(");
            boolean first = true;

            sb.append("offset:");
            sb.append(this.offset);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getLog_argsStandardSchemeFactory implements SchemeFactory {
            public getLog_argsStandardScheme getScheme() {
                return new getLog_argsStandardScheme();
            }
        }

        private static class getLog_argsStandardScheme extends StandardScheme<getLog_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getLog_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // OFFSET
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.offset = iprot.readI32();
                                struct.setOffsetIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getLog_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(OFFSET_FIELD_DESC);
                oprot.writeI32(struct.offset);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getLog_argsTupleSchemeFactory implements SchemeFactory {
            public getLog_argsTupleScheme getScheme() {
                return new getLog_argsTupleScheme();
            }
        }

        private static class getLog_argsTupleScheme extends TupleScheme<getLog_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getLog_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetOffset()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetOffset()) {
                    oprot.writeI32(struct.offset);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getLog_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.offset = iprot.readI32();
                    struct.setOffsetIsSet(true);
                }
            }
        }

    }

    public static class getLog_result implements org.apache.thrift.TBase<getLog_result, getLog_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLog_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLog_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getLog_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getLog_resultTupleSchemeFactory());
        }

        public List<String> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getLog_result(android.os.Parcel in) {
            this.success = new ArrayList<String>();
            in.readList(this.success, getLog_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getLog_result> CREATOR = new android.os.Parcelable.Creator<getLog_result>() {
            @Override
            public getLog_result[] newArray(int size) {
                return new getLog_result[size];
            }

            @Override
            public getLog_result createFromParcel(android.os.Parcel in) {
                return new getLog_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLog_result.class, metaDataMap);
        }

        public getLog_result() {
        }

        public getLog_result(
                List<String> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getLog_result(getLog_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>(other.success);
                this.success = __this__success;
            }
        }

        public getLog_result deepCopy() {
            return new getLog_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public getLog_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getLog_result)
                return this.equals((getLog_result) that);
            return false;
        }

        public boolean equals(getLog_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getLog_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getLog_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getLog_resultStandardSchemeFactory implements SchemeFactory {
            public getLog_resultStandardScheme getScheme() {
                return new getLog_resultStandardScheme();
            }
        }

        private static class getLog_resultStandardScheme extends StandardScheme<getLog_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getLog_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                                    struct.success = new ArrayList<String>(_list104.size);
                                    String _elem105;
                                    for (int _i106 = 0; _i106 < _list104.size; ++_i106) {
                                        _elem105 = iprot.readString();
                                        struct.success.add(_elem105);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getLog_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter107 : struct.success) {
                            oprot.writeString(_iter107);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getLog_resultTupleSchemeFactory implements SchemeFactory {
            public getLog_resultTupleScheme getScheme() {
                return new getLog_resultTupleScheme();
            }
        }

        private static class getLog_resultTupleScheme extends TupleScheme<getLog_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getLog_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter108 : struct.success) {
                            oprot.writeString(_iter108);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getLog_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list109.size);
                        String _elem110;
                        for (int _i111 = 0; _i111 < _list109.size; ++_i111) {
                            _elem110 = iprot.readString();
                            struct.success.add(_elem110);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class isTimeDownload_args implements org.apache.thrift.TBase<isTimeDownload_args, isTimeDownload_args._Fields>, java.io.Serializable, Cloneable, Comparable<isTimeDownload_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isTimeDownload_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new isTimeDownload_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new isTimeDownload_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public isTimeDownload_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<isTimeDownload_args> CREATOR = new android.os.Parcelable.Creator<isTimeDownload_args>() {
            @Override
            public isTimeDownload_args[] newArray(int size) {
                return new isTimeDownload_args[size];
            }

            @Override
            public isTimeDownload_args createFromParcel(android.os.Parcel in) {
                return new isTimeDownload_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isTimeDownload_args.class, metaDataMap);
        }

        public isTimeDownload_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public isTimeDownload_args(isTimeDownload_args other) {
        }

        public isTimeDownload_args deepCopy() {
            return new isTimeDownload_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof isTimeDownload_args)
                return this.equals((isTimeDownload_args) that);
            return false;
        }

        public boolean equals(isTimeDownload_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(isTimeDownload_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("isTimeDownload_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class isTimeDownload_argsStandardSchemeFactory implements SchemeFactory {
            public isTimeDownload_argsStandardScheme getScheme() {
                return new isTimeDownload_argsStandardScheme();
            }
        }

        private static class isTimeDownload_argsStandardScheme extends StandardScheme<isTimeDownload_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, isTimeDownload_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, isTimeDownload_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class isTimeDownload_argsTupleSchemeFactory implements SchemeFactory {
            public isTimeDownload_argsTupleScheme getScheme() {
                return new isTimeDownload_argsTupleScheme();
            }
        }

        private static class isTimeDownload_argsTupleScheme extends TupleScheme<isTimeDownload_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, isTimeDownload_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, isTimeDownload_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class isTimeDownload_result implements org.apache.thrift.TBase<isTimeDownload_result, isTimeDownload_result._Fields>, java.io.Serializable, Cloneable, Comparable<isTimeDownload_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isTimeDownload_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new isTimeDownload_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new isTimeDownload_resultTupleSchemeFactory());
        }

        public boolean success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(success ? 1 : 0);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public isTimeDownload_result(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.success = (in.readInt() == 1);
        }

        public static final android.os.Parcelable.Creator<isTimeDownload_result> CREATOR = new android.os.Parcelable.Creator<isTimeDownload_result>() {
            @Override
            public isTimeDownload_result[] newArray(int size) {
                return new isTimeDownload_result[size];
            }

            @Override
            public isTimeDownload_result createFromParcel(android.os.Parcel in) {
                return new isTimeDownload_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isTimeDownload_result.class, metaDataMap);
        }

        public isTimeDownload_result() {
        }

        public isTimeDownload_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public isTimeDownload_result(isTimeDownload_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public isTimeDownload_result deepCopy() {
            return new isTimeDownload_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public isTimeDownload_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof isTimeDownload_result)
                return this.equals((isTimeDownload_result) that);
            return false;
        }

        public boolean equals(isTimeDownload_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(isTimeDownload_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("isTimeDownload_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class isTimeDownload_resultStandardSchemeFactory implements SchemeFactory {
            public isTimeDownload_resultStandardScheme getScheme() {
                return new isTimeDownload_resultStandardScheme();
            }
        }

        private static class isTimeDownload_resultStandardScheme extends StandardScheme<isTimeDownload_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, isTimeDownload_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, isTimeDownload_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class isTimeDownload_resultTupleSchemeFactory implements SchemeFactory {
            public isTimeDownload_resultTupleScheme getScheme() {
                return new isTimeDownload_resultTupleScheme();
            }
        }

        private static class isTimeDownload_resultTupleScheme extends TupleScheme<isTimeDownload_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, isTimeDownload_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, isTimeDownload_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class isTimeReconnect_args implements org.apache.thrift.TBase<isTimeReconnect_args, isTimeReconnect_args._Fields>, java.io.Serializable, Cloneable, Comparable<isTimeReconnect_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isTimeReconnect_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new isTimeReconnect_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new isTimeReconnect_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public isTimeReconnect_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<isTimeReconnect_args> CREATOR = new android.os.Parcelable.Creator<isTimeReconnect_args>() {
            @Override
            public isTimeReconnect_args[] newArray(int size) {
                return new isTimeReconnect_args[size];
            }

            @Override
            public isTimeReconnect_args createFromParcel(android.os.Parcel in) {
                return new isTimeReconnect_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isTimeReconnect_args.class, metaDataMap);
        }

        public isTimeReconnect_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public isTimeReconnect_args(isTimeReconnect_args other) {
        }

        public isTimeReconnect_args deepCopy() {
            return new isTimeReconnect_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof isTimeReconnect_args)
                return this.equals((isTimeReconnect_args) that);
            return false;
        }

        public boolean equals(isTimeReconnect_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(isTimeReconnect_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("isTimeReconnect_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class isTimeReconnect_argsStandardSchemeFactory implements SchemeFactory {
            public isTimeReconnect_argsStandardScheme getScheme() {
                return new isTimeReconnect_argsStandardScheme();
            }
        }

        private static class isTimeReconnect_argsStandardScheme extends StandardScheme<isTimeReconnect_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, isTimeReconnect_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, isTimeReconnect_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class isTimeReconnect_argsTupleSchemeFactory implements SchemeFactory {
            public isTimeReconnect_argsTupleScheme getScheme() {
                return new isTimeReconnect_argsTupleScheme();
            }
        }

        private static class isTimeReconnect_argsTupleScheme extends TupleScheme<isTimeReconnect_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, isTimeReconnect_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, isTimeReconnect_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class isTimeReconnect_result implements org.apache.thrift.TBase<isTimeReconnect_result, isTimeReconnect_result._Fields>, java.io.Serializable, Cloneable, Comparable<isTimeReconnect_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isTimeReconnect_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new isTimeReconnect_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new isTimeReconnect_resultTupleSchemeFactory());
        }

        public boolean success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(success ? 1 : 0);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public isTimeReconnect_result(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.success = (in.readInt() == 1);
        }

        public static final android.os.Parcelable.Creator<isTimeReconnect_result> CREATOR = new android.os.Parcelable.Creator<isTimeReconnect_result>() {
            @Override
            public isTimeReconnect_result[] newArray(int size) {
                return new isTimeReconnect_result[size];
            }

            @Override
            public isTimeReconnect_result createFromParcel(android.os.Parcel in) {
                return new isTimeReconnect_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isTimeReconnect_result.class, metaDataMap);
        }

        public isTimeReconnect_result() {
        }

        public isTimeReconnect_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public isTimeReconnect_result(isTimeReconnect_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public isTimeReconnect_result deepCopy() {
            return new isTimeReconnect_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public isTimeReconnect_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof isTimeReconnect_result)
                return this.equals((isTimeReconnect_result) that);
            return false;
        }

        public boolean equals(isTimeReconnect_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(isTimeReconnect_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("isTimeReconnect_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class isTimeReconnect_resultStandardSchemeFactory implements SchemeFactory {
            public isTimeReconnect_resultStandardScheme getScheme() {
                return new isTimeReconnect_resultStandardScheme();
            }
        }

        private static class isTimeReconnect_resultStandardScheme extends StandardScheme<isTimeReconnect_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, isTimeReconnect_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, isTimeReconnect_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class isTimeReconnect_resultTupleSchemeFactory implements SchemeFactory {
            public isTimeReconnect_resultTupleScheme getScheme() {
                return new isTimeReconnect_resultTupleScheme();
            }
        }

        private static class isTimeReconnect_resultTupleScheme extends TupleScheme<isTimeReconnect_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, isTimeReconnect_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, isTimeReconnect_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class toggleReconnect_args implements org.apache.thrift.TBase<toggleReconnect_args, toggleReconnect_args._Fields>, java.io.Serializable, Cloneable, Comparable<toggleReconnect_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toggleReconnect_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new toggleReconnect_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new toggleReconnect_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public toggleReconnect_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<toggleReconnect_args> CREATOR = new android.os.Parcelable.Creator<toggleReconnect_args>() {
            @Override
            public toggleReconnect_args[] newArray(int size) {
                return new toggleReconnect_args[size];
            }

            @Override
            public toggleReconnect_args createFromParcel(android.os.Parcel in) {
                return new toggleReconnect_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toggleReconnect_args.class, metaDataMap);
        }

        public toggleReconnect_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public toggleReconnect_args(toggleReconnect_args other) {
        }

        public toggleReconnect_args deepCopy() {
            return new toggleReconnect_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof toggleReconnect_args)
                return this.equals((toggleReconnect_args) that);
            return false;
        }

        public boolean equals(toggleReconnect_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(toggleReconnect_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("toggleReconnect_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class toggleReconnect_argsStandardSchemeFactory implements SchemeFactory {
            public toggleReconnect_argsStandardScheme getScheme() {
                return new toggleReconnect_argsStandardScheme();
            }
        }

        private static class toggleReconnect_argsStandardScheme extends StandardScheme<toggleReconnect_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, toggleReconnect_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, toggleReconnect_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class toggleReconnect_argsTupleSchemeFactory implements SchemeFactory {
            public toggleReconnect_argsTupleScheme getScheme() {
                return new toggleReconnect_argsTupleScheme();
            }
        }

        private static class toggleReconnect_argsTupleScheme extends TupleScheme<toggleReconnect_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, toggleReconnect_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, toggleReconnect_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class toggleReconnect_result implements org.apache.thrift.TBase<toggleReconnect_result, toggleReconnect_result._Fields>, java.io.Serializable, Cloneable, Comparable<toggleReconnect_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toggleReconnect_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new toggleReconnect_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new toggleReconnect_resultTupleSchemeFactory());
        }

        public boolean success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(success ? 1 : 0);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public toggleReconnect_result(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.success = (in.readInt() == 1);
        }

        public static final android.os.Parcelable.Creator<toggleReconnect_result> CREATOR = new android.os.Parcelable.Creator<toggleReconnect_result>() {
            @Override
            public toggleReconnect_result[] newArray(int size) {
                return new toggleReconnect_result[size];
            }

            @Override
            public toggleReconnect_result createFromParcel(android.os.Parcel in) {
                return new toggleReconnect_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toggleReconnect_result.class, metaDataMap);
        }

        public toggleReconnect_result() {
        }

        public toggleReconnect_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public toggleReconnect_result(toggleReconnect_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public toggleReconnect_result deepCopy() {
            return new toggleReconnect_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public toggleReconnect_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof toggleReconnect_result)
                return this.equals((toggleReconnect_result) that);
            return false;
        }

        public boolean equals(toggleReconnect_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(toggleReconnect_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("toggleReconnect_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class toggleReconnect_resultStandardSchemeFactory implements SchemeFactory {
            public toggleReconnect_resultStandardScheme getScheme() {
                return new toggleReconnect_resultStandardScheme();
            }
        }

        private static class toggleReconnect_resultStandardScheme extends StandardScheme<toggleReconnect_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, toggleReconnect_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, toggleReconnect_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class toggleReconnect_resultTupleSchemeFactory implements SchemeFactory {
            public toggleReconnect_resultTupleScheme getScheme() {
                return new toggleReconnect_resultTupleScheme();
            }
        }

        private static class toggleReconnect_resultTupleScheme extends TupleScheme<toggleReconnect_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, toggleReconnect_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, toggleReconnect_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class generatePackages_args implements org.apache.thrift.TBase<generatePackages_args, generatePackages_args._Fields>, java.io.Serializable, Cloneable, Comparable<generatePackages_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generatePackages_args");

        private static final org.apache.thrift.protocol.TField LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("links", org.apache.thrift.protocol.TType.LIST, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new generatePackages_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new generatePackages_argsTupleSchemeFactory());
        }

        public List<String> links; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(links);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public generatePackages_args(android.os.Parcel in) {
            this.links = new ArrayList<String>();
            in.readList(this.links, generatePackages_args.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<generatePackages_args> CREATOR = new android.os.Parcelable.Creator<generatePackages_args>() {
            @Override
            public generatePackages_args[] newArray(int size) {
                return new generatePackages_args[size];
            }

            @Override
            public generatePackages_args createFromParcel(android.os.Parcel in) {
                return new generatePackages_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            LINKS((short) 1, "links");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // LINKS
                        return LINKS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LINKS, new org.apache.thrift.meta_data.FieldMetaData("links", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST, "LinkList")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generatePackages_args.class, metaDataMap);
        }

        public generatePackages_args() {
        }

        public generatePackages_args(
                List<String> links) {
            this();
            this.links = links;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public generatePackages_args(generatePackages_args other) {
            if (other.isSetLinks()) {
                this.links = other.links;
            }
        }

        public generatePackages_args deepCopy() {
            return new generatePackages_args(this);
        }

        @Override
        public void clear() {
            this.links = null;
        }

        public int getLinksSize() {
            return (this.links == null) ? 0 : this.links.size();
        }

        public java.util.Iterator<String> getLinksIterator() {
            return (this.links == null) ? null : this.links.iterator();
        }

        public void addToLinks(String elem) {
            if (this.links == null) {
                this.links = new ArrayList<String>();
            }
            this.links.add(elem);
        }

        public List<String> getLinks() {
            return this.links;
        }

        public generatePackages_args setLinks(List<String> links) {
            this.links = links;
            return this;
        }

        public void unsetLinks() {
            this.links = null;
        }

        /** Returns true if field links is set (has been assigned a value) and false otherwise */
        public boolean isSetLinks() {
            return this.links != null;
        }

        public void setLinksIsSet(boolean value) {
            if (!value) {
                this.links = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case LINKS:
                    if (value == null) {
                        unsetLinks();
                    } else {
                        setLinks((List<String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case LINKS:
                    return getLinks();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case LINKS:
                    return isSetLinks();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof generatePackages_args)
                return this.equals((generatePackages_args) that);
            return false;
        }

        public boolean equals(generatePackages_args that) {
            if (that == null)
                return false;

            boolean this_present_links = true && this.isSetLinks();
            boolean that_present_links = true && that.isSetLinks();
            if (this_present_links || that_present_links) {
                if (!(this_present_links && that_present_links))
                    return false;
                if (!this.links.equals(that.links))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_links = true && (isSetLinks());
            list.add(present_links);
            if (present_links)
                list.add(links);

            return list.hashCode();
        }

        @Override
        public int compareTo(generatePackages_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetLinks()).compareTo(other.isSetLinks());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLinks()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.links, other.links);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("generatePackages_args(");
            boolean first = true;

            sb.append("links:");
            if (this.links == null) {
                sb.append("null");
            } else {
                sb.append(this.links);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class generatePackages_argsStandardSchemeFactory implements SchemeFactory {
            public generatePackages_argsStandardScheme getScheme() {
                return new generatePackages_argsStandardScheme();
            }
        }

        private static class generatePackages_argsStandardScheme extends StandardScheme<generatePackages_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, generatePackages_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // LINKS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                                    struct.links = new ArrayList<String>(_list112.size);
                                    String _elem113;
                                    for (int _i114 = 0; _i114 < _list112.size; ++_i114) {
                                        _elem113 = iprot.readString();
                                        struct.links.add(_elem113);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setLinksIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, generatePackages_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.links != null) {
                    oprot.writeFieldBegin(LINKS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.links.size()));
                        for (String _iter115 : struct.links) {
                            oprot.writeString(_iter115);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class generatePackages_argsTupleSchemeFactory implements SchemeFactory {
            public generatePackages_argsTupleScheme getScheme() {
                return new generatePackages_argsTupleScheme();
            }
        }

        private static class generatePackages_argsTupleScheme extends TupleScheme<generatePackages_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, generatePackages_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLinks()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLinks()) {
                    {
                        oprot.writeI32(struct.links.size());
                        for (String _iter116 : struct.links) {
                            oprot.writeString(_iter116);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, generatePackages_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.links = new ArrayList<String>(_list117.size);
                        String _elem118;
                        for (int _i119 = 0; _i119 < _list117.size; ++_i119) {
                            _elem118 = iprot.readString();
                            struct.links.add(_elem118);
                        }
                    }
                    struct.setLinksIsSet(true);
                }
            }
        }

    }

    public static class generatePackages_result implements org.apache.thrift.TBase<generatePackages_result, generatePackages_result._Fields>, java.io.Serializable, Cloneable, Comparable<generatePackages_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generatePackages_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new generatePackages_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new generatePackages_resultTupleSchemeFactory());
        }

        public Map<String, List<String>> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeMap(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public generatePackages_result(android.os.Parcel in) {
            this.success = new HashMap<String, List<String>>();
            in.readMap(this.success, generatePackages_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<generatePackages_result> CREATOR = new android.os.Parcelable.Creator<generatePackages_result>() {
            @Override
            public generatePackages_result[] newArray(int size) {
                return new generatePackages_result[size];
            }

            @Override
            public generatePackages_result createFromParcel(android.os.Parcel in) {
                return new generatePackages_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST, "LinkList"))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generatePackages_result.class, metaDataMap);
        }

        public generatePackages_result() {
        }

        public generatePackages_result(
                Map<String, List<String>> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public generatePackages_result(generatePackages_result other) {
            if (other.isSetSuccess()) {
                Map<String, List<String>> __this__success = new HashMap<String, List<String>>(other.success.size());
                for (Map.Entry<String, List<String>> other_element : other.success.entrySet()) {

                    String other_element_key = other_element.getKey();
                    List<String> other_element_value = other_element.getValue();

                    String __this__success_copy_key = other_element_key;

                    List<String> __this__success_copy_value = other_element_value;

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public generatePackages_result deepCopy() {
            return new generatePackages_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(String key, List<String> val) {
            if (this.success == null) {
                this.success = new HashMap<String, List<String>>();
            }
            this.success.put(key, val);
        }

        public Map<String, List<String>> getSuccess() {
            return this.success;
        }

        public generatePackages_result setSuccess(Map<String, List<String>> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<String, List<String>>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof generatePackages_result)
                return this.equals((generatePackages_result) that);
            return false;
        }

        public boolean equals(generatePackages_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(generatePackages_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("generatePackages_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class generatePackages_resultStandardSchemeFactory implements SchemeFactory {
            public generatePackages_resultStandardScheme getScheme() {
                return new generatePackages_resultStandardScheme();
            }
        }

        private static class generatePackages_resultStandardScheme extends StandardScheme<generatePackages_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, generatePackages_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                                    struct.success = new HashMap<String, List<String>>(2 * _map120.size);
                                    String _key121;
                                    List<String> _val122;
                                    for (int _i123 = 0; _i123 < _map120.size; ++_i123) {
                                        _key121 = iprot.readString();
                                        {
                                            org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                                            _val122 = new ArrayList<String>(_list124.size);
                                            String _elem125;
                                            for (int _i126 = 0; _i126 < _list124.size; ++_i126) {
                                                _elem125 = iprot.readString();
                                                _val122.add(_elem125);
                                            }
                                            iprot.readListEnd();
                                        }
                                        struct.success.put(_key121, _val122);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, generatePackages_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
                        for (Map.Entry<String, List<String>> _iter127 : struct.success.entrySet()) {
                            oprot.writeString(_iter127.getKey());
                            {
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter127.getValue().size()));
                                for (String _iter128 : _iter127.getValue()) {
                                    oprot.writeString(_iter128);
                                }
                                oprot.writeListEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class generatePackages_resultTupleSchemeFactory implements SchemeFactory {
            public generatePackages_resultTupleScheme getScheme() {
                return new generatePackages_resultTupleScheme();
            }
        }

        private static class generatePackages_resultTupleScheme extends TupleScheme<generatePackages_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, generatePackages_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<String, List<String>> _iter129 : struct.success.entrySet()) {
                            oprot.writeString(_iter129.getKey());
                            {
                                oprot.writeI32(_iter129.getValue().size());
                                for (String _iter130 : _iter129.getValue()) {
                                    oprot.writeString(_iter130);
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, generatePackages_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map131 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                        struct.success = new HashMap<String, List<String>>(2 * _map131.size);
                        String _key132;
                        List<String> _val133;
                        for (int _i134 = 0; _i134 < _map131.size; ++_i134) {
                            _key132 = iprot.readString();
                            {
                                org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                                _val133 = new ArrayList<String>(_list135.size);
                                String _elem136;
                                for (int _i137 = 0; _i137 < _list135.size; ++_i137) {
                                    _elem136 = iprot.readString();
                                    _val133.add(_elem136);
                                }
                            }
                            struct.success.put(_key132, _val133);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class checkURLs_args implements org.apache.thrift.TBase<checkURLs_args, checkURLs_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkURLs_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkURLs_args");

        private static final org.apache.thrift.protocol.TField URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("urls", org.apache.thrift.protocol.TType.LIST, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new checkURLs_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new checkURLs_argsTupleSchemeFactory());
        }

        public List<String> urls; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(urls);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public checkURLs_args(android.os.Parcel in) {
            this.urls = new ArrayList<String>();
            in.readList(this.urls, checkURLs_args.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<checkURLs_args> CREATOR = new android.os.Parcelable.Creator<checkURLs_args>() {
            @Override
            public checkURLs_args[] newArray(int size) {
                return new checkURLs_args[size];
            }

            @Override
            public checkURLs_args createFromParcel(android.os.Parcel in) {
                return new checkURLs_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            URLS((short) 1, "urls");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // URLS
                        return URLS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.URLS, new org.apache.thrift.meta_data.FieldMetaData("urls", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST, "LinkList")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkURLs_args.class, metaDataMap);
        }

        public checkURLs_args() {
        }

        public checkURLs_args(
                List<String> urls) {
            this();
            this.urls = urls;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkURLs_args(checkURLs_args other) {
            if (other.isSetUrls()) {
                this.urls = other.urls;
            }
        }

        public checkURLs_args deepCopy() {
            return new checkURLs_args(this);
        }

        @Override
        public void clear() {
            this.urls = null;
        }

        public int getUrlsSize() {
            return (this.urls == null) ? 0 : this.urls.size();
        }

        public java.util.Iterator<String> getUrlsIterator() {
            return (this.urls == null) ? null : this.urls.iterator();
        }

        public void addToUrls(String elem) {
            if (this.urls == null) {
                this.urls = new ArrayList<String>();
            }
            this.urls.add(elem);
        }

        public List<String> getUrls() {
            return this.urls;
        }

        public checkURLs_args setUrls(List<String> urls) {
            this.urls = urls;
            return this;
        }

        public void unsetUrls() {
            this.urls = null;
        }

        /** Returns true if field urls is set (has been assigned a value) and false otherwise */
        public boolean isSetUrls() {
            return this.urls != null;
        }

        public void setUrlsIsSet(boolean value) {
            if (!value) {
                this.urls = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case URLS:
                    if (value == null) {
                        unsetUrls();
                    } else {
                        setUrls((List<String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case URLS:
                    return getUrls();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case URLS:
                    return isSetUrls();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof checkURLs_args)
                return this.equals((checkURLs_args) that);
            return false;
        }

        public boolean equals(checkURLs_args that) {
            if (that == null)
                return false;

            boolean this_present_urls = true && this.isSetUrls();
            boolean that_present_urls = true && that.isSetUrls();
            if (this_present_urls || that_present_urls) {
                if (!(this_present_urls && that_present_urls))
                    return false;
                if (!this.urls.equals(that.urls))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_urls = true && (isSetUrls());
            list.add(present_urls);
            if (present_urls)
                list.add(urls);

            return list.hashCode();
        }

        @Override
        public int compareTo(checkURLs_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUrls()).compareTo(other.isSetUrls());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUrls()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urls, other.urls);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("checkURLs_args(");
            boolean first = true;

            sb.append("urls:");
            if (this.urls == null) {
                sb.append("null");
            } else {
                sb.append(this.urls);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class checkURLs_argsStandardSchemeFactory implements SchemeFactory {
            public checkURLs_argsStandardScheme getScheme() {
                return new checkURLs_argsStandardScheme();
            }
        }

        private static class checkURLs_argsStandardScheme extends StandardScheme<checkURLs_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, checkURLs_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // URLS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                                    struct.urls = new ArrayList<String>(_list138.size);
                                    String _elem139;
                                    for (int _i140 = 0; _i140 < _list138.size; ++_i140) {
                                        _elem139 = iprot.readString();
                                        struct.urls.add(_elem139);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUrlsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, checkURLs_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.urls != null) {
                    oprot.writeFieldBegin(URLS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.urls.size()));
                        for (String _iter141 : struct.urls) {
                            oprot.writeString(_iter141);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkURLs_argsTupleSchemeFactory implements SchemeFactory {
            public checkURLs_argsTupleScheme getScheme() {
                return new checkURLs_argsTupleScheme();
            }
        }

        private static class checkURLs_argsTupleScheme extends TupleScheme<checkURLs_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, checkURLs_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUrls()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUrls()) {
                    {
                        oprot.writeI32(struct.urls.size());
                        for (String _iter142 : struct.urls) {
                            oprot.writeString(_iter142);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, checkURLs_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.urls = new ArrayList<String>(_list143.size);
                        String _elem144;
                        for (int _i145 = 0; _i145 < _list143.size; ++_i145) {
                            _elem144 = iprot.readString();
                            struct.urls.add(_elem144);
                        }
                    }
                    struct.setUrlsIsSet(true);
                }
            }
        }

    }

    public static class checkURLs_result implements org.apache.thrift.TBase<checkURLs_result, checkURLs_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkURLs_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkURLs_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new checkURLs_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new checkURLs_resultTupleSchemeFactory());
        }

        public Map<String, List<String>> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeMap(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public checkURLs_result(android.os.Parcel in) {
            this.success = new HashMap<String, List<String>>();
            in.readMap(this.success, checkURLs_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<checkURLs_result> CREATOR = new android.os.Parcelable.Creator<checkURLs_result>() {
            @Override
            public checkURLs_result[] newArray(int size) {
                return new checkURLs_result[size];
            }

            @Override
            public checkURLs_result createFromParcel(android.os.Parcel in) {
                return new checkURLs_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "PluginName"),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST, "LinkList"))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkURLs_result.class, metaDataMap);
        }

        public checkURLs_result() {
        }

        public checkURLs_result(
                Map<String, List<String>> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkURLs_result(checkURLs_result other) {
            if (other.isSetSuccess()) {
                Map<String, List<String>> __this__success = new HashMap<String, List<String>>(other.success.size());
                for (Map.Entry<String, List<String>> other_element : other.success.entrySet()) {

                    String other_element_key = other_element.getKey();
                    List<String> other_element_value = other_element.getValue();

                    String __this__success_copy_key = other_element_key;

                    List<String> __this__success_copy_value = other_element_value;

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public checkURLs_result deepCopy() {
            return new checkURLs_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(String key, List<String> val) {
            if (this.success == null) {
                this.success = new HashMap<String, List<String>>();
            }
            this.success.put(key, val);
        }

        public Map<String, List<String>> getSuccess() {
            return this.success;
        }

        public checkURLs_result setSuccess(Map<String, List<String>> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<String, List<String>>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof checkURLs_result)
                return this.equals((checkURLs_result) that);
            return false;
        }

        public boolean equals(checkURLs_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(checkURLs_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("checkURLs_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class checkURLs_resultStandardSchemeFactory implements SchemeFactory {
            public checkURLs_resultStandardScheme getScheme() {
                return new checkURLs_resultStandardScheme();
            }
        }

        private static class checkURLs_resultStandardScheme extends StandardScheme<checkURLs_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, checkURLs_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map146 = iprot.readMapBegin();
                                    struct.success = new HashMap<String, List<String>>(2 * _map146.size);
                                    String _key147;
                                    List<String> _val148;
                                    for (int _i149 = 0; _i149 < _map146.size; ++_i149) {
                                        _key147 = iprot.readString();
                                        {
                                            org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                                            _val148 = new ArrayList<String>(_list150.size);
                                            String _elem151;
                                            for (int _i152 = 0; _i152 < _list150.size; ++_i152) {
                                                _elem151 = iprot.readString();
                                                _val148.add(_elem151);
                                            }
                                            iprot.readListEnd();
                                        }
                                        struct.success.put(_key147, _val148);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, checkURLs_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
                        for (Map.Entry<String, List<String>> _iter153 : struct.success.entrySet()) {
                            oprot.writeString(_iter153.getKey());
                            {
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter153.getValue().size()));
                                for (String _iter154 : _iter153.getValue()) {
                                    oprot.writeString(_iter154);
                                }
                                oprot.writeListEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkURLs_resultTupleSchemeFactory implements SchemeFactory {
            public checkURLs_resultTupleScheme getScheme() {
                return new checkURLs_resultTupleScheme();
            }
        }

        private static class checkURLs_resultTupleScheme extends TupleScheme<checkURLs_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, checkURLs_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<String, List<String>> _iter155 : struct.success.entrySet()) {
                            oprot.writeString(_iter155.getKey());
                            {
                                oprot.writeI32(_iter155.getValue().size());
                                for (String _iter156 : _iter155.getValue()) {
                                    oprot.writeString(_iter156);
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, checkURLs_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map157 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                        struct.success = new HashMap<String, List<String>>(2 * _map157.size);
                        String _key158;
                        List<String> _val159;
                        for (int _i160 = 0; _i160 < _map157.size; ++_i160) {
                            _key158 = iprot.readString();
                            {
                                org.apache.thrift.protocol.TList _list161 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                                _val159 = new ArrayList<String>(_list161.size);
                                String _elem162;
                                for (int _i163 = 0; _i163 < _list161.size; ++_i163) {
                                    _elem162 = iprot.readString();
                                    _val159.add(_elem162);
                                }
                            }
                            struct.success.put(_key158, _val159);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class parseURLs_args implements org.apache.thrift.TBase<parseURLs_args, parseURLs_args._Fields>, java.io.Serializable, Cloneable, Comparable<parseURLs_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseURLs_args");

        private static final org.apache.thrift.protocol.TField HTML_FIELD_DESC = new org.apache.thrift.protocol.TField("html", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new parseURLs_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new parseURLs_argsTupleSchemeFactory());
        }

        public String html; // required
        public String url; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(html);
            out.writeString(url);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public parseURLs_args(android.os.Parcel in) {
            this.html = in.readString();
            this.url = in.readString();
        }

        public static final android.os.Parcelable.Creator<parseURLs_args> CREATOR = new android.os.Parcelable.Creator<parseURLs_args>() {
            @Override
            public parseURLs_args[] newArray(int size) {
                return new parseURLs_args[size];
            }

            @Override
            public parseURLs_args createFromParcel(android.os.Parcel in) {
                return new parseURLs_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            HTML((short) 1, "html"),
            URL((short) 2, "url");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // HTML
                        return HTML;
                    case 2: // URL
                        return URL;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.HTML, new org.apache.thrift.meta_data.FieldMetaData("html", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseURLs_args.class, metaDataMap);
        }

        public parseURLs_args() {
        }

        public parseURLs_args(
                String html,
                String url) {
            this();
            this.html = html;
            this.url = url;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public parseURLs_args(parseURLs_args other) {
            if (other.isSetHtml()) {
                this.html = other.html;
            }
            if (other.isSetUrl()) {
                this.url = other.url;
            }
        }

        public parseURLs_args deepCopy() {
            return new parseURLs_args(this);
        }

        @Override
        public void clear() {
            this.html = null;
            this.url = null;
        }

        public String getHtml() {
            return this.html;
        }

        public parseURLs_args setHtml(String html) {
            this.html = html;
            return this;
        }

        public void unsetHtml() {
            this.html = null;
        }

        /** Returns true if field html is set (has been assigned a value) and false otherwise */
        public boolean isSetHtml() {
            return this.html != null;
        }

        public void setHtmlIsSet(boolean value) {
            if (!value) {
                this.html = null;
            }
        }

        public String getUrl() {
            return this.url;
        }

        public parseURLs_args setUrl(String url) {
            this.url = url;
            return this;
        }

        public void unsetUrl() {
            this.url = null;
        }

        /** Returns true if field url is set (has been assigned a value) and false otherwise */
        public boolean isSetUrl() {
            return this.url != null;
        }

        public void setUrlIsSet(boolean value) {
            if (!value) {
                this.url = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case HTML:
                    if (value == null) {
                        unsetHtml();
                    } else {
                        setHtml((String) value);
                    }
                    break;

                case URL:
                    if (value == null) {
                        unsetUrl();
                    } else {
                        setUrl((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case HTML:
                    return getHtml();

                case URL:
                    return getUrl();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case HTML:
                    return isSetHtml();
                case URL:
                    return isSetUrl();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof parseURLs_args)
                return this.equals((parseURLs_args) that);
            return false;
        }

        public boolean equals(parseURLs_args that) {
            if (that == null)
                return false;

            boolean this_present_html = true && this.isSetHtml();
            boolean that_present_html = true && that.isSetHtml();
            if (this_present_html || that_present_html) {
                if (!(this_present_html && that_present_html))
                    return false;
                if (!this.html.equals(that.html))
                    return false;
            }

            boolean this_present_url = true && this.isSetUrl();
            boolean that_present_url = true && that.isSetUrl();
            if (this_present_url || that_present_url) {
                if (!(this_present_url && that_present_url))
                    return false;
                if (!this.url.equals(that.url))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_html = true && (isSetHtml());
            list.add(present_html);
            if (present_html)
                list.add(html);

            boolean present_url = true && (isSetUrl());
            list.add(present_url);
            if (present_url)
                list.add(url);

            return list.hashCode();
        }

        @Override
        public int compareTo(parseURLs_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetHtml()).compareTo(other.isSetHtml());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetHtml()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.html, other.html);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUrl()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("parseURLs_args(");
            boolean first = true;

            sb.append("html:");
            if (this.html == null) {
                sb.append("null");
            } else {
                sb.append(this.html);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("url:");
            if (this.url == null) {
                sb.append("null");
            } else {
                sb.append(this.url);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class parseURLs_argsStandardSchemeFactory implements SchemeFactory {
            public parseURLs_argsStandardScheme getScheme() {
                return new parseURLs_argsStandardScheme();
            }
        }

        private static class parseURLs_argsStandardScheme extends StandardScheme<parseURLs_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, parseURLs_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // HTML
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.html = iprot.readString();
                                struct.setHtmlIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // URL
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.url = iprot.readString();
                                struct.setUrlIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, parseURLs_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.html != null) {
                    oprot.writeFieldBegin(HTML_FIELD_DESC);
                    oprot.writeString(struct.html);
                    oprot.writeFieldEnd();
                }
                if (struct.url != null) {
                    oprot.writeFieldBegin(URL_FIELD_DESC);
                    oprot.writeString(struct.url);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class parseURLs_argsTupleSchemeFactory implements SchemeFactory {
            public parseURLs_argsTupleScheme getScheme() {
                return new parseURLs_argsTupleScheme();
            }
        }

        private static class parseURLs_argsTupleScheme extends TupleScheme<parseURLs_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, parseURLs_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetHtml()) {
                    optionals.set(0);
                }
                if (struct.isSetUrl()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetHtml()) {
                    oprot.writeString(struct.html);
                }
                if (struct.isSetUrl()) {
                    oprot.writeString(struct.url);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, parseURLs_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.html = iprot.readString();
                    struct.setHtmlIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.url = iprot.readString();
                    struct.setUrlIsSet(true);
                }
            }
        }

    }

    public static class parseURLs_result implements org.apache.thrift.TBase<parseURLs_result, parseURLs_result._Fields>, java.io.Serializable, Cloneable, Comparable<parseURLs_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parseURLs_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new parseURLs_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new parseURLs_resultTupleSchemeFactory());
        }

        public Map<String, List<String>> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeMap(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public parseURLs_result(android.os.Parcel in) {
            this.success = new HashMap<String, List<String>>();
            in.readMap(this.success, parseURLs_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<parseURLs_result> CREATOR = new android.os.Parcelable.Creator<parseURLs_result>() {
            @Override
            public parseURLs_result[] newArray(int size) {
                return new parseURLs_result[size];
            }

            @Override
            public parseURLs_result createFromParcel(android.os.Parcel in) {
                return new parseURLs_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "PluginName"),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST, "LinkList"))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parseURLs_result.class, metaDataMap);
        }

        public parseURLs_result() {
        }

        public parseURLs_result(
                Map<String, List<String>> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public parseURLs_result(parseURLs_result other) {
            if (other.isSetSuccess()) {
                Map<String, List<String>> __this__success = new HashMap<String, List<String>>(other.success.size());
                for (Map.Entry<String, List<String>> other_element : other.success.entrySet()) {

                    String other_element_key = other_element.getKey();
                    List<String> other_element_value = other_element.getValue();

                    String __this__success_copy_key = other_element_key;

                    List<String> __this__success_copy_value = other_element_value;

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public parseURLs_result deepCopy() {
            return new parseURLs_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(String key, List<String> val) {
            if (this.success == null) {
                this.success = new HashMap<String, List<String>>();
            }
            this.success.put(key, val);
        }

        public Map<String, List<String>> getSuccess() {
            return this.success;
        }

        public parseURLs_result setSuccess(Map<String, List<String>> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<String, List<String>>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof parseURLs_result)
                return this.equals((parseURLs_result) that);
            return false;
        }

        public boolean equals(parseURLs_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(parseURLs_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("parseURLs_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class parseURLs_resultStandardSchemeFactory implements SchemeFactory {
            public parseURLs_resultStandardScheme getScheme() {
                return new parseURLs_resultStandardScheme();
            }
        }

        private static class parseURLs_resultStandardScheme extends StandardScheme<parseURLs_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, parseURLs_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map164 = iprot.readMapBegin();
                                    struct.success = new HashMap<String, List<String>>(2 * _map164.size);
                                    String _key165;
                                    List<String> _val166;
                                    for (int _i167 = 0; _i167 < _map164.size; ++_i167) {
                                        _key165 = iprot.readString();
                                        {
                                            org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                                            _val166 = new ArrayList<String>(_list168.size);
                                            String _elem169;
                                            for (int _i170 = 0; _i170 < _list168.size; ++_i170) {
                                                _elem169 = iprot.readString();
                                                _val166.add(_elem169);
                                            }
                                            iprot.readListEnd();
                                        }
                                        struct.success.put(_key165, _val166);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, parseURLs_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
                        for (Map.Entry<String, List<String>> _iter171 : struct.success.entrySet()) {
                            oprot.writeString(_iter171.getKey());
                            {
                                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter171.getValue().size()));
                                for (String _iter172 : _iter171.getValue()) {
                                    oprot.writeString(_iter172);
                                }
                                oprot.writeListEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class parseURLs_resultTupleSchemeFactory implements SchemeFactory {
            public parseURLs_resultTupleScheme getScheme() {
                return new parseURLs_resultTupleScheme();
            }
        }

        private static class parseURLs_resultTupleScheme extends TupleScheme<parseURLs_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, parseURLs_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<String, List<String>> _iter173 : struct.success.entrySet()) {
                            oprot.writeString(_iter173.getKey());
                            {
                                oprot.writeI32(_iter173.getValue().size());
                                for (String _iter174 : _iter173.getValue()) {
                                    oprot.writeString(_iter174);
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, parseURLs_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map175 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                        struct.success = new HashMap<String, List<String>>(2 * _map175.size);
                        String _key176;
                        List<String> _val177;
                        for (int _i178 = 0; _i178 < _map175.size; ++_i178) {
                            _key176 = iprot.readString();
                            {
                                org.apache.thrift.protocol.TList _list179 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                                _val177 = new ArrayList<String>(_list179.size);
                                String _elem180;
                                for (int _i181 = 0; _i181 < _list179.size; ++_i181) {
                                    _elem180 = iprot.readString();
                                    _val177.add(_elem180);
                                }
                            }
                            struct.success.put(_key176, _val177);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class checkOnlineStatus_args implements org.apache.thrift.TBase<checkOnlineStatus_args, checkOnlineStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkOnlineStatus_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkOnlineStatus_args");

        private static final org.apache.thrift.protocol.TField URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("urls", org.apache.thrift.protocol.TType.LIST, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new checkOnlineStatus_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new checkOnlineStatus_argsTupleSchemeFactory());
        }

        public List<String> urls; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(urls);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public checkOnlineStatus_args(android.os.Parcel in) {
            this.urls = new ArrayList<String>();
            in.readList(this.urls, checkOnlineStatus_args.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<checkOnlineStatus_args> CREATOR = new android.os.Parcelable.Creator<checkOnlineStatus_args>() {
            @Override
            public checkOnlineStatus_args[] newArray(int size) {
                return new checkOnlineStatus_args[size];
            }

            @Override
            public checkOnlineStatus_args createFromParcel(android.os.Parcel in) {
                return new checkOnlineStatus_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            URLS((short) 1, "urls");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // URLS
                        return URLS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.URLS, new org.apache.thrift.meta_data.FieldMetaData("urls", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST, "LinkList")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkOnlineStatus_args.class, metaDataMap);
        }

        public checkOnlineStatus_args() {
        }

        public checkOnlineStatus_args(
                List<String> urls) {
            this();
            this.urls = urls;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkOnlineStatus_args(checkOnlineStatus_args other) {
            if (other.isSetUrls()) {
                this.urls = other.urls;
            }
        }

        public checkOnlineStatus_args deepCopy() {
            return new checkOnlineStatus_args(this);
        }

        @Override
        public void clear() {
            this.urls = null;
        }

        public int getUrlsSize() {
            return (this.urls == null) ? 0 : this.urls.size();
        }

        public java.util.Iterator<String> getUrlsIterator() {
            return (this.urls == null) ? null : this.urls.iterator();
        }

        public void addToUrls(String elem) {
            if (this.urls == null) {
                this.urls = new ArrayList<String>();
            }
            this.urls.add(elem);
        }

        public List<String> getUrls() {
            return this.urls;
        }

        public checkOnlineStatus_args setUrls(List<String> urls) {
            this.urls = urls;
            return this;
        }

        public void unsetUrls() {
            this.urls = null;
        }

        /** Returns true if field urls is set (has been assigned a value) and false otherwise */
        public boolean isSetUrls() {
            return this.urls != null;
        }

        public void setUrlsIsSet(boolean value) {
            if (!value) {
                this.urls = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case URLS:
                    if (value == null) {
                        unsetUrls();
                    } else {
                        setUrls((List<String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case URLS:
                    return getUrls();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case URLS:
                    return isSetUrls();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof checkOnlineStatus_args)
                return this.equals((checkOnlineStatus_args) that);
            return false;
        }

        public boolean equals(checkOnlineStatus_args that) {
            if (that == null)
                return false;

            boolean this_present_urls = true && this.isSetUrls();
            boolean that_present_urls = true && that.isSetUrls();
            if (this_present_urls || that_present_urls) {
                if (!(this_present_urls && that_present_urls))
                    return false;
                if (!this.urls.equals(that.urls))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_urls = true && (isSetUrls());
            list.add(present_urls);
            if (present_urls)
                list.add(urls);

            return list.hashCode();
        }

        @Override
        public int compareTo(checkOnlineStatus_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUrls()).compareTo(other.isSetUrls());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUrls()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urls, other.urls);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("checkOnlineStatus_args(");
            boolean first = true;

            sb.append("urls:");
            if (this.urls == null) {
                sb.append("null");
            } else {
                sb.append(this.urls);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class checkOnlineStatus_argsStandardSchemeFactory implements SchemeFactory {
            public checkOnlineStatus_argsStandardScheme getScheme() {
                return new checkOnlineStatus_argsStandardScheme();
            }
        }

        private static class checkOnlineStatus_argsStandardScheme extends StandardScheme<checkOnlineStatus_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, checkOnlineStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // URLS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list182 = iprot.readListBegin();
                                    struct.urls = new ArrayList<String>(_list182.size);
                                    String _elem183;
                                    for (int _i184 = 0; _i184 < _list182.size; ++_i184) {
                                        _elem183 = iprot.readString();
                                        struct.urls.add(_elem183);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUrlsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, checkOnlineStatus_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.urls != null) {
                    oprot.writeFieldBegin(URLS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.urls.size()));
                        for (String _iter185 : struct.urls) {
                            oprot.writeString(_iter185);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkOnlineStatus_argsTupleSchemeFactory implements SchemeFactory {
            public checkOnlineStatus_argsTupleScheme getScheme() {
                return new checkOnlineStatus_argsTupleScheme();
            }
        }

        private static class checkOnlineStatus_argsTupleScheme extends TupleScheme<checkOnlineStatus_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, checkOnlineStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUrls()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUrls()) {
                    {
                        oprot.writeI32(struct.urls.size());
                        for (String _iter186 : struct.urls) {
                            oprot.writeString(_iter186);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, checkOnlineStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list187 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.urls = new ArrayList<String>(_list187.size);
                        String _elem188;
                        for (int _i189 = 0; _i189 < _list187.size; ++_i189) {
                            _elem188 = iprot.readString();
                            struct.urls.add(_elem188);
                        }
                    }
                    struct.setUrlsIsSet(true);
                }
            }
        }

    }

    public static class checkOnlineStatus_result implements org.apache.thrift.TBase<checkOnlineStatus_result, checkOnlineStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkOnlineStatus_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkOnlineStatus_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new checkOnlineStatus_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new checkOnlineStatus_resultTupleSchemeFactory());
        }

        public OnlineCheck success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeParcelable(success, flags);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public checkOnlineStatus_result(android.os.Parcel in) {
            this.success = in.readParcelable(checkOnlineStatus_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<checkOnlineStatus_result> CREATOR = new android.os.Parcelable.Creator<checkOnlineStatus_result>() {
            @Override
            public checkOnlineStatus_result[] newArray(int size) {
                return new checkOnlineStatus_result[size];
            }

            @Override
            public checkOnlineStatus_result createFromParcel(android.os.Parcel in) {
                return new checkOnlineStatus_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OnlineCheck.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkOnlineStatus_result.class, metaDataMap);
        }

        public checkOnlineStatus_result() {
        }

        public checkOnlineStatus_result(
                OnlineCheck success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkOnlineStatus_result(checkOnlineStatus_result other) {
            if (other.isSetSuccess()) {
                this.success = new OnlineCheck(other.success);
            }
        }

        public checkOnlineStatus_result deepCopy() {
            return new checkOnlineStatus_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public OnlineCheck getSuccess() {
            return this.success;
        }

        public checkOnlineStatus_result setSuccess(OnlineCheck success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((OnlineCheck) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof checkOnlineStatus_result)
                return this.equals((checkOnlineStatus_result) that);
            return false;
        }

        public boolean equals(checkOnlineStatus_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(checkOnlineStatus_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("checkOnlineStatus_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class checkOnlineStatus_resultStandardSchemeFactory implements SchemeFactory {
            public checkOnlineStatus_resultStandardScheme getScheme() {
                return new checkOnlineStatus_resultStandardScheme();
            }
        }

        private static class checkOnlineStatus_resultStandardScheme extends StandardScheme<checkOnlineStatus_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, checkOnlineStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new OnlineCheck();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, checkOnlineStatus_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkOnlineStatus_resultTupleSchemeFactory implements SchemeFactory {
            public checkOnlineStatus_resultTupleScheme getScheme() {
                return new checkOnlineStatus_resultTupleScheme();
            }
        }

        private static class checkOnlineStatus_resultTupleScheme extends TupleScheme<checkOnlineStatus_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, checkOnlineStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, checkOnlineStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new OnlineCheck();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class checkOnlineStatusContainer_args implements org.apache.thrift.TBase<checkOnlineStatusContainer_args, checkOnlineStatusContainer_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkOnlineStatusContainer_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkOnlineStatusContainer_args");

        private static final org.apache.thrift.protocol.TField URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("urls", org.apache.thrift.protocol.TType.LIST, (short) 1);
        private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new checkOnlineStatusContainer_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new checkOnlineStatusContainer_argsTupleSchemeFactory());
        }

        public List<String> urls; // required
        public String filename; // required
        public ByteBuffer data; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(urls);
            out.writeString(filename);
            out.writeInt(data != null ? 1 : 0);
            if (data != null) {
                out.writeByteArray(data.array(), data.position() + data.arrayOffset(), data.limit() - data.position());
            }
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public checkOnlineStatusContainer_args(android.os.Parcel in) {
            this.urls = new ArrayList<String>();
            in.readList(this.urls, checkOnlineStatusContainer_args.class.getClassLoader());
            this.filename = in.readString();
            if (in.readInt() == 1) {
                this.data = ByteBuffer.wrap(in.createByteArray());
            }
        }

        public static final android.os.Parcelable.Creator<checkOnlineStatusContainer_args> CREATOR = new android.os.Parcelable.Creator<checkOnlineStatusContainer_args>() {
            @Override
            public checkOnlineStatusContainer_args[] newArray(int size) {
                return new checkOnlineStatusContainer_args[size];
            }

            @Override
            public checkOnlineStatusContainer_args createFromParcel(android.os.Parcel in) {
                return new checkOnlineStatusContainer_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            URLS((short) 1, "urls"),
            FILENAME((short) 2, "filename"),
            DATA((short) 3, "data");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // URLS
                        return URLS;
                    case 2: // FILENAME
                        return FILENAME;
                    case 3: // DATA
                        return DATA;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.URLS, new org.apache.thrift.meta_data.FieldMetaData("urls", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST, "LinkList")));
            tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkOnlineStatusContainer_args.class, metaDataMap);
        }

        public checkOnlineStatusContainer_args() {
        }

        public checkOnlineStatusContainer_args(
                List<String> urls,
                String filename,
                ByteBuffer data) {
            this();
            this.urls = urls;
            this.filename = filename;
            this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkOnlineStatusContainer_args(checkOnlineStatusContainer_args other) {
            if (other.isSetUrls()) {
                this.urls = other.urls;
            }
            if (other.isSetFilename()) {
                this.filename = other.filename;
            }
            if (other.isSetData()) {
                this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
            }
        }

        public checkOnlineStatusContainer_args deepCopy() {
            return new checkOnlineStatusContainer_args(this);
        }

        @Override
        public void clear() {
            this.urls = null;
            this.filename = null;
            this.data = null;
        }

        public int getUrlsSize() {
            return (this.urls == null) ? 0 : this.urls.size();
        }

        public java.util.Iterator<String> getUrlsIterator() {
            return (this.urls == null) ? null : this.urls.iterator();
        }

        public void addToUrls(String elem) {
            if (this.urls == null) {
                this.urls = new ArrayList<String>();
            }
            this.urls.add(elem);
        }

        public List<String> getUrls() {
            return this.urls;
        }

        public checkOnlineStatusContainer_args setUrls(List<String> urls) {
            this.urls = urls;
            return this;
        }

        public void unsetUrls() {
            this.urls = null;
        }

        /** Returns true if field urls is set (has been assigned a value) and false otherwise */
        public boolean isSetUrls() {
            return this.urls != null;
        }

        public void setUrlsIsSet(boolean value) {
            if (!value) {
                this.urls = null;
            }
        }

        public String getFilename() {
            return this.filename;
        }

        public checkOnlineStatusContainer_args setFilename(String filename) {
            this.filename = filename;
            return this;
        }

        public void unsetFilename() {
            this.filename = null;
        }

        /** Returns true if field filename is set (has been assigned a value) and false otherwise */
        public boolean isSetFilename() {
            return this.filename != null;
        }

        public void setFilenameIsSet(boolean value) {
            if (!value) {
                this.filename = null;
            }
        }

        public byte[] getData() {
            setData(org.apache.thrift.TBaseHelper.rightSize(data));
            return data == null ? null : data.array();
        }

        public ByteBuffer bufferForData() {
            return org.apache.thrift.TBaseHelper.copyBinary(data);
        }

        public checkOnlineStatusContainer_args setData(byte[] data) {
            this.data = data == null ? (ByteBuffer) null : ByteBuffer.wrap(Arrays.copyOf(data, data.length));
            return this;
        }

        public checkOnlineStatusContainer_args setData(ByteBuffer data) {
            this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
            return this;
        }

        public void unsetData() {
            this.data = null;
        }

        /** Returns true if field data is set (has been assigned a value) and false otherwise */
        public boolean isSetData() {
            return this.data != null;
        }

        public void setDataIsSet(boolean value) {
            if (!value) {
                this.data = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case URLS:
                    if (value == null) {
                        unsetUrls();
                    } else {
                        setUrls((List<String>) value);
                    }
                    break;

                case FILENAME:
                    if (value == null) {
                        unsetFilename();
                    } else {
                        setFilename((String) value);
                    }
                    break;

                case DATA:
                    if (value == null) {
                        unsetData();
                    } else {
                        setData((ByteBuffer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case URLS:
                    return getUrls();

                case FILENAME:
                    return getFilename();

                case DATA:
                    return getData();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case URLS:
                    return isSetUrls();
                case FILENAME:
                    return isSetFilename();
                case DATA:
                    return isSetData();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof checkOnlineStatusContainer_args)
                return this.equals((checkOnlineStatusContainer_args) that);
            return false;
        }

        public boolean equals(checkOnlineStatusContainer_args that) {
            if (that == null)
                return false;

            boolean this_present_urls = true && this.isSetUrls();
            boolean that_present_urls = true && that.isSetUrls();
            if (this_present_urls || that_present_urls) {
                if (!(this_present_urls && that_present_urls))
                    return false;
                if (!this.urls.equals(that.urls))
                    return false;
            }

            boolean this_present_filename = true && this.isSetFilename();
            boolean that_present_filename = true && that.isSetFilename();
            if (this_present_filename || that_present_filename) {
                if (!(this_present_filename && that_present_filename))
                    return false;
                if (!this.filename.equals(that.filename))
                    return false;
            }

            boolean this_present_data = true && this.isSetData();
            boolean that_present_data = true && that.isSetData();
            if (this_present_data || that_present_data) {
                if (!(this_present_data && that_present_data))
                    return false;
                if (!this.data.equals(that.data))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_urls = true && (isSetUrls());
            list.add(present_urls);
            if (present_urls)
                list.add(urls);

            boolean present_filename = true && (isSetFilename());
            list.add(present_filename);
            if (present_filename)
                list.add(filename);

            boolean present_data = true && (isSetData());
            list.add(present_data);
            if (present_data)
                list.add(data);

            return list.hashCode();
        }

        @Override
        public int compareTo(checkOnlineStatusContainer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUrls()).compareTo(other.isSetUrls());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUrls()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.urls, other.urls);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFilename()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("checkOnlineStatusContainer_args(");
            boolean first = true;

            sb.append("urls:");
            if (this.urls == null) {
                sb.append("null");
            } else {
                sb.append(this.urls);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("filename:");
            if (this.filename == null) {
                sb.append("null");
            } else {
                sb.append(this.filename);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("data:");
            if (this.data == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.data, sb);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class checkOnlineStatusContainer_argsStandardSchemeFactory implements SchemeFactory {
            public checkOnlineStatusContainer_argsStandardScheme getScheme() {
                return new checkOnlineStatusContainer_argsStandardScheme();
            }
        }

        private static class checkOnlineStatusContainer_argsStandardScheme extends StandardScheme<checkOnlineStatusContainer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, checkOnlineStatusContainer_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // URLS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list190 = iprot.readListBegin();
                                    struct.urls = new ArrayList<String>(_list190.size);
                                    String _elem191;
                                    for (int _i192 = 0; _i192 < _list190.size; ++_i192) {
                                        _elem191 = iprot.readString();
                                        struct.urls.add(_elem191);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setUrlsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // FILENAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.filename = iprot.readString();
                                struct.setFilenameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // DATA
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.data = iprot.readBinary();
                                struct.setDataIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, checkOnlineStatusContainer_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.urls != null) {
                    oprot.writeFieldBegin(URLS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.urls.size()));
                        for (String _iter193 : struct.urls) {
                            oprot.writeString(_iter193);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.filename != null) {
                    oprot.writeFieldBegin(FILENAME_FIELD_DESC);
                    oprot.writeString(struct.filename);
                    oprot.writeFieldEnd();
                }
                if (struct.data != null) {
                    oprot.writeFieldBegin(DATA_FIELD_DESC);
                    oprot.writeBinary(struct.data);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkOnlineStatusContainer_argsTupleSchemeFactory implements SchemeFactory {
            public checkOnlineStatusContainer_argsTupleScheme getScheme() {
                return new checkOnlineStatusContainer_argsTupleScheme();
            }
        }

        private static class checkOnlineStatusContainer_argsTupleScheme extends TupleScheme<checkOnlineStatusContainer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, checkOnlineStatusContainer_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUrls()) {
                    optionals.set(0);
                }
                if (struct.isSetFilename()) {
                    optionals.set(1);
                }
                if (struct.isSetData()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetUrls()) {
                    {
                        oprot.writeI32(struct.urls.size());
                        for (String _iter194 : struct.urls) {
                            oprot.writeString(_iter194);
                        }
                    }
                }
                if (struct.isSetFilename()) {
                    oprot.writeString(struct.filename);
                }
                if (struct.isSetData()) {
                    oprot.writeBinary(struct.data);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, checkOnlineStatusContainer_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list195 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.urls = new ArrayList<String>(_list195.size);
                        String _elem196;
                        for (int _i197 = 0; _i197 < _list195.size; ++_i197) {
                            _elem196 = iprot.readString();
                            struct.urls.add(_elem196);
                        }
                    }
                    struct.setUrlsIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.filename = iprot.readString();
                    struct.setFilenameIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.data = iprot.readBinary();
                    struct.setDataIsSet(true);
                }
            }
        }

    }

    public static class checkOnlineStatusContainer_result implements org.apache.thrift.TBase<checkOnlineStatusContainer_result, checkOnlineStatusContainer_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkOnlineStatusContainer_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkOnlineStatusContainer_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new checkOnlineStatusContainer_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new checkOnlineStatusContainer_resultTupleSchemeFactory());
        }

        public OnlineCheck success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeParcelable(success, flags);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public checkOnlineStatusContainer_result(android.os.Parcel in) {
            this.success = in.readParcelable(checkOnlineStatusContainer_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<checkOnlineStatusContainer_result> CREATOR = new android.os.Parcelable.Creator<checkOnlineStatusContainer_result>() {
            @Override
            public checkOnlineStatusContainer_result[] newArray(int size) {
                return new checkOnlineStatusContainer_result[size];
            }

            @Override
            public checkOnlineStatusContainer_result createFromParcel(android.os.Parcel in) {
                return new checkOnlineStatusContainer_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OnlineCheck.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkOnlineStatusContainer_result.class, metaDataMap);
        }

        public checkOnlineStatusContainer_result() {
        }

        public checkOnlineStatusContainer_result(
                OnlineCheck success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkOnlineStatusContainer_result(checkOnlineStatusContainer_result other) {
            if (other.isSetSuccess()) {
                this.success = new OnlineCheck(other.success);
            }
        }

        public checkOnlineStatusContainer_result deepCopy() {
            return new checkOnlineStatusContainer_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public OnlineCheck getSuccess() {
            return this.success;
        }

        public checkOnlineStatusContainer_result setSuccess(OnlineCheck success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((OnlineCheck) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof checkOnlineStatusContainer_result)
                return this.equals((checkOnlineStatusContainer_result) that);
            return false;
        }

        public boolean equals(checkOnlineStatusContainer_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(checkOnlineStatusContainer_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("checkOnlineStatusContainer_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class checkOnlineStatusContainer_resultStandardSchemeFactory implements SchemeFactory {
            public checkOnlineStatusContainer_resultStandardScheme getScheme() {
                return new checkOnlineStatusContainer_resultStandardScheme();
            }
        }

        private static class checkOnlineStatusContainer_resultStandardScheme extends StandardScheme<checkOnlineStatusContainer_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, checkOnlineStatusContainer_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new OnlineCheck();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, checkOnlineStatusContainer_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkOnlineStatusContainer_resultTupleSchemeFactory implements SchemeFactory {
            public checkOnlineStatusContainer_resultTupleScheme getScheme() {
                return new checkOnlineStatusContainer_resultTupleScheme();
            }
        }

        private static class checkOnlineStatusContainer_resultTupleScheme extends TupleScheme<checkOnlineStatusContainer_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, checkOnlineStatusContainer_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, checkOnlineStatusContainer_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new OnlineCheck();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class pollResults_args implements org.apache.thrift.TBase<pollResults_args, pollResults_args._Fields>, java.io.Serializable, Cloneable, Comparable<pollResults_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pollResults_args");

        private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new pollResults_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new pollResults_argsTupleSchemeFactory());
        }

        public int rid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(rid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public pollResults_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.rid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<pollResults_args> CREATOR = new android.os.Parcelable.Creator<pollResults_args>() {
            @Override
            public pollResults_args[] newArray(int size) {
                return new pollResults_args[size];
            }

            @Override
            public pollResults_args createFromParcel(android.os.Parcel in) {
                return new pollResults_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            RID((short) 1, "rid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // RID
                        return RID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __RID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "ResultID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pollResults_args.class, metaDataMap);
        }

        public pollResults_args() {
        }

        public pollResults_args(
                int rid) {
            this();
            this.rid = rid;
            setRidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pollResults_args(pollResults_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.rid = other.rid;
        }

        public pollResults_args deepCopy() {
            return new pollResults_args(this);
        }

        @Override
        public void clear() {
            setRidIsSet(false);
            this.rid = 0;
        }

        public int getRid() {
            return this.rid;
        }

        public pollResults_args setRid(int rid) {
            this.rid = rid;
            setRidIsSet(true);
            return this;
        }

        public void unsetRid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RID_ISSET_ID);
        }

        /** Returns true if field rid is set (has been assigned a value) and false otherwise */
        public boolean isSetRid() {
            return EncodingUtils.testBit(__isset_bitfield, __RID_ISSET_ID);
        }

        public void setRidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case RID:
                    if (value == null) {
                        unsetRid();
                    } else {
                        setRid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case RID:
                    return getRid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case RID:
                    return isSetRid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof pollResults_args)
                return this.equals((pollResults_args) that);
            return false;
        }

        public boolean equals(pollResults_args that) {
            if (that == null)
                return false;

            boolean this_present_rid = true;
            boolean that_present_rid = true;
            if (this_present_rid || that_present_rid) {
                if (!(this_present_rid && that_present_rid))
                    return false;
                if (this.rid != that.rid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_rid = true;
            list.add(present_rid);
            if (present_rid)
                list.add(rid);

            return list.hashCode();
        }

        @Override
        public int compareTo(pollResults_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetRid()).compareTo(other.isSetRid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, other.rid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("pollResults_args(");
            boolean first = true;

            sb.append("rid:");
            sb.append(this.rid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class pollResults_argsStandardSchemeFactory implements SchemeFactory {
            public pollResults_argsStandardScheme getScheme() {
                return new pollResults_argsStandardScheme();
            }
        }

        private static class pollResults_argsStandardScheme extends StandardScheme<pollResults_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, pollResults_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // RID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.rid = iprot.readI32();
                                struct.setRidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, pollResults_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(RID_FIELD_DESC);
                oprot.writeI32(struct.rid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class pollResults_argsTupleSchemeFactory implements SchemeFactory {
            public pollResults_argsTupleScheme getScheme() {
                return new pollResults_argsTupleScheme();
            }
        }

        private static class pollResults_argsTupleScheme extends TupleScheme<pollResults_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, pollResults_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRid()) {
                    oprot.writeI32(struct.rid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, pollResults_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.rid = iprot.readI32();
                    struct.setRidIsSet(true);
                }
            }
        }

    }

    public static class pollResults_result implements org.apache.thrift.TBase<pollResults_result, pollResults_result._Fields>, java.io.Serializable, Cloneable, Comparable<pollResults_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pollResults_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new pollResults_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new pollResults_resultTupleSchemeFactory());
        }

        public OnlineCheck success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeParcelable(success, flags);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public pollResults_result(android.os.Parcel in) {
            this.success = in.readParcelable(pollResults_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<pollResults_result> CREATOR = new android.os.Parcelable.Creator<pollResults_result>() {
            @Override
            public pollResults_result[] newArray(int size) {
                return new pollResults_result[size];
            }

            @Override
            public pollResults_result createFromParcel(android.os.Parcel in) {
                return new pollResults_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OnlineCheck.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pollResults_result.class, metaDataMap);
        }

        public pollResults_result() {
        }

        public pollResults_result(
                OnlineCheck success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pollResults_result(pollResults_result other) {
            if (other.isSetSuccess()) {
                this.success = new OnlineCheck(other.success);
            }
        }

        public pollResults_result deepCopy() {
            return new pollResults_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public OnlineCheck getSuccess() {
            return this.success;
        }

        public pollResults_result setSuccess(OnlineCheck success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((OnlineCheck) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof pollResults_result)
                return this.equals((pollResults_result) that);
            return false;
        }

        public boolean equals(pollResults_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(pollResults_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("pollResults_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class pollResults_resultStandardSchemeFactory implements SchemeFactory {
            public pollResults_resultStandardScheme getScheme() {
                return new pollResults_resultStandardScheme();
            }
        }

        private static class pollResults_resultStandardScheme extends StandardScheme<pollResults_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, pollResults_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new OnlineCheck();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, pollResults_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class pollResults_resultTupleSchemeFactory implements SchemeFactory {
            public pollResults_resultTupleScheme getScheme() {
                return new pollResults_resultTupleScheme();
            }
        }

        private static class pollResults_resultTupleScheme extends TupleScheme<pollResults_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, pollResults_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, pollResults_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new OnlineCheck();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class statusDownloads_args implements org.apache.thrift.TBase<statusDownloads_args, statusDownloads_args._Fields>, java.io.Serializable, Cloneable, Comparable<statusDownloads_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statusDownloads_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new statusDownloads_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new statusDownloads_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public statusDownloads_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<statusDownloads_args> CREATOR = new android.os.Parcelable.Creator<statusDownloads_args>() {
            @Override
            public statusDownloads_args[] newArray(int size) {
                return new statusDownloads_args[size];
            }

            @Override
            public statusDownloads_args createFromParcel(android.os.Parcel in) {
                return new statusDownloads_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statusDownloads_args.class, metaDataMap);
        }

        public statusDownloads_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public statusDownloads_args(statusDownloads_args other) {
        }

        public statusDownloads_args deepCopy() {
            return new statusDownloads_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof statusDownloads_args)
                return this.equals((statusDownloads_args) that);
            return false;
        }

        public boolean equals(statusDownloads_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(statusDownloads_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("statusDownloads_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class statusDownloads_argsStandardSchemeFactory implements SchemeFactory {
            public statusDownloads_argsStandardScheme getScheme() {
                return new statusDownloads_argsStandardScheme();
            }
        }

        private static class statusDownloads_argsStandardScheme extends StandardScheme<statusDownloads_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, statusDownloads_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, statusDownloads_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class statusDownloads_argsTupleSchemeFactory implements SchemeFactory {
            public statusDownloads_argsTupleScheme getScheme() {
                return new statusDownloads_argsTupleScheme();
            }
        }

        private static class statusDownloads_argsTupleScheme extends TupleScheme<statusDownloads_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, statusDownloads_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, statusDownloads_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class statusDownloads_result implements org.apache.thrift.TBase<statusDownloads_result, statusDownloads_result._Fields>, java.io.Serializable, Cloneable, Comparable<statusDownloads_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("statusDownloads_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new statusDownloads_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new statusDownloads_resultTupleSchemeFactory());
        }

        public List<DownloadInfo> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeTypedList(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public statusDownloads_result(android.os.Parcel in) {
            this.success = new ArrayList<DownloadInfo>();
            in.readTypedList(this.success, DownloadInfo.CREATOR);
        }

        public static final android.os.Parcelable.Creator<statusDownloads_result> CREATOR = new android.os.Parcelable.Creator<statusDownloads_result>() {
            @Override
            public statusDownloads_result[] newArray(int size) {
                return new statusDownloads_result[size];
            }

            @Override
            public statusDownloads_result createFromParcel(android.os.Parcel in) {
                return new statusDownloads_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DownloadInfo.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(statusDownloads_result.class, metaDataMap);
        }

        public statusDownloads_result() {
        }

        public statusDownloads_result(
                List<DownloadInfo> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public statusDownloads_result(statusDownloads_result other) {
            if (other.isSetSuccess()) {
                List<DownloadInfo> __this__success = new ArrayList<DownloadInfo>(other.success.size());
                for (DownloadInfo other_element : other.success) {
                    __this__success.add(new DownloadInfo(other_element));
                }
                this.success = __this__success;
            }
        }

        public statusDownloads_result deepCopy() {
            return new statusDownloads_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<DownloadInfo> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(DownloadInfo elem) {
            if (this.success == null) {
                this.success = new ArrayList<DownloadInfo>();
            }
            this.success.add(elem);
        }

        public List<DownloadInfo> getSuccess() {
            return this.success;
        }

        public statusDownloads_result setSuccess(List<DownloadInfo> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<DownloadInfo>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof statusDownloads_result)
                return this.equals((statusDownloads_result) that);
            return false;
        }

        public boolean equals(statusDownloads_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(statusDownloads_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("statusDownloads_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class statusDownloads_resultStandardSchemeFactory implements SchemeFactory {
            public statusDownloads_resultStandardScheme getScheme() {
                return new statusDownloads_resultStandardScheme();
            }
        }

        private static class statusDownloads_resultStandardScheme extends StandardScheme<statusDownloads_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, statusDownloads_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list198 = iprot.readListBegin();
                                    struct.success = new ArrayList<DownloadInfo>(_list198.size);
                                    DownloadInfo _elem199;
                                    for (int _i200 = 0; _i200 < _list198.size; ++_i200) {
                                        _elem199 = new DownloadInfo();
                                        _elem199.read(iprot);
                                        struct.success.add(_elem199);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, statusDownloads_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (DownloadInfo _iter201 : struct.success) {
                            _iter201.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class statusDownloads_resultTupleSchemeFactory implements SchemeFactory {
            public statusDownloads_resultTupleScheme getScheme() {
                return new statusDownloads_resultTupleScheme();
            }
        }

        private static class statusDownloads_resultTupleScheme extends TupleScheme<statusDownloads_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, statusDownloads_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (DownloadInfo _iter202 : struct.success) {
                            _iter202.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, statusDownloads_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list203 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<DownloadInfo>(_list203.size);
                        DownloadInfo _elem204;
                        for (int _i205 = 0; _i205 < _list203.size; ++_i205) {
                            _elem204 = new DownloadInfo();
                            _elem204.read(iprot);
                            struct.success.add(_elem204);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getPackageData_args implements org.apache.thrift.TBase<getPackageData_args, getPackageData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageData_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageData_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getPackageData_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPackageData_argsTupleSchemeFactory());
        }

        public int pid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(pid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getPackageData_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.pid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<getPackageData_args> CREATOR = new android.os.Parcelable.Creator<getPackageData_args>() {
            @Override
            public getPackageData_args[] newArray(int size) {
                return new getPackageData_args[size];
            }

            @Override
            public getPackageData_args createFromParcel(android.os.Parcel in) {
                return new getPackageData_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short) 1, "pid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PID
                        return PID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageData_args.class, metaDataMap);
        }

        public getPackageData_args() {
        }

        public getPackageData_args(
                int pid) {
            this();
            this.pid = pid;
            setPidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPackageData_args(getPackageData_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
        }

        public getPackageData_args deepCopy() {
            return new getPackageData_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public getPackageData_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPackageData_args)
                return this.equals((getPackageData_args) that);
            return false;
        }

        public boolean equals(getPackageData_args that) {
            if (that == null)
                return false;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPackageData_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPackageData_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPackageData_argsStandardSchemeFactory implements SchemeFactory {
            public getPackageData_argsStandardScheme getScheme() {
                return new getPackageData_argsStandardScheme();
            }
        }

        private static class getPackageData_argsStandardScheme extends StandardScheme<getPackageData_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageData_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageData_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPackageData_argsTupleSchemeFactory implements SchemeFactory {
            public getPackageData_argsTupleScheme getScheme() {
                return new getPackageData_argsTupleScheme();
            }
        }

        private static class getPackageData_argsTupleScheme extends TupleScheme<getPackageData_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPackageData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPackageData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
            }
        }

    }

    public static class getPackageData_result implements org.apache.thrift.TBase<getPackageData_result, getPackageData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageData_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageData_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getPackageData_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPackageData_resultTupleSchemeFactory());
        }

        public PackageData success; // required
        public PackageDoesNotExists e; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeParcelable(success, flags);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getPackageData_result(android.os.Parcel in) {
            this.success = in.readParcelable(getPackageData_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getPackageData_result> CREATOR = new android.os.Parcelable.Creator<getPackageData_result>() {
            @Override
            public getPackageData_result[] newArray(int size) {
                return new getPackageData_result[size];
            }

            @Override
            public getPackageData_result createFromParcel(android.os.Parcel in) {
                return new getPackageData_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            E((short) 1, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PackageData.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageData_result.class, metaDataMap);
        }

        public getPackageData_result() {
        }

        public getPackageData_result(
                PackageData success,
                PackageDoesNotExists e) {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPackageData_result(getPackageData_result other) {
            if (other.isSetSuccess()) {
                this.success = new PackageData(other.success);
            }
            if (other.isSetE()) {
                this.e = new PackageDoesNotExists(other.e);
            }
        }

        public getPackageData_result deepCopy() {
            return new getPackageData_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public PackageData getSuccess() {
            return this.success;
        }

        public getPackageData_result setSuccess(PackageData success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public PackageDoesNotExists getE() {
            return this.e;
        }

        public getPackageData_result setE(PackageDoesNotExists e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((PackageData) value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((PackageDoesNotExists) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPackageData_result)
                return this.equals((getPackageData_result) that);
            return false;
        }

        public boolean equals(getPackageData_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_e = true && (isSetE());
            list.add(present_e);
            if (present_e)
                list.add(e);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPackageData_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPackageData_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPackageData_resultStandardSchemeFactory implements SchemeFactory {
            public getPackageData_resultStandardScheme getScheme() {
                return new getPackageData_resultStandardScheme();
            }
        }

        private static class getPackageData_resultStandardScheme extends StandardScheme<getPackageData_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageData_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new PackageData();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new PackageDoesNotExists();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageData_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPackageData_resultTupleSchemeFactory implements SchemeFactory {
            public getPackageData_resultTupleScheme getScheme() {
                return new getPackageData_resultTupleScheme();
            }
        }

        private static class getPackageData_resultTupleScheme extends TupleScheme<getPackageData_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPackageData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPackageData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new PackageData();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new PackageDoesNotExists();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

    public static class getPackageInfo_args implements org.apache.thrift.TBase<getPackageInfo_args, getPackageInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageInfo_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageInfo_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getPackageInfo_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPackageInfo_argsTupleSchemeFactory());
        }

        public int pid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(pid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getPackageInfo_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.pid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<getPackageInfo_args> CREATOR = new android.os.Parcelable.Creator<getPackageInfo_args>() {
            @Override
            public getPackageInfo_args[] newArray(int size) {
                return new getPackageInfo_args[size];
            }

            @Override
            public getPackageInfo_args createFromParcel(android.os.Parcel in) {
                return new getPackageInfo_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short) 1, "pid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PID
                        return PID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageInfo_args.class, metaDataMap);
        }

        public getPackageInfo_args() {
        }

        public getPackageInfo_args(
                int pid) {
            this();
            this.pid = pid;
            setPidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPackageInfo_args(getPackageInfo_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
        }

        public getPackageInfo_args deepCopy() {
            return new getPackageInfo_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public getPackageInfo_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPackageInfo_args)
                return this.equals((getPackageInfo_args) that);
            return false;
        }

        public boolean equals(getPackageInfo_args that) {
            if (that == null)
                return false;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPackageInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPackageInfo_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPackageInfo_argsStandardSchemeFactory implements SchemeFactory {
            public getPackageInfo_argsStandardScheme getScheme() {
                return new getPackageInfo_argsStandardScheme();
            }
        }

        private static class getPackageInfo_argsStandardScheme extends StandardScheme<getPackageInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPackageInfo_argsTupleSchemeFactory implements SchemeFactory {
            public getPackageInfo_argsTupleScheme getScheme() {
                return new getPackageInfo_argsTupleScheme();
            }
        }

        private static class getPackageInfo_argsTupleScheme extends TupleScheme<getPackageInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPackageInfo_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPackageInfo_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
            }
        }

    }

    public static class getPackageInfo_result implements org.apache.thrift.TBase<getPackageInfo_result, getPackageInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageInfo_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getPackageInfo_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPackageInfo_resultTupleSchemeFactory());
        }

        public PackageData success; // required
        public PackageDoesNotExists e; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeParcelable(success, flags);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getPackageInfo_result(android.os.Parcel in) {
            this.success = in.readParcelable(getPackageInfo_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getPackageInfo_result> CREATOR = new android.os.Parcelable.Creator<getPackageInfo_result>() {
            @Override
            public getPackageInfo_result[] newArray(int size) {
                return new getPackageInfo_result[size];
            }

            @Override
            public getPackageInfo_result createFromParcel(android.os.Parcel in) {
                return new getPackageInfo_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            E((short) 1, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PackageData.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageInfo_result.class, metaDataMap);
        }

        public getPackageInfo_result() {
        }

        public getPackageInfo_result(
                PackageData success,
                PackageDoesNotExists e) {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPackageInfo_result(getPackageInfo_result other) {
            if (other.isSetSuccess()) {
                this.success = new PackageData(other.success);
            }
            if (other.isSetE()) {
                this.e = new PackageDoesNotExists(other.e);
            }
        }

        public getPackageInfo_result deepCopy() {
            return new getPackageInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public PackageData getSuccess() {
            return this.success;
        }

        public getPackageInfo_result setSuccess(PackageData success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public PackageDoesNotExists getE() {
            return this.e;
        }

        public getPackageInfo_result setE(PackageDoesNotExists e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((PackageData) value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((PackageDoesNotExists) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPackageInfo_result)
                return this.equals((getPackageInfo_result) that);
            return false;
        }

        public boolean equals(getPackageInfo_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_e = true && (isSetE());
            list.add(present_e);
            if (present_e)
                list.add(e);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPackageInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPackageInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPackageInfo_resultStandardSchemeFactory implements SchemeFactory {
            public getPackageInfo_resultStandardScheme getScheme() {
                return new getPackageInfo_resultStandardScheme();
            }
        }

        private static class getPackageInfo_resultStandardScheme extends StandardScheme<getPackageInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new PackageData();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new PackageDoesNotExists();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPackageInfo_resultTupleSchemeFactory implements SchemeFactory {
            public getPackageInfo_resultTupleScheme getScheme() {
                return new getPackageInfo_resultTupleScheme();
            }
        }

        private static class getPackageInfo_resultTupleScheme extends TupleScheme<getPackageInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPackageInfo_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPackageInfo_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new PackageData();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new PackageDoesNotExists();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

    public static class getFileData_args implements org.apache.thrift.TBase<getFileData_args, getFileData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFileData_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileData_args");

        private static final org.apache.thrift.protocol.TField FID_FIELD_DESC = new org.apache.thrift.protocol.TField("fid", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getFileData_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getFileData_argsTupleSchemeFactory());
        }

        public int fid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(fid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getFileData_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.fid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<getFileData_args> CREATOR = new android.os.Parcelable.Creator<getFileData_args>() {
            @Override
            public getFileData_args[] newArray(int size) {
                return new getFileData_args[size];
            }

            @Override
            public getFileData_args createFromParcel(android.os.Parcel in) {
                return new getFileData_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FID((short) 1, "fid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // FID
                        return FID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __FID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FID, new org.apache.thrift.meta_data.FieldMetaData("fid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "FileID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileData_args.class, metaDataMap);
        }

        public getFileData_args() {
        }

        public getFileData_args(
                int fid) {
            this();
            this.fid = fid;
            setFidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFileData_args(getFileData_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.fid = other.fid;
        }

        public getFileData_args deepCopy() {
            return new getFileData_args(this);
        }

        @Override
        public void clear() {
            setFidIsSet(false);
            this.fid = 0;
        }

        public int getFid() {
            return this.fid;
        }

        public getFileData_args setFid(int fid) {
            this.fid = fid;
            setFidIsSet(true);
            return this;
        }

        public void unsetFid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FID_ISSET_ID);
        }

        /** Returns true if field fid is set (has been assigned a value) and false otherwise */
        public boolean isSetFid() {
            return EncodingUtils.testBit(__isset_bitfield, __FID_ISSET_ID);
        }

        public void setFidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case FID:
                    if (value == null) {
                        unsetFid();
                    } else {
                        setFid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case FID:
                    return getFid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case FID:
                    return isSetFid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getFileData_args)
                return this.equals((getFileData_args) that);
            return false;
        }

        public boolean equals(getFileData_args that) {
            if (that == null)
                return false;

            boolean this_present_fid = true;
            boolean that_present_fid = true;
            if (this_present_fid || that_present_fid) {
                if (!(this_present_fid && that_present_fid))
                    return false;
                if (this.fid != that.fid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_fid = true;
            list.add(present_fid);
            if (present_fid)
                list.add(fid);

            return list.hashCode();
        }

        @Override
        public int compareTo(getFileData_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetFid()).compareTo(other.isSetFid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fid, other.fid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getFileData_args(");
            boolean first = true;

            sb.append("fid:");
            sb.append(this.fid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getFileData_argsStandardSchemeFactory implements SchemeFactory {
            public getFileData_argsStandardScheme getScheme() {
                return new getFileData_argsStandardScheme();
            }
        }

        private static class getFileData_argsStandardScheme extends StandardScheme<getFileData_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFileData_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // FID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.fid = iprot.readI32();
                                struct.setFidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFileData_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(FID_FIELD_DESC);
                oprot.writeI32(struct.fid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFileData_argsTupleSchemeFactory implements SchemeFactory {
            public getFileData_argsTupleScheme getScheme() {
                return new getFileData_argsTupleScheme();
            }
        }

        private static class getFileData_argsTupleScheme extends TupleScheme<getFileData_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFileData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetFid()) {
                    oprot.writeI32(struct.fid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFileData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.fid = iprot.readI32();
                    struct.setFidIsSet(true);
                }
            }
        }

    }

    public static class getFileData_result implements org.apache.thrift.TBase<getFileData_result, getFileData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFileData_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileData_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getFileData_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getFileData_resultTupleSchemeFactory());
        }

        public FileData success; // required
        public FileDoesNotExists e; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeParcelable(success, flags);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getFileData_result(android.os.Parcel in) {
            this.success = in.readParcelable(getFileData_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getFileData_result> CREATOR = new android.os.Parcelable.Creator<getFileData_result>() {
            @Override
            public getFileData_result[] newArray(int size) {
                return new getFileData_result[size];
            }

            @Override
            public getFileData_result createFromParcel(android.os.Parcel in) {
                return new getFileData_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            E((short) 1, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileData.class)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileData_result.class, metaDataMap);
        }

        public getFileData_result() {
        }

        public getFileData_result(
                FileData success,
                FileDoesNotExists e) {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFileData_result(getFileData_result other) {
            if (other.isSetSuccess()) {
                this.success = new FileData(other.success);
            }
            if (other.isSetE()) {
                this.e = new FileDoesNotExists(other.e);
            }
        }

        public getFileData_result deepCopy() {
            return new getFileData_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public FileData getSuccess() {
            return this.success;
        }

        public getFileData_result setSuccess(FileData success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public FileDoesNotExists getE() {
            return this.e;
        }

        public getFileData_result setE(FileDoesNotExists e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((FileData) value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((FileDoesNotExists) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case E:
                    return getE();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case E:
                    return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getFileData_result)
                return this.equals((getFileData_result) that);
            return false;
        }

        public boolean equals(getFileData_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_e = true && (isSetE());
            list.add(present_e);
            if (present_e)
                list.add(e);

            return list.hashCode();
        }

        @Override
        public int compareTo(getFileData_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getFileData_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getFileData_resultStandardSchemeFactory implements SchemeFactory {
            public getFileData_resultStandardScheme getScheme() {
                return new getFileData_resultStandardScheme();
            }
        }

        private static class getFileData_resultStandardScheme extends StandardScheme<getFileData_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFileData_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new FileData();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new FileDoesNotExists();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFileData_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFileData_resultTupleSchemeFactory implements SchemeFactory {
            public getFileData_resultTupleScheme getScheme() {
                return new getFileData_resultTupleScheme();
            }
        }

        private static class getFileData_resultTupleScheme extends TupleScheme<getFileData_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFileData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFileData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new FileData();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new FileDoesNotExists();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

    public static class getQueue_args implements org.apache.thrift.TBase<getQueue_args, getQueue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQueue_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQueue_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getQueue_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getQueue_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getQueue_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<getQueue_args> CREATOR = new android.os.Parcelable.Creator<getQueue_args>() {
            @Override
            public getQueue_args[] newArray(int size) {
                return new getQueue_args[size];
            }

            @Override
            public getQueue_args createFromParcel(android.os.Parcel in) {
                return new getQueue_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQueue_args.class, metaDataMap);
        }

        public getQueue_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getQueue_args(getQueue_args other) {
        }

        public getQueue_args deepCopy() {
            return new getQueue_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getQueue_args)
                return this.equals((getQueue_args) that);
            return false;
        }

        public boolean equals(getQueue_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getQueue_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getQueue_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getQueue_argsStandardSchemeFactory implements SchemeFactory {
            public getQueue_argsStandardScheme getScheme() {
                return new getQueue_argsStandardScheme();
            }
        }

        private static class getQueue_argsStandardScheme extends StandardScheme<getQueue_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getQueue_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getQueue_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getQueue_argsTupleSchemeFactory implements SchemeFactory {
            public getQueue_argsTupleScheme getScheme() {
                return new getQueue_argsTupleScheme();
            }
        }

        private static class getQueue_argsTupleScheme extends TupleScheme<getQueue_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getQueue_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getQueue_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getQueue_result implements org.apache.thrift.TBase<getQueue_result, getQueue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQueue_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQueue_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getQueue_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getQueue_resultTupleSchemeFactory());
        }

        public List<PackageData> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeTypedList(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getQueue_result(android.os.Parcel in) {
            this.success = new ArrayList<PackageData>();
            in.readTypedList(this.success, PackageData.CREATOR);
        }

        public static final android.os.Parcelable.Creator<getQueue_result> CREATOR = new android.os.Parcelable.Creator<getQueue_result>() {
            @Override
            public getQueue_result[] newArray(int size) {
                return new getQueue_result[size];
            }

            @Override
            public getQueue_result createFromParcel(android.os.Parcel in) {
                return new getQueue_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PackageData.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQueue_result.class, metaDataMap);
        }

        public getQueue_result() {
        }

        public getQueue_result(
                List<PackageData> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getQueue_result(getQueue_result other) {
            if (other.isSetSuccess()) {
                List<PackageData> __this__success = new ArrayList<PackageData>(other.success.size());
                for (PackageData other_element : other.success) {
                    __this__success.add(new PackageData(other_element));
                }
                this.success = __this__success;
            }
        }

        public getQueue_result deepCopy() {
            return new getQueue_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<PackageData> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(PackageData elem) {
            if (this.success == null) {
                this.success = new ArrayList<PackageData>();
            }
            this.success.add(elem);
        }

        public List<PackageData> getSuccess() {
            return this.success;
        }

        public getQueue_result setSuccess(List<PackageData> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<PackageData>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getQueue_result)
                return this.equals((getQueue_result) that);
            return false;
        }

        public boolean equals(getQueue_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getQueue_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getQueue_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getQueue_resultStandardSchemeFactory implements SchemeFactory {
            public getQueue_resultStandardScheme getScheme() {
                return new getQueue_resultStandardScheme();
            }
        }

        private static class getQueue_resultStandardScheme extends StandardScheme<getQueue_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getQueue_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list206 = iprot.readListBegin();
                                    struct.success = new ArrayList<PackageData>(_list206.size);
                                    PackageData _elem207;
                                    for (int _i208 = 0; _i208 < _list206.size; ++_i208) {
                                        _elem207 = new PackageData();
                                        _elem207.read(iprot);
                                        struct.success.add(_elem207);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getQueue_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (PackageData _iter209 : struct.success) {
                            _iter209.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getQueue_resultTupleSchemeFactory implements SchemeFactory {
            public getQueue_resultTupleScheme getScheme() {
                return new getQueue_resultTupleScheme();
            }
        }

        private static class getQueue_resultTupleScheme extends TupleScheme<getQueue_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getQueue_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (PackageData _iter210 : struct.success) {
                            _iter210.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getQueue_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list211 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<PackageData>(_list211.size);
                        PackageData _elem212;
                        for (int _i213 = 0; _i213 < _list211.size; ++_i213) {
                            _elem212 = new PackageData();
                            _elem212.read(iprot);
                            struct.success.add(_elem212);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getCollector_args implements org.apache.thrift.TBase<getCollector_args, getCollector_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollector_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollector_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getCollector_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getCollector_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getCollector_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<getCollector_args> CREATOR = new android.os.Parcelable.Creator<getCollector_args>() {
            @Override
            public getCollector_args[] newArray(int size) {
                return new getCollector_args[size];
            }

            @Override
            public getCollector_args createFromParcel(android.os.Parcel in) {
                return new getCollector_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollector_args.class, metaDataMap);
        }

        public getCollector_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCollector_args(getCollector_args other) {
        }

        public getCollector_args deepCopy() {
            return new getCollector_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCollector_args)
                return this.equals((getCollector_args) that);
            return false;
        }

        public boolean equals(getCollector_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getCollector_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCollector_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCollector_argsStandardSchemeFactory implements SchemeFactory {
            public getCollector_argsStandardScheme getScheme() {
                return new getCollector_argsStandardScheme();
            }
        }

        private static class getCollector_argsStandardScheme extends StandardScheme<getCollector_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCollector_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCollector_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCollector_argsTupleSchemeFactory implements SchemeFactory {
            public getCollector_argsTupleScheme getScheme() {
                return new getCollector_argsTupleScheme();
            }
        }

        private static class getCollector_argsTupleScheme extends TupleScheme<getCollector_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCollector_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCollector_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getCollector_result implements org.apache.thrift.TBase<getCollector_result, getCollector_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollector_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollector_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getCollector_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getCollector_resultTupleSchemeFactory());
        }

        public List<PackageData> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeTypedList(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getCollector_result(android.os.Parcel in) {
            this.success = new ArrayList<PackageData>();
            in.readTypedList(this.success, PackageData.CREATOR);
        }

        public static final android.os.Parcelable.Creator<getCollector_result> CREATOR = new android.os.Parcelable.Creator<getCollector_result>() {
            @Override
            public getCollector_result[] newArray(int size) {
                return new getCollector_result[size];
            }

            @Override
            public getCollector_result createFromParcel(android.os.Parcel in) {
                return new getCollector_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PackageData.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollector_result.class, metaDataMap);
        }

        public getCollector_result() {
        }

        public getCollector_result(
                List<PackageData> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCollector_result(getCollector_result other) {
            if (other.isSetSuccess()) {
                List<PackageData> __this__success = new ArrayList<PackageData>(other.success.size());
                for (PackageData other_element : other.success) {
                    __this__success.add(new PackageData(other_element));
                }
                this.success = __this__success;
            }
        }

        public getCollector_result deepCopy() {
            return new getCollector_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<PackageData> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(PackageData elem) {
            if (this.success == null) {
                this.success = new ArrayList<PackageData>();
            }
            this.success.add(elem);
        }

        public List<PackageData> getSuccess() {
            return this.success;
        }

        public getCollector_result setSuccess(List<PackageData> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<PackageData>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCollector_result)
                return this.equals((getCollector_result) that);
            return false;
        }

        public boolean equals(getCollector_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getCollector_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCollector_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCollector_resultStandardSchemeFactory implements SchemeFactory {
            public getCollector_resultStandardScheme getScheme() {
                return new getCollector_resultStandardScheme();
            }
        }

        private static class getCollector_resultStandardScheme extends StandardScheme<getCollector_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCollector_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                                    struct.success = new ArrayList<PackageData>(_list214.size);
                                    PackageData _elem215;
                                    for (int _i216 = 0; _i216 < _list214.size; ++_i216) {
                                        _elem215 = new PackageData();
                                        _elem215.read(iprot);
                                        struct.success.add(_elem215);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCollector_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (PackageData _iter217 : struct.success) {
                            _iter217.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCollector_resultTupleSchemeFactory implements SchemeFactory {
            public getCollector_resultTupleScheme getScheme() {
                return new getCollector_resultTupleScheme();
            }
        }

        private static class getCollector_resultTupleScheme extends TupleScheme<getCollector_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCollector_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (PackageData _iter218 : struct.success) {
                            _iter218.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCollector_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list219 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<PackageData>(_list219.size);
                        PackageData _elem220;
                        for (int _i221 = 0; _i221 < _list219.size; ++_i221) {
                            _elem220 = new PackageData();
                            _elem220.read(iprot);
                            struct.success.add(_elem220);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getQueueData_args implements org.apache.thrift.TBase<getQueueData_args, getQueueData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQueueData_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQueueData_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getQueueData_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getQueueData_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getQueueData_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<getQueueData_args> CREATOR = new android.os.Parcelable.Creator<getQueueData_args>() {
            @Override
            public getQueueData_args[] newArray(int size) {
                return new getQueueData_args[size];
            }

            @Override
            public getQueueData_args createFromParcel(android.os.Parcel in) {
                return new getQueueData_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQueueData_args.class, metaDataMap);
        }

        public getQueueData_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getQueueData_args(getQueueData_args other) {
        }

        public getQueueData_args deepCopy() {
            return new getQueueData_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getQueueData_args)
                return this.equals((getQueueData_args) that);
            return false;
        }

        public boolean equals(getQueueData_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getQueueData_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getQueueData_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getQueueData_argsStandardSchemeFactory implements SchemeFactory {
            public getQueueData_argsStandardScheme getScheme() {
                return new getQueueData_argsStandardScheme();
            }
        }

        private static class getQueueData_argsStandardScheme extends StandardScheme<getQueueData_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getQueueData_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getQueueData_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getQueueData_argsTupleSchemeFactory implements SchemeFactory {
            public getQueueData_argsTupleScheme getScheme() {
                return new getQueueData_argsTupleScheme();
            }
        }

        private static class getQueueData_argsTupleScheme extends TupleScheme<getQueueData_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getQueueData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getQueueData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getQueueData_result implements org.apache.thrift.TBase<getQueueData_result, getQueueData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQueueData_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQueueData_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getQueueData_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getQueueData_resultTupleSchemeFactory());
        }

        public List<PackageData> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeTypedList(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getQueueData_result(android.os.Parcel in) {
            this.success = new ArrayList<PackageData>();
            in.readTypedList(this.success, PackageData.CREATOR);
        }

        public static final android.os.Parcelable.Creator<getQueueData_result> CREATOR = new android.os.Parcelable.Creator<getQueueData_result>() {
            @Override
            public getQueueData_result[] newArray(int size) {
                return new getQueueData_result[size];
            }

            @Override
            public getQueueData_result createFromParcel(android.os.Parcel in) {
                return new getQueueData_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PackageData.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQueueData_result.class, metaDataMap);
        }

        public getQueueData_result() {
        }

        public getQueueData_result(
                List<PackageData> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getQueueData_result(getQueueData_result other) {
            if (other.isSetSuccess()) {
                List<PackageData> __this__success = new ArrayList<PackageData>(other.success.size());
                for (PackageData other_element : other.success) {
                    __this__success.add(new PackageData(other_element));
                }
                this.success = __this__success;
            }
        }

        public getQueueData_result deepCopy() {
            return new getQueueData_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<PackageData> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(PackageData elem) {
            if (this.success == null) {
                this.success = new ArrayList<PackageData>();
            }
            this.success.add(elem);
        }

        public List<PackageData> getSuccess() {
            return this.success;
        }

        public getQueueData_result setSuccess(List<PackageData> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<PackageData>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getQueueData_result)
                return this.equals((getQueueData_result) that);
            return false;
        }

        public boolean equals(getQueueData_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getQueueData_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getQueueData_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getQueueData_resultStandardSchemeFactory implements SchemeFactory {
            public getQueueData_resultStandardScheme getScheme() {
                return new getQueueData_resultStandardScheme();
            }
        }

        private static class getQueueData_resultStandardScheme extends StandardScheme<getQueueData_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getQueueData_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list222 = iprot.readListBegin();
                                    struct.success = new ArrayList<PackageData>(_list222.size);
                                    PackageData _elem223;
                                    for (int _i224 = 0; _i224 < _list222.size; ++_i224) {
                                        _elem223 = new PackageData();
                                        _elem223.read(iprot);
                                        struct.success.add(_elem223);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getQueueData_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (PackageData _iter225 : struct.success) {
                            _iter225.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getQueueData_resultTupleSchemeFactory implements SchemeFactory {
            public getQueueData_resultTupleScheme getScheme() {
                return new getQueueData_resultTupleScheme();
            }
        }

        private static class getQueueData_resultTupleScheme extends TupleScheme<getQueueData_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getQueueData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (PackageData _iter226 : struct.success) {
                            _iter226.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getQueueData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list227 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<PackageData>(_list227.size);
                        PackageData _elem228;
                        for (int _i229 = 0; _i229 < _list227.size; ++_i229) {
                            _elem228 = new PackageData();
                            _elem228.read(iprot);
                            struct.success.add(_elem228);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getCollectorData_args implements org.apache.thrift.TBase<getCollectorData_args, getCollectorData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectorData_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectorData_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getCollectorData_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getCollectorData_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getCollectorData_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<getCollectorData_args> CREATOR = new android.os.Parcelable.Creator<getCollectorData_args>() {
            @Override
            public getCollectorData_args[] newArray(int size) {
                return new getCollectorData_args[size];
            }

            @Override
            public getCollectorData_args createFromParcel(android.os.Parcel in) {
                return new getCollectorData_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectorData_args.class, metaDataMap);
        }

        public getCollectorData_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCollectorData_args(getCollectorData_args other) {
        }

        public getCollectorData_args deepCopy() {
            return new getCollectorData_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCollectorData_args)
                return this.equals((getCollectorData_args) that);
            return false;
        }

        public boolean equals(getCollectorData_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getCollectorData_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCollectorData_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCollectorData_argsStandardSchemeFactory implements SchemeFactory {
            public getCollectorData_argsStandardScheme getScheme() {
                return new getCollectorData_argsStandardScheme();
            }
        }

        private static class getCollectorData_argsStandardScheme extends StandardScheme<getCollectorData_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectorData_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectorData_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCollectorData_argsTupleSchemeFactory implements SchemeFactory {
            public getCollectorData_argsTupleScheme getScheme() {
                return new getCollectorData_argsTupleScheme();
            }
        }

        private static class getCollectorData_argsTupleScheme extends TupleScheme<getCollectorData_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCollectorData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCollectorData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getCollectorData_result implements org.apache.thrift.TBase<getCollectorData_result, getCollectorData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectorData_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectorData_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getCollectorData_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getCollectorData_resultTupleSchemeFactory());
        }

        public List<PackageData> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeTypedList(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getCollectorData_result(android.os.Parcel in) {
            this.success = new ArrayList<PackageData>();
            in.readTypedList(this.success, PackageData.CREATOR);
        }

        public static final android.os.Parcelable.Creator<getCollectorData_result> CREATOR = new android.os.Parcelable.Creator<getCollectorData_result>() {
            @Override
            public getCollectorData_result[] newArray(int size) {
                return new getCollectorData_result[size];
            }

            @Override
            public getCollectorData_result createFromParcel(android.os.Parcel in) {
                return new getCollectorData_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PackageData.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectorData_result.class, metaDataMap);
        }

        public getCollectorData_result() {
        }

        public getCollectorData_result(
                List<PackageData> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCollectorData_result(getCollectorData_result other) {
            if (other.isSetSuccess()) {
                List<PackageData> __this__success = new ArrayList<PackageData>(other.success.size());
                for (PackageData other_element : other.success) {
                    __this__success.add(new PackageData(other_element));
                }
                this.success = __this__success;
            }
        }

        public getCollectorData_result deepCopy() {
            return new getCollectorData_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<PackageData> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(PackageData elem) {
            if (this.success == null) {
                this.success = new ArrayList<PackageData>();
            }
            this.success.add(elem);
        }

        public List<PackageData> getSuccess() {
            return this.success;
        }

        public getCollectorData_result setSuccess(List<PackageData> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<PackageData>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCollectorData_result)
                return this.equals((getCollectorData_result) that);
            return false;
        }

        public boolean equals(getCollectorData_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getCollectorData_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCollectorData_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCollectorData_resultStandardSchemeFactory implements SchemeFactory {
            public getCollectorData_resultStandardScheme getScheme() {
                return new getCollectorData_resultStandardScheme();
            }
        }

        private static class getCollectorData_resultStandardScheme extends StandardScheme<getCollectorData_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectorData_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list230 = iprot.readListBegin();
                                    struct.success = new ArrayList<PackageData>(_list230.size);
                                    PackageData _elem231;
                                    for (int _i232 = 0; _i232 < _list230.size; ++_i232) {
                                        _elem231 = new PackageData();
                                        _elem231.read(iprot);
                                        struct.success.add(_elem231);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectorData_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (PackageData _iter233 : struct.success) {
                            _iter233.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCollectorData_resultTupleSchemeFactory implements SchemeFactory {
            public getCollectorData_resultTupleScheme getScheme() {
                return new getCollectorData_resultTupleScheme();
            }
        }

        private static class getCollectorData_resultTupleScheme extends TupleScheme<getCollectorData_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCollectorData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (PackageData _iter234 : struct.success) {
                            _iter234.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCollectorData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list235 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<PackageData>(_list235.size);
                        PackageData _elem236;
                        for (int _i237 = 0; _i237 < _list235.size; ++_i237) {
                            _elem236 = new PackageData();
                            _elem236.read(iprot);
                            struct.success.add(_elem236);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getPackageOrder_args implements org.apache.thrift.TBase<getPackageOrder_args, getPackageOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageOrder_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageOrder_args");

        private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getPackageOrder_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPackageOrder_argsTupleSchemeFactory());
        }

        /**
         *
         * @see Destination
         */
        public Destination destination; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeInt(destination.getValue());
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getPackageOrder_args(android.os.Parcel in) {
            this.destination = Destination.findByValue(in.readInt());
        }

        public static final android.os.Parcelable.Creator<getPackageOrder_args> CREATOR = new android.os.Parcelable.Creator<getPackageOrder_args>() {
            @Override
            public getPackageOrder_args[] newArray(int size) {
                return new getPackageOrder_args[size];
            }

            @Override
            public getPackageOrder_args createFromParcel(android.os.Parcel in) {
                return new getPackageOrder_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            /**
             *
             * @see Destination
             */
            DESTINATION((short) 1, "destination");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // DESTINATION
                        return DESTINATION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Destination.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageOrder_args.class, metaDataMap);
        }

        public getPackageOrder_args() {
        }

        public getPackageOrder_args(
                Destination destination) {
            this();
            this.destination = destination;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPackageOrder_args(getPackageOrder_args other) {
            if (other.isSetDestination()) {
                this.destination = other.destination;
            }
        }

        public getPackageOrder_args deepCopy() {
            return new getPackageOrder_args(this);
        }

        @Override
        public void clear() {
            this.destination = null;
        }

        /**
         *
         * @see Destination
         */
        public Destination getDestination() {
            return this.destination;
        }

        /**
         *
         * @see Destination
         */
        public getPackageOrder_args setDestination(Destination destination) {
            this.destination = destination;
            return this;
        }

        public void unsetDestination() {
            this.destination = null;
        }

        /** Returns true if field destination is set (has been assigned a value) and false otherwise */
        public boolean isSetDestination() {
            return this.destination != null;
        }

        public void setDestinationIsSet(boolean value) {
            if (!value) {
                this.destination = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case DESTINATION:
                    if (value == null) {
                        unsetDestination();
                    } else {
                        setDestination((Destination) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case DESTINATION:
                    return getDestination();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case DESTINATION:
                    return isSetDestination();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPackageOrder_args)
                return this.equals((getPackageOrder_args) that);
            return false;
        }

        public boolean equals(getPackageOrder_args that) {
            if (that == null)
                return false;

            boolean this_present_destination = true && this.isSetDestination();
            boolean that_present_destination = true && that.isSetDestination();
            if (this_present_destination || that_present_destination) {
                if (!(this_present_destination && that_present_destination))
                    return false;
                if (!this.destination.equals(that.destination))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_destination = true && (isSetDestination());
            list.add(present_destination);
            if (present_destination)
                list.add(destination.getValue());

            return list.hashCode();
        }

        @Override
        public int compareTo(getPackageOrder_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDestination()).compareTo(other.isSetDestination());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDestination()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, other.destination);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPackageOrder_args(");
            boolean first = true;

            sb.append("destination:");
            if (this.destination == null) {
                sb.append("null");
            } else {
                sb.append(this.destination);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPackageOrder_argsStandardSchemeFactory implements SchemeFactory {
            public getPackageOrder_argsStandardScheme getScheme() {
                return new getPackageOrder_argsStandardScheme();
            }
        }

        private static class getPackageOrder_argsStandardScheme extends StandardScheme<getPackageOrder_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageOrder_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // DESTINATION
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.destination = org.pyload.thrift.Destination.findByValue(iprot.readI32());
                                struct.setDestinationIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageOrder_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.destination != null) {
                    oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
                    oprot.writeI32(struct.destination.getValue());
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPackageOrder_argsTupleSchemeFactory implements SchemeFactory {
            public getPackageOrder_argsTupleScheme getScheme() {
                return new getPackageOrder_argsTupleScheme();
            }
        }

        private static class getPackageOrder_argsTupleScheme extends TupleScheme<getPackageOrder_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPackageOrder_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDestination()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDestination()) {
                    oprot.writeI32(struct.destination.getValue());
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPackageOrder_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.destination = org.pyload.thrift.Destination.findByValue(iprot.readI32());
                    struct.setDestinationIsSet(true);
                }
            }
        }

    }

    public static class getPackageOrder_result implements org.apache.thrift.TBase<getPackageOrder_result, getPackageOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPackageOrder_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPackageOrder_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getPackageOrder_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getPackageOrder_resultTupleSchemeFactory());
        }

        public Map<Short, Integer> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeMap(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getPackageOrder_result(android.os.Parcel in) {
            this.success = new HashMap<Short, Integer>();
            in.readMap(this.success, getPackageOrder_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getPackageOrder_result> CREATOR = new android.os.Parcelable.Creator<getPackageOrder_result>() {
            @Override
            public getPackageOrder_result[] newArray(int size) {
                return new getPackageOrder_result[size];
            }

            @Override
            public getPackageOrder_result createFromParcel(android.os.Parcel in) {
                return new getPackageOrder_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID"))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPackageOrder_result.class, metaDataMap);
        }

        public getPackageOrder_result() {
        }

        public getPackageOrder_result(
                Map<Short, Integer> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPackageOrder_result(getPackageOrder_result other) {
            if (other.isSetSuccess()) {
                Map<Short, Integer> __this__success = new HashMap<Short, Integer>(other.success.size());
                for (Map.Entry<Short, Integer> other_element : other.success.entrySet()) {

                    Short other_element_key = other_element.getKey();
                    Integer other_element_value = other_element.getValue();

                    Short __this__success_copy_key = other_element_key;

                    Integer __this__success_copy_value = other_element_value;

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public getPackageOrder_result deepCopy() {
            return new getPackageOrder_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(short key, int val) {
            if (this.success == null) {
                this.success = new HashMap<Short, Integer>();
            }
            this.success.put(key, val);
        }

        public Map<Short, Integer> getSuccess() {
            return this.success;
        }

        public getPackageOrder_result setSuccess(Map<Short, Integer> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<Short, Integer>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPackageOrder_result)
                return this.equals((getPackageOrder_result) that);
            return false;
        }

        public boolean equals(getPackageOrder_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getPackageOrder_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPackageOrder_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getPackageOrder_resultStandardSchemeFactory implements SchemeFactory {
            public getPackageOrder_resultStandardScheme getScheme() {
                return new getPackageOrder_resultStandardScheme();
            }
        }

        private static class getPackageOrder_resultStandardScheme extends StandardScheme<getPackageOrder_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPackageOrder_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map238 = iprot.readMapBegin();
                                    struct.success = new HashMap<Short, Integer>(2 * _map238.size);
                                    short _key239;
                                    int _val240;
                                    for (int _i241 = 0; _i241 < _map238.size; ++_i241) {
                                        _key239 = iprot.readI16();
                                        _val240 = iprot.readI32();
                                        struct.success.put(_key239, _val240);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getPackageOrder_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I32, struct.success.size()));
                        for (Map.Entry<Short, Integer> _iter242 : struct.success.entrySet()) {
                            oprot.writeI16(_iter242.getKey());
                            oprot.writeI32(_iter242.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPackageOrder_resultTupleSchemeFactory implements SchemeFactory {
            public getPackageOrder_resultTupleScheme getScheme() {
                return new getPackageOrder_resultTupleScheme();
            }
        }

        private static class getPackageOrder_resultTupleScheme extends TupleScheme<getPackageOrder_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getPackageOrder_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<Short, Integer> _iter243 : struct.success.entrySet()) {
                            oprot.writeI16(_iter243.getKey());
                            oprot.writeI32(_iter243.getValue());
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getPackageOrder_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map244 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.success = new HashMap<Short, Integer>(2 * _map244.size);
                        short _key245;
                        int _val246;
                        for (int _i247 = 0; _i247 < _map244.size; ++_i247) {
                            _key245 = iprot.readI16();
                            _val246 = iprot.readI32();
                            struct.success.put(_key245, _val246);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getFileOrder_args implements org.apache.thrift.TBase<getFileOrder_args, getFileOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFileOrder_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileOrder_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getFileOrder_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getFileOrder_argsTupleSchemeFactory());
        }

        public int pid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(pid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getFileOrder_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.pid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<getFileOrder_args> CREATOR = new android.os.Parcelable.Creator<getFileOrder_args>() {
            @Override
            public getFileOrder_args[] newArray(int size) {
                return new getFileOrder_args[size];
            }

            @Override
            public getFileOrder_args createFromParcel(android.os.Parcel in) {
                return new getFileOrder_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short) 1, "pid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PID
                        return PID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileOrder_args.class, metaDataMap);
        }

        public getFileOrder_args() {
        }

        public getFileOrder_args(
                int pid) {
            this();
            this.pid = pid;
            setPidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFileOrder_args(getFileOrder_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
        }

        public getFileOrder_args deepCopy() {
            return new getFileOrder_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public getFileOrder_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getFileOrder_args)
                return this.equals((getFileOrder_args) that);
            return false;
        }

        public boolean equals(getFileOrder_args that) {
            if (that == null)
                return false;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            return list.hashCode();
        }

        @Override
        public int compareTo(getFileOrder_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getFileOrder_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getFileOrder_argsStandardSchemeFactory implements SchemeFactory {
            public getFileOrder_argsStandardScheme getScheme() {
                return new getFileOrder_argsStandardScheme();
            }
        }

        private static class getFileOrder_argsStandardScheme extends StandardScheme<getFileOrder_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFileOrder_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFileOrder_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFileOrder_argsTupleSchemeFactory implements SchemeFactory {
            public getFileOrder_argsTupleScheme getScheme() {
                return new getFileOrder_argsTupleScheme();
            }
        }

        private static class getFileOrder_argsTupleScheme extends TupleScheme<getFileOrder_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFileOrder_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFileOrder_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
            }
        }

    }

    public static class getFileOrder_result implements org.apache.thrift.TBase<getFileOrder_result, getFileOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFileOrder_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFileOrder_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getFileOrder_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getFileOrder_resultTupleSchemeFactory());
        }

        public Map<Short, Integer> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeMap(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getFileOrder_result(android.os.Parcel in) {
            this.success = new HashMap<Short, Integer>();
            in.readMap(this.success, getFileOrder_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getFileOrder_result> CREATOR = new android.os.Parcelable.Creator<getFileOrder_result>() {
            @Override
            public getFileOrder_result[] newArray(int size) {
                return new getFileOrder_result[size];
            }

            @Override
            public getFileOrder_result createFromParcel(android.os.Parcel in) {
                return new getFileOrder_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "FileID"))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFileOrder_result.class, metaDataMap);
        }

        public getFileOrder_result() {
        }

        public getFileOrder_result(
                Map<Short, Integer> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getFileOrder_result(getFileOrder_result other) {
            if (other.isSetSuccess()) {
                Map<Short, Integer> __this__success = new HashMap<Short, Integer>(other.success.size());
                for (Map.Entry<Short, Integer> other_element : other.success.entrySet()) {

                    Short other_element_key = other_element.getKey();
                    Integer other_element_value = other_element.getValue();

                    Short __this__success_copy_key = other_element_key;

                    Integer __this__success_copy_value = other_element_value;

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public getFileOrder_result deepCopy() {
            return new getFileOrder_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(short key, int val) {
            if (this.success == null) {
                this.success = new HashMap<Short, Integer>();
            }
            this.success.put(key, val);
        }

        public Map<Short, Integer> getSuccess() {
            return this.success;
        }

        public getFileOrder_result setSuccess(Map<Short, Integer> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<Short, Integer>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getFileOrder_result)
                return this.equals((getFileOrder_result) that);
            return false;
        }

        public boolean equals(getFileOrder_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getFileOrder_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getFileOrder_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getFileOrder_resultStandardSchemeFactory implements SchemeFactory {
            public getFileOrder_resultStandardScheme getScheme() {
                return new getFileOrder_resultStandardScheme();
            }
        }

        private static class getFileOrder_resultStandardScheme extends StandardScheme<getFileOrder_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getFileOrder_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map248 = iprot.readMapBegin();
                                    struct.success = new HashMap<Short, Integer>(2 * _map248.size);
                                    short _key249;
                                    int _val250;
                                    for (int _i251 = 0; _i251 < _map248.size; ++_i251) {
                                        _key249 = iprot.readI16();
                                        _val250 = iprot.readI32();
                                        struct.success.put(_key249, _val250);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getFileOrder_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I32, struct.success.size()));
                        for (Map.Entry<Short, Integer> _iter252 : struct.success.entrySet()) {
                            oprot.writeI16(_iter252.getKey());
                            oprot.writeI32(_iter252.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getFileOrder_resultTupleSchemeFactory implements SchemeFactory {
            public getFileOrder_resultTupleScheme getScheme() {
                return new getFileOrder_resultTupleScheme();
            }
        }

        private static class getFileOrder_resultTupleScheme extends TupleScheme<getFileOrder_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getFileOrder_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<Short, Integer> _iter253 : struct.success.entrySet()) {
                            oprot.writeI16(_iter253.getKey());
                            oprot.writeI32(_iter253.getValue());
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getFileOrder_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map254 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I16, org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.success = new HashMap<Short, Integer>(2 * _map254.size);
                        short _key255;
                        int _val256;
                        for (int _i257 = 0; _i257 < _map254.size; ++_i257) {
                            _key255 = iprot.readI16();
                            _val256 = iprot.readI32();
                            struct.success.put(_key255, _val256);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class generateAndAddPackages_args implements org.apache.thrift.TBase<generateAndAddPackages_args, generateAndAddPackages_args._Fields>, java.io.Serializable, Cloneable, Comparable<generateAndAddPackages_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateAndAddPackages_args");

        private static final org.apache.thrift.protocol.TField LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("links", org.apache.thrift.protocol.TType.LIST, (short) 1);
        private static final org.apache.thrift.protocol.TField DEST_FIELD_DESC = new org.apache.thrift.protocol.TField("dest", org.apache.thrift.protocol.TType.I32, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new generateAndAddPackages_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new generateAndAddPackages_argsTupleSchemeFactory());
        }

        public List<String> links; // required
        /**
         *
         * @see Destination
         */
        public Destination dest; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(links);
            out.writeInt(dest.getValue());
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public generateAndAddPackages_args(android.os.Parcel in) {
            this.links = new ArrayList<String>();
            in.readList(this.links, generateAndAddPackages_args.class.getClassLoader());
            this.dest = Destination.findByValue(in.readInt());
        }

        public static final android.os.Parcelable.Creator<generateAndAddPackages_args> CREATOR = new android.os.Parcelable.Creator<generateAndAddPackages_args>() {
            @Override
            public generateAndAddPackages_args[] newArray(int size) {
                return new generateAndAddPackages_args[size];
            }

            @Override
            public generateAndAddPackages_args createFromParcel(android.os.Parcel in) {
                return new generateAndAddPackages_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            LINKS((short) 1, "links"),
            /**
             *
             * @see Destination
             */
            DEST((short) 2, "dest");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // LINKS
                        return LINKS;
                    case 2: // DEST
                        return DEST;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LINKS, new org.apache.thrift.meta_data.FieldMetaData("links", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST, "LinkList")));
            tmpMap.put(_Fields.DEST, new org.apache.thrift.meta_data.FieldMetaData("dest", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Destination.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateAndAddPackages_args.class, metaDataMap);
        }

        public generateAndAddPackages_args() {
        }

        public generateAndAddPackages_args(
                List<String> links,
                Destination dest) {
            this();
            this.links = links;
            this.dest = dest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public generateAndAddPackages_args(generateAndAddPackages_args other) {
            if (other.isSetLinks()) {
                this.links = other.links;
            }
            if (other.isSetDest()) {
                this.dest = other.dest;
            }
        }

        public generateAndAddPackages_args deepCopy() {
            return new generateAndAddPackages_args(this);
        }

        @Override
        public void clear() {
            this.links = null;
            this.dest = null;
        }

        public int getLinksSize() {
            return (this.links == null) ? 0 : this.links.size();
        }

        public java.util.Iterator<String> getLinksIterator() {
            return (this.links == null) ? null : this.links.iterator();
        }

        public void addToLinks(String elem) {
            if (this.links == null) {
                this.links = new ArrayList<String>();
            }
            this.links.add(elem);
        }

        public List<String> getLinks() {
            return this.links;
        }

        public generateAndAddPackages_args setLinks(List<String> links) {
            this.links = links;
            return this;
        }

        public void unsetLinks() {
            this.links = null;
        }

        /** Returns true if field links is set (has been assigned a value) and false otherwise */
        public boolean isSetLinks() {
            return this.links != null;
        }

        public void setLinksIsSet(boolean value) {
            if (!value) {
                this.links = null;
            }
        }

        /**
         *
         * @see Destination
         */
        public Destination getDest() {
            return this.dest;
        }

        /**
         *
         * @see Destination
         */
        public generateAndAddPackages_args setDest(Destination dest) {
            this.dest = dest;
            return this;
        }

        public void unsetDest() {
            this.dest = null;
        }

        /** Returns true if field dest is set (has been assigned a value) and false otherwise */
        public boolean isSetDest() {
            return this.dest != null;
        }

        public void setDestIsSet(boolean value) {
            if (!value) {
                this.dest = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case LINKS:
                    if (value == null) {
                        unsetLinks();
                    } else {
                        setLinks((List<String>) value);
                    }
                    break;

                case DEST:
                    if (value == null) {
                        unsetDest();
                    } else {
                        setDest((Destination) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case LINKS:
                    return getLinks();

                case DEST:
                    return getDest();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case LINKS:
                    return isSetLinks();
                case DEST:
                    return isSetDest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof generateAndAddPackages_args)
                return this.equals((generateAndAddPackages_args) that);
            return false;
        }

        public boolean equals(generateAndAddPackages_args that) {
            if (that == null)
                return false;

            boolean this_present_links = true && this.isSetLinks();
            boolean that_present_links = true && that.isSetLinks();
            if (this_present_links || that_present_links) {
                if (!(this_present_links && that_present_links))
                    return false;
                if (!this.links.equals(that.links))
                    return false;
            }

            boolean this_present_dest = true && this.isSetDest();
            boolean that_present_dest = true && that.isSetDest();
            if (this_present_dest || that_present_dest) {
                if (!(this_present_dest && that_present_dest))
                    return false;
                if (!this.dest.equals(that.dest))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_links = true && (isSetLinks());
            list.add(present_links);
            if (present_links)
                list.add(links);

            boolean present_dest = true && (isSetDest());
            list.add(present_dest);
            if (present_dest)
                list.add(dest.getValue());

            return list.hashCode();
        }

        @Override
        public int compareTo(generateAndAddPackages_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetLinks()).compareTo(other.isSetLinks());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLinks()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.links, other.links);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDest()).compareTo(other.isSetDest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDest()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest, other.dest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("generateAndAddPackages_args(");
            boolean first = true;

            sb.append("links:");
            if (this.links == null) {
                sb.append("null");
            } else {
                sb.append(this.links);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("dest:");
            if (this.dest == null) {
                sb.append("null");
            } else {
                sb.append(this.dest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class generateAndAddPackages_argsStandardSchemeFactory implements SchemeFactory {
            public generateAndAddPackages_argsStandardScheme getScheme() {
                return new generateAndAddPackages_argsStandardScheme();
            }
        }

        private static class generateAndAddPackages_argsStandardScheme extends StandardScheme<generateAndAddPackages_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, generateAndAddPackages_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // LINKS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list258 = iprot.readListBegin();
                                    struct.links = new ArrayList<String>(_list258.size);
                                    String _elem259;
                                    for (int _i260 = 0; _i260 < _list258.size; ++_i260) {
                                        _elem259 = iprot.readString();
                                        struct.links.add(_elem259);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setLinksIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DEST
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.dest = org.pyload.thrift.Destination.findByValue(iprot.readI32());
                                struct.setDestIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, generateAndAddPackages_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.links != null) {
                    oprot.writeFieldBegin(LINKS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.links.size()));
                        for (String _iter261 : struct.links) {
                            oprot.writeString(_iter261);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.dest != null) {
                    oprot.writeFieldBegin(DEST_FIELD_DESC);
                    oprot.writeI32(struct.dest.getValue());
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class generateAndAddPackages_argsTupleSchemeFactory implements SchemeFactory {
            public generateAndAddPackages_argsTupleScheme getScheme() {
                return new generateAndAddPackages_argsTupleScheme();
            }
        }

        private static class generateAndAddPackages_argsTupleScheme extends TupleScheme<generateAndAddPackages_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, generateAndAddPackages_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLinks()) {
                    optionals.set(0);
                }
                if (struct.isSetDest()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetLinks()) {
                    {
                        oprot.writeI32(struct.links.size());
                        for (String _iter262 : struct.links) {
                            oprot.writeString(_iter262);
                        }
                    }
                }
                if (struct.isSetDest()) {
                    oprot.writeI32(struct.dest.getValue());
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, generateAndAddPackages_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list263 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.links = new ArrayList<String>(_list263.size);
                        String _elem264;
                        for (int _i265 = 0; _i265 < _list263.size; ++_i265) {
                            _elem264 = iprot.readString();
                            struct.links.add(_elem264);
                        }
                    }
                    struct.setLinksIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.dest = org.pyload.thrift.Destination.findByValue(iprot.readI32());
                    struct.setDestIsSet(true);
                }
            }
        }

    }

    public static class generateAndAddPackages_result implements org.apache.thrift.TBase<generateAndAddPackages_result, generateAndAddPackages_result._Fields>, java.io.Serializable, Cloneable, Comparable<generateAndAddPackages_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generateAndAddPackages_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new generateAndAddPackages_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new generateAndAddPackages_resultTupleSchemeFactory());
        }

        public List<Integer> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public generateAndAddPackages_result(android.os.Parcel in) {
            this.success = new ArrayList<Integer>();
            in.readList(this.success, generateAndAddPackages_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<generateAndAddPackages_result> CREATOR = new android.os.Parcelable.Creator<generateAndAddPackages_result>() {
            @Override
            public generateAndAddPackages_result[] newArray(int size) {
                return new generateAndAddPackages_result[size];
            }

            @Override
            public generateAndAddPackages_result createFromParcel(android.os.Parcel in) {
                return new generateAndAddPackages_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID"))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generateAndAddPackages_result.class, metaDataMap);
        }

        public generateAndAddPackages_result() {
        }

        public generateAndAddPackages_result(
                List<Integer> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public generateAndAddPackages_result(generateAndAddPackages_result other) {
            if (other.isSetSuccess()) {
                List<Integer> __this__success = new ArrayList<Integer>(other.success.size());
                for (Integer other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public generateAndAddPackages_result deepCopy() {
            return new generateAndAddPackages_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Integer> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(int elem) {
            if (this.success == null) {
                this.success = new ArrayList<Integer>();
            }
            this.success.add(elem);
        }

        public List<Integer> getSuccess() {
            return this.success;
        }

        public generateAndAddPackages_result setSuccess(List<Integer> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Integer>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof generateAndAddPackages_result)
                return this.equals((generateAndAddPackages_result) that);
            return false;
        }

        public boolean equals(generateAndAddPackages_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(generateAndAddPackages_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("generateAndAddPackages_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class generateAndAddPackages_resultStandardSchemeFactory implements SchemeFactory {
            public generateAndAddPackages_resultStandardScheme getScheme() {
                return new generateAndAddPackages_resultStandardScheme();
            }
        }

        private static class generateAndAddPackages_resultStandardScheme extends StandardScheme<generateAndAddPackages_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, generateAndAddPackages_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list266 = iprot.readListBegin();
                                    struct.success = new ArrayList<Integer>(_list266.size);
                                    int _elem267;
                                    for (int _i268 = 0; _i268 < _list266.size; ++_i268) {
                                        _elem267 = iprot.readI32();
                                        struct.success.add(_elem267);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, generateAndAddPackages_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
                        for (int _iter269 : struct.success) {
                            oprot.writeI32(_iter269);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class generateAndAddPackages_resultTupleSchemeFactory implements SchemeFactory {
            public generateAndAddPackages_resultTupleScheme getScheme() {
                return new generateAndAddPackages_resultTupleScheme();
            }
        }

        private static class generateAndAddPackages_resultTupleScheme extends TupleScheme<generateAndAddPackages_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, generateAndAddPackages_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (int _iter270 : struct.success) {
                            oprot.writeI32(_iter270);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, generateAndAddPackages_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list271 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.success = new ArrayList<Integer>(_list271.size);
                        int _elem272;
                        for (int _i273 = 0; _i273 < _list271.size; ++_i273) {
                            _elem272 = iprot.readI32();
                            struct.success.add(_elem272);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class addPackage_args implements org.apache.thrift.TBase<addPackage_args, addPackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPackage_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPackage_args");

        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("links", org.apache.thrift.protocol.TType.LIST, (short) 2);
        private static final org.apache.thrift.protocol.TField DEST_FIELD_DESC = new org.apache.thrift.protocol.TField("dest", org.apache.thrift.protocol.TType.I32, (short) 3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new addPackage_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addPackage_argsTupleSchemeFactory());
        }

        public String name; // required
        public List<String> links; // required
        /**
         *
         * @see Destination
         */
        public Destination dest; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(name);
            out.writeList(links);
            out.writeInt(dest.getValue());
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public addPackage_args(android.os.Parcel in) {
            this.name = in.readString();
            this.links = new ArrayList<String>();
            in.readList(this.links, addPackage_args.class.getClassLoader());
            this.dest = Destination.findByValue(in.readInt());
        }

        public static final android.os.Parcelable.Creator<addPackage_args> CREATOR = new android.os.Parcelable.Creator<addPackage_args>() {
            @Override
            public addPackage_args[] newArray(int size) {
                return new addPackage_args[size];
            }

            @Override
            public addPackage_args createFromParcel(android.os.Parcel in) {
                return new addPackage_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            NAME((short) 1, "name"),
            LINKS((short) 2, "links"),
            /**
             *
             * @see Destination
             */
            DEST((short) 3, "dest");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // NAME
                        return NAME;
                    case 2: // LINKS
                        return LINKS;
                    case 3: // DEST
                        return DEST;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.LINKS, new org.apache.thrift.meta_data.FieldMetaData("links", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST, "LinkList")));
            tmpMap.put(_Fields.DEST, new org.apache.thrift.meta_data.FieldMetaData("dest", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Destination.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPackage_args.class, metaDataMap);
        }

        public addPackage_args() {
        }

        public addPackage_args(
                String name,
                List<String> links,
                Destination dest) {
            this();
            this.name = name;
            this.links = links;
            this.dest = dest;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addPackage_args(addPackage_args other) {
            if (other.isSetName()) {
                this.name = other.name;
            }
            if (other.isSetLinks()) {
                this.links = other.links;
            }
            if (other.isSetDest()) {
                this.dest = other.dest;
            }
        }

        public addPackage_args deepCopy() {
            return new addPackage_args(this);
        }

        @Override
        public void clear() {
            this.name = null;
            this.links = null;
            this.dest = null;
        }

        public String getName() {
            return this.name;
        }

        public addPackage_args setName(String name) {
            this.name = name;
            return this;
        }

        public void unsetName() {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName() {
            return this.name != null;
        }

        public void setNameIsSet(boolean value) {
            if (!value) {
                this.name = null;
            }
        }

        public int getLinksSize() {
            return (this.links == null) ? 0 : this.links.size();
        }

        public java.util.Iterator<String> getLinksIterator() {
            return (this.links == null) ? null : this.links.iterator();
        }

        public void addToLinks(String elem) {
            if (this.links == null) {
                this.links = new ArrayList<String>();
            }
            this.links.add(elem);
        }

        public List<String> getLinks() {
            return this.links;
        }

        public addPackage_args setLinks(List<String> links) {
            this.links = links;
            return this;
        }

        public void unsetLinks() {
            this.links = null;
        }

        /** Returns true if field links is set (has been assigned a value) and false otherwise */
        public boolean isSetLinks() {
            return this.links != null;
        }

        public void setLinksIsSet(boolean value) {
            if (!value) {
                this.links = null;
            }
        }

        /**
         *
         * @see Destination
         */
        public Destination getDest() {
            return this.dest;
        }

        /**
         *
         * @see Destination
         */
        public addPackage_args setDest(Destination dest) {
            this.dest = dest;
            return this;
        }

        public void unsetDest() {
            this.dest = null;
        }

        /** Returns true if field dest is set (has been assigned a value) and false otherwise */
        public boolean isSetDest() {
            return this.dest != null;
        }

        public void setDestIsSet(boolean value) {
            if (!value) {
                this.dest = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case NAME:
                    if (value == null) {
                        unsetName();
                    } else {
                        setName((String) value);
                    }
                    break;

                case LINKS:
                    if (value == null) {
                        unsetLinks();
                    } else {
                        setLinks((List<String>) value);
                    }
                    break;

                case DEST:
                    if (value == null) {
                        unsetDest();
                    } else {
                        setDest((Destination) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case NAME:
                    return getName();

                case LINKS:
                    return getLinks();

                case DEST:
                    return getDest();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case NAME:
                    return isSetName();
                case LINKS:
                    return isSetLinks();
                case DEST:
                    return isSetDest();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addPackage_args)
                return this.equals((addPackage_args) that);
            return false;
        }

        public boolean equals(addPackage_args that) {
            if (that == null)
                return false;

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name) {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            boolean this_present_links = true && this.isSetLinks();
            boolean that_present_links = true && that.isSetLinks();
            if (this_present_links || that_present_links) {
                if (!(this_present_links && that_present_links))
                    return false;
                if (!this.links.equals(that.links))
                    return false;
            }

            boolean this_present_dest = true && this.isSetDest();
            boolean that_present_dest = true && that.isSetDest();
            if (this_present_dest || that_present_dest) {
                if (!(this_present_dest && that_present_dest))
                    return false;
                if (!this.dest.equals(that.dest))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_name = true && (isSetName());
            list.add(present_name);
            if (present_name)
                list.add(name);

            boolean present_links = true && (isSetLinks());
            list.add(present_links);
            if (present_links)
                list.add(links);

            boolean present_dest = true && (isSetDest());
            list.add(present_dest);
            if (present_dest)
                list.add(dest.getValue());

            return list.hashCode();
        }

        @Override
        public int compareTo(addPackage_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetLinks()).compareTo(other.isSetLinks());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLinks()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.links, other.links);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDest()).compareTo(other.isSetDest());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDest()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest, other.dest);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addPackage_args(");
            boolean first = true;

            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("links:");
            if (this.links == null) {
                sb.append("null");
            } else {
                sb.append(this.links);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("dest:");
            if (this.dest == null) {
                sb.append("null");
            } else {
                sb.append(this.dest);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addPackage_argsStandardSchemeFactory implements SchemeFactory {
            public addPackage_argsStandardScheme getScheme() {
                return new addPackage_argsStandardScheme();
            }
        }

        private static class addPackage_argsStandardScheme extends StandardScheme<addPackage_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addPackage_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // LINKS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list274 = iprot.readListBegin();
                                    struct.links = new ArrayList<String>(_list274.size);
                                    String _elem275;
                                    for (int _i276 = 0; _i276 < _list274.size; ++_i276) {
                                        _elem275 = iprot.readString();
                                        struct.links.add(_elem275);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setLinksIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // DEST
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.dest = org.pyload.thrift.Destination.findByValue(iprot.readI32());
                                struct.setDestIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addPackage_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.name != null) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                if (struct.links != null) {
                    oprot.writeFieldBegin(LINKS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.links.size()));
                        for (String _iter277 : struct.links) {
                            oprot.writeString(_iter277);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.dest != null) {
                    oprot.writeFieldBegin(DEST_FIELD_DESC);
                    oprot.writeI32(struct.dest.getValue());
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addPackage_argsTupleSchemeFactory implements SchemeFactory {
            public addPackage_argsTupleScheme getScheme() {
                return new addPackage_argsTupleScheme();
            }
        }

        private static class addPackage_argsTupleScheme extends TupleScheme<addPackage_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addPackage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetName()) {
                    optionals.set(0);
                }
                if (struct.isSetLinks()) {
                    optionals.set(1);
                }
                if (struct.isSetDest()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetName()) {
                    oprot.writeString(struct.name);
                }
                if (struct.isSetLinks()) {
                    {
                        oprot.writeI32(struct.links.size());
                        for (String _iter278 : struct.links) {
                            oprot.writeString(_iter278);
                        }
                    }
                }
                if (struct.isSetDest()) {
                    oprot.writeI32(struct.dest.getValue());
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addPackage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list279 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.links = new ArrayList<String>(_list279.size);
                        String _elem280;
                        for (int _i281 = 0; _i281 < _list279.size; ++_i281) {
                            _elem280 = iprot.readString();
                            struct.links.add(_elem280);
                        }
                    }
                    struct.setLinksIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.dest = org.pyload.thrift.Destination.findByValue(iprot.readI32());
                    struct.setDestIsSet(true);
                }
            }
        }

    }

    public static class addPackage_result implements org.apache.thrift.TBase<addPackage_result, addPackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPackage_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPackage_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new addPackage_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addPackage_resultTupleSchemeFactory());
        }

        public int success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public addPackage_result(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.success = in.readInt();
        }

        public static final android.os.Parcelable.Creator<addPackage_result> CREATOR = new android.os.Parcelable.Creator<addPackage_result>() {
            @Override
            public addPackage_result[] newArray(int size) {
                return new addPackage_result[size];
            }

            @Override
            public addPackage_result createFromParcel(android.os.Parcel in) {
                return new addPackage_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPackage_result.class, metaDataMap);
        }

        public addPackage_result() {
        }

        public addPackage_result(
                int success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addPackage_result(addPackage_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public addPackage_result deepCopy() {
            return new addPackage_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public int getSuccess() {
            return this.success;
        }

        public addPackage_result setSuccess(int success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addPackage_result)
                return this.equals((addPackage_result) that);
            return false;
        }

        public boolean equals(addPackage_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(addPackage_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addPackage_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addPackage_resultStandardSchemeFactory implements SchemeFactory {
            public addPackage_resultStandardScheme getScheme() {
                return new addPackage_resultStandardScheme();
            }
        }

        private static class addPackage_resultStandardScheme extends StandardScheme<addPackage_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addPackage_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.success = iprot.readI32();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addPackage_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addPackage_resultTupleSchemeFactory implements SchemeFactory {
            public addPackage_resultTupleScheme getScheme() {
                return new addPackage_resultTupleScheme();
            }
        }

        private static class addPackage_resultTupleScheme extends TupleScheme<addPackage_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addPackage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addPackage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI32();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class addFiles_args implements org.apache.thrift.TBase<addFiles_args, addFiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFiles_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFiles_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("links", org.apache.thrift.protocol.TType.LIST, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new addFiles_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addFiles_argsTupleSchemeFactory());
        }

        public int pid; // required
        public List<String> links; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(pid);
            out.writeList(links);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public addFiles_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.pid = in.readInt();
            this.links = new ArrayList<String>();
            in.readList(this.links, addFiles_args.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<addFiles_args> CREATOR = new android.os.Parcelable.Creator<addFiles_args>() {
            @Override
            public addFiles_args[] newArray(int size) {
                return new addFiles_args[size];
            }

            @Override
            public addFiles_args createFromParcel(android.os.Parcel in) {
                return new addFiles_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short) 1, "pid"),
            LINKS((short) 2, "links");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PID
                        return PID;
                    case 2: // LINKS
                        return LINKS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            tmpMap.put(_Fields.LINKS, new org.apache.thrift.meta_data.FieldMetaData("links", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST, "LinkList")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFiles_args.class, metaDataMap);
        }

        public addFiles_args() {
        }

        public addFiles_args(
                int pid,
                List<String> links) {
            this();
            this.pid = pid;
            setPidIsSet(true);
            this.links = links;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addFiles_args(addFiles_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
            if (other.isSetLinks()) {
                this.links = other.links;
            }
        }

        public addFiles_args deepCopy() {
            return new addFiles_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
            this.links = null;
        }

        public int getPid() {
            return this.pid;
        }

        public addFiles_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public int getLinksSize() {
            return (this.links == null) ? 0 : this.links.size();
        }

        public java.util.Iterator<String> getLinksIterator() {
            return (this.links == null) ? null : this.links.iterator();
        }

        public void addToLinks(String elem) {
            if (this.links == null) {
                this.links = new ArrayList<String>();
            }
            this.links.add(elem);
        }

        public List<String> getLinks() {
            return this.links;
        }

        public addFiles_args setLinks(List<String> links) {
            this.links = links;
            return this;
        }

        public void unsetLinks() {
            this.links = null;
        }

        /** Returns true if field links is set (has been assigned a value) and false otherwise */
        public boolean isSetLinks() {
            return this.links != null;
        }

        public void setLinksIsSet(boolean value) {
            if (!value) {
                this.links = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

                case LINKS:
                    if (value == null) {
                        unsetLinks();
                    } else {
                        setLinks((List<String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

                case LINKS:
                    return getLinks();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
                case LINKS:
                    return isSetLinks();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addFiles_args)
                return this.equals((addFiles_args) that);
            return false;
        }

        public boolean equals(addFiles_args that) {
            if (that == null)
                return false;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            boolean this_present_links = true && this.isSetLinks();
            boolean that_present_links = true && that.isSetLinks();
            if (this_present_links || that_present_links) {
                if (!(this_present_links && that_present_links))
                    return false;
                if (!this.links.equals(that.links))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            boolean present_links = true && (isSetLinks());
            list.add(present_links);
            if (present_links)
                list.add(links);

            return list.hashCode();
        }

        @Override
        public int compareTo(addFiles_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetLinks()).compareTo(other.isSetLinks());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLinks()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.links, other.links);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addFiles_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            if (!first) sb.append(", ");
            sb.append("links:");
            if (this.links == null) {
                sb.append("null");
            } else {
                sb.append(this.links);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addFiles_argsStandardSchemeFactory implements SchemeFactory {
            public addFiles_argsStandardScheme getScheme() {
                return new addFiles_argsStandardScheme();
            }
        }

        private static class addFiles_argsStandardScheme extends StandardScheme<addFiles_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addFiles_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // LINKS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list282 = iprot.readListBegin();
                                    struct.links = new ArrayList<String>(_list282.size);
                                    String _elem283;
                                    for (int _i284 = 0; _i284 < _list282.size; ++_i284) {
                                        _elem283 = iprot.readString();
                                        struct.links.add(_elem283);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setLinksIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addFiles_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                if (struct.links != null) {
                    oprot.writeFieldBegin(LINKS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.links.size()));
                        for (String _iter285 : struct.links) {
                            oprot.writeString(_iter285);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addFiles_argsTupleSchemeFactory implements SchemeFactory {
            public addFiles_argsTupleScheme getScheme() {
                return new addFiles_argsTupleScheme();
            }
        }

        private static class addFiles_argsTupleScheme extends TupleScheme<addFiles_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addFiles_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                if (struct.isSetLinks()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
                if (struct.isSetLinks()) {
                    {
                        oprot.writeI32(struct.links.size());
                        for (String _iter286 : struct.links) {
                            oprot.writeString(_iter286);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addFiles_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list287 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.links = new ArrayList<String>(_list287.size);
                        String _elem288;
                        for (int _i289 = 0; _i289 < _list287.size; ++_i289) {
                            _elem288 = iprot.readString();
                            struct.links.add(_elem288);
                        }
                    }
                    struct.setLinksIsSet(true);
                }
            }
        }

    }

    public static class addFiles_result implements org.apache.thrift.TBase<addFiles_result, addFiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFiles_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFiles_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new addFiles_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addFiles_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public addFiles_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<addFiles_result> CREATOR = new android.os.Parcelable.Creator<addFiles_result>() {
            @Override
            public addFiles_result[] newArray(int size) {
                return new addFiles_result[size];
            }

            @Override
            public addFiles_result createFromParcel(android.os.Parcel in) {
                return new addFiles_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFiles_result.class, metaDataMap);
        }

        public addFiles_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public addFiles_result(addFiles_result other) {
        }

        public addFiles_result deepCopy() {
            return new addFiles_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof addFiles_result)
                return this.equals((addFiles_result) that);
            return false;
        }

        public boolean equals(addFiles_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(addFiles_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addFiles_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class addFiles_resultStandardSchemeFactory implements SchemeFactory {
            public addFiles_resultStandardScheme getScheme() {
                return new addFiles_resultStandardScheme();
            }
        }

        private static class addFiles_resultStandardScheme extends StandardScheme<addFiles_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, addFiles_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, addFiles_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class addFiles_resultTupleSchemeFactory implements SchemeFactory {
            public addFiles_resultTupleScheme getScheme() {
                return new addFiles_resultTupleScheme();
            }
        }

        private static class addFiles_resultTupleScheme extends TupleScheme<addFiles_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addFiles_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addFiles_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class uploadContainer_args implements org.apache.thrift.TBase<uploadContainer_args, uploadContainer_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadContainer_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadContainer_args");

        private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new uploadContainer_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new uploadContainer_argsTupleSchemeFactory());
        }

        public String filename; // required
        public ByteBuffer data; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(filename);
            out.writeInt(data != null ? 1 : 0);
            if (data != null) {
                out.writeByteArray(data.array(), data.position() + data.arrayOffset(), data.limit() - data.position());
            }
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public uploadContainer_args(android.os.Parcel in) {
            this.filename = in.readString();
            if (in.readInt() == 1) {
                this.data = ByteBuffer.wrap(in.createByteArray());
            }
        }

        public static final android.os.Parcelable.Creator<uploadContainer_args> CREATOR = new android.os.Parcelable.Creator<uploadContainer_args>() {
            @Override
            public uploadContainer_args[] newArray(int size) {
                return new uploadContainer_args[size];
            }

            @Override
            public uploadContainer_args createFromParcel(android.os.Parcel in) {
                return new uploadContainer_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FILENAME((short) 1, "filename"),
            DATA((short) 2, "data");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // FILENAME
                        return FILENAME;
                    case 2: // DATA
                        return DATA;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, true)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadContainer_args.class, metaDataMap);
        }

        public uploadContainer_args() {
        }

        public uploadContainer_args(
                String filename,
                ByteBuffer data) {
            this();
            this.filename = filename;
            this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public uploadContainer_args(uploadContainer_args other) {
            if (other.isSetFilename()) {
                this.filename = other.filename;
            }
            if (other.isSetData()) {
                this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
            }
        }

        public uploadContainer_args deepCopy() {
            return new uploadContainer_args(this);
        }

        @Override
        public void clear() {
            this.filename = null;
            this.data = null;
        }

        public String getFilename() {
            return this.filename;
        }

        public uploadContainer_args setFilename(String filename) {
            this.filename = filename;
            return this;
        }

        public void unsetFilename() {
            this.filename = null;
        }

        /** Returns true if field filename is set (has been assigned a value) and false otherwise */
        public boolean isSetFilename() {
            return this.filename != null;
        }

        public void setFilenameIsSet(boolean value) {
            if (!value) {
                this.filename = null;
            }
        }

        public byte[] getData() {
            setData(org.apache.thrift.TBaseHelper.rightSize(data));
            return data == null ? null : data.array();
        }

        public ByteBuffer bufferForData() {
            return org.apache.thrift.TBaseHelper.copyBinary(data);
        }

        public uploadContainer_args setData(byte[] data) {
            this.data = data == null ? (ByteBuffer) null : ByteBuffer.wrap(Arrays.copyOf(data, data.length));
            return this;
        }

        public uploadContainer_args setData(ByteBuffer data) {
            this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
            return this;
        }

        public void unsetData() {
            this.data = null;
        }

        /** Returns true if field data is set (has been assigned a value) and false otherwise */
        public boolean isSetData() {
            return this.data != null;
        }

        public void setDataIsSet(boolean value) {
            if (!value) {
                this.data = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case FILENAME:
                    if (value == null) {
                        unsetFilename();
                    } else {
                        setFilename((String) value);
                    }
                    break;

                case DATA:
                    if (value == null) {
                        unsetData();
                    } else {
                        setData((ByteBuffer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case FILENAME:
                    return getFilename();

                case DATA:
                    return getData();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case FILENAME:
                    return isSetFilename();
                case DATA:
                    return isSetData();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof uploadContainer_args)
                return this.equals((uploadContainer_args) that);
            return false;
        }

        public boolean equals(uploadContainer_args that) {
            if (that == null)
                return false;

            boolean this_present_filename = true && this.isSetFilename();
            boolean that_present_filename = true && that.isSetFilename();
            if (this_present_filename || that_present_filename) {
                if (!(this_present_filename && that_present_filename))
                    return false;
                if (!this.filename.equals(that.filename))
                    return false;
            }

            boolean this_present_data = true && this.isSetData();
            boolean that_present_data = true && that.isSetData();
            if (this_present_data || that_present_data) {
                if (!(this_present_data && that_present_data))
                    return false;
                if (!this.data.equals(that.data))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_filename = true && (isSetFilename());
            list.add(present_filename);
            if (present_filename)
                list.add(filename);

            boolean present_data = true && (isSetData());
            list.add(present_data);
            if (present_data)
                list.add(data);

            return list.hashCode();
        }

        @Override
        public int compareTo(uploadContainer_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFilename()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("uploadContainer_args(");
            boolean first = true;

            sb.append("filename:");
            if (this.filename == null) {
                sb.append("null");
            } else {
                sb.append(this.filename);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("data:");
            if (this.data == null) {
                sb.append("null");
            } else {
                org.apache.thrift.TBaseHelper.toString(this.data, sb);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class uploadContainer_argsStandardSchemeFactory implements SchemeFactory {
            public uploadContainer_argsStandardScheme getScheme() {
                return new uploadContainer_argsStandardScheme();
            }
        }

        private static class uploadContainer_argsStandardScheme extends StandardScheme<uploadContainer_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, uploadContainer_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // FILENAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.filename = iprot.readString();
                                struct.setFilenameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DATA
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.data = iprot.readBinary();
                                struct.setDataIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, uploadContainer_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.filename != null) {
                    oprot.writeFieldBegin(FILENAME_FIELD_DESC);
                    oprot.writeString(struct.filename);
                    oprot.writeFieldEnd();
                }
                if (struct.data != null) {
                    oprot.writeFieldBegin(DATA_FIELD_DESC);
                    oprot.writeBinary(struct.data);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class uploadContainer_argsTupleSchemeFactory implements SchemeFactory {
            public uploadContainer_argsTupleScheme getScheme() {
                return new uploadContainer_argsTupleScheme();
            }
        }

        private static class uploadContainer_argsTupleScheme extends TupleScheme<uploadContainer_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, uploadContainer_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFilename()) {
                    optionals.set(0);
                }
                if (struct.isSetData()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetFilename()) {
                    oprot.writeString(struct.filename);
                }
                if (struct.isSetData()) {
                    oprot.writeBinary(struct.data);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, uploadContainer_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.filename = iprot.readString();
                    struct.setFilenameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.data = iprot.readBinary();
                    struct.setDataIsSet(true);
                }
            }
        }

    }

    public static class uploadContainer_result implements org.apache.thrift.TBase<uploadContainer_result, uploadContainer_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadContainer_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadContainer_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new uploadContainer_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new uploadContainer_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public uploadContainer_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<uploadContainer_result> CREATOR = new android.os.Parcelable.Creator<uploadContainer_result>() {
            @Override
            public uploadContainer_result[] newArray(int size) {
                return new uploadContainer_result[size];
            }

            @Override
            public uploadContainer_result createFromParcel(android.os.Parcel in) {
                return new uploadContainer_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadContainer_result.class, metaDataMap);
        }

        public uploadContainer_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public uploadContainer_result(uploadContainer_result other) {
        }

        public uploadContainer_result deepCopy() {
            return new uploadContainer_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof uploadContainer_result)
                return this.equals((uploadContainer_result) that);
            return false;
        }

        public boolean equals(uploadContainer_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(uploadContainer_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("uploadContainer_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class uploadContainer_resultStandardSchemeFactory implements SchemeFactory {
            public uploadContainer_resultStandardScheme getScheme() {
                return new uploadContainer_resultStandardScheme();
            }
        }

        private static class uploadContainer_resultStandardScheme extends StandardScheme<uploadContainer_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, uploadContainer_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, uploadContainer_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class uploadContainer_resultTupleSchemeFactory implements SchemeFactory {
            public uploadContainer_resultTupleScheme getScheme() {
                return new uploadContainer_resultTupleScheme();
            }
        }

        private static class uploadContainer_resultTupleScheme extends TupleScheme<uploadContainer_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, uploadContainer_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, uploadContainer_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class deleteFiles_args implements org.apache.thrift.TBase<deleteFiles_args, deleteFiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFiles_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFiles_args");

        private static final org.apache.thrift.protocol.TField FIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fids", org.apache.thrift.protocol.TType.LIST, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deleteFiles_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteFiles_argsTupleSchemeFactory());
        }

        public List<Integer> fids; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(fids);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public deleteFiles_args(android.os.Parcel in) {
            this.fids = new ArrayList<Integer>();
            in.readList(this.fids, deleteFiles_args.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<deleteFiles_args> CREATOR = new android.os.Parcelable.Creator<deleteFiles_args>() {
            @Override
            public deleteFiles_args[] newArray(int size) {
                return new deleteFiles_args[size];
            }

            @Override
            public deleteFiles_args createFromParcel(android.os.Parcel in) {
                return new deleteFiles_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FIDS((short) 1, "fids");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // FIDS
                        return FIDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FIDS, new org.apache.thrift.meta_data.FieldMetaData("fids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "FileID"))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFiles_args.class, metaDataMap);
        }

        public deleteFiles_args() {
        }

        public deleteFiles_args(
                List<Integer> fids) {
            this();
            this.fids = fids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteFiles_args(deleteFiles_args other) {
            if (other.isSetFids()) {
                List<Integer> __this__fids = new ArrayList<Integer>(other.fids.size());
                for (Integer other_element : other.fids) {
                    __this__fids.add(other_element);
                }
                this.fids = __this__fids;
            }
        }

        public deleteFiles_args deepCopy() {
            return new deleteFiles_args(this);
        }

        @Override
        public void clear() {
            this.fids = null;
        }

        public int getFidsSize() {
            return (this.fids == null) ? 0 : this.fids.size();
        }

        public java.util.Iterator<Integer> getFidsIterator() {
            return (this.fids == null) ? null : this.fids.iterator();
        }

        public void addToFids(int elem) {
            if (this.fids == null) {
                this.fids = new ArrayList<Integer>();
            }
            this.fids.add(elem);
        }

        public List<Integer> getFids() {
            return this.fids;
        }

        public deleteFiles_args setFids(List<Integer> fids) {
            this.fids = fids;
            return this;
        }

        public void unsetFids() {
            this.fids = null;
        }

        /** Returns true if field fids is set (has been assigned a value) and false otherwise */
        public boolean isSetFids() {
            return this.fids != null;
        }

        public void setFidsIsSet(boolean value) {
            if (!value) {
                this.fids = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case FIDS:
                    if (value == null) {
                        unsetFids();
                    } else {
                        setFids((List<Integer>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case FIDS:
                    return getFids();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case FIDS:
                    return isSetFids();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteFiles_args)
                return this.equals((deleteFiles_args) that);
            return false;
        }

        public boolean equals(deleteFiles_args that) {
            if (that == null)
                return false;

            boolean this_present_fids = true && this.isSetFids();
            boolean that_present_fids = true && that.isSetFids();
            if (this_present_fids || that_present_fids) {
                if (!(this_present_fids && that_present_fids))
                    return false;
                if (!this.fids.equals(that.fids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_fids = true && (isSetFids());
            list.add(present_fids);
            if (present_fids)
                list.add(fids);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteFiles_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetFids()).compareTo(other.isSetFids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fids, other.fids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteFiles_args(");
            boolean first = true;

            sb.append("fids:");
            if (this.fids == null) {
                sb.append("null");
            } else {
                sb.append(this.fids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteFiles_argsStandardSchemeFactory implements SchemeFactory {
            public deleteFiles_argsStandardScheme getScheme() {
                return new deleteFiles_argsStandardScheme();
            }
        }

        private static class deleteFiles_argsStandardScheme extends StandardScheme<deleteFiles_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFiles_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // FIDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list290 = iprot.readListBegin();
                                    struct.fids = new ArrayList<Integer>(_list290.size);
                                    int _elem291;
                                    for (int _i292 = 0; _i292 < _list290.size; ++_i292) {
                                        _elem291 = iprot.readI32();
                                        struct.fids.add(_elem291);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setFidsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFiles_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.fids != null) {
                    oprot.writeFieldBegin(FIDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.fids.size()));
                        for (int _iter293 : struct.fids) {
                            oprot.writeI32(_iter293);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteFiles_argsTupleSchemeFactory implements SchemeFactory {
            public deleteFiles_argsTupleScheme getScheme() {
                return new deleteFiles_argsTupleScheme();
            }
        }

        private static class deleteFiles_argsTupleScheme extends TupleScheme<deleteFiles_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteFiles_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFids()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetFids()) {
                    {
                        oprot.writeI32(struct.fids.size());
                        for (int _iter294 : struct.fids) {
                            oprot.writeI32(_iter294);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteFiles_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list295 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.fids = new ArrayList<Integer>(_list295.size);
                        int _elem296;
                        for (int _i297 = 0; _i297 < _list295.size; ++_i297) {
                            _elem296 = iprot.readI32();
                            struct.fids.add(_elem296);
                        }
                    }
                    struct.setFidsIsSet(true);
                }
            }
        }

    }

    public static class deleteFiles_result implements org.apache.thrift.TBase<deleteFiles_result, deleteFiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFiles_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFiles_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deleteFiles_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteFiles_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public deleteFiles_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<deleteFiles_result> CREATOR = new android.os.Parcelable.Creator<deleteFiles_result>() {
            @Override
            public deleteFiles_result[] newArray(int size) {
                return new deleteFiles_result[size];
            }

            @Override
            public deleteFiles_result createFromParcel(android.os.Parcel in) {
                return new deleteFiles_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFiles_result.class, metaDataMap);
        }

        public deleteFiles_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteFiles_result(deleteFiles_result other) {
        }

        public deleteFiles_result deepCopy() {
            return new deleteFiles_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteFiles_result)
                return this.equals((deleteFiles_result) that);
            return false;
        }

        public boolean equals(deleteFiles_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteFiles_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteFiles_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteFiles_resultStandardSchemeFactory implements SchemeFactory {
            public deleteFiles_resultStandardScheme getScheme() {
                return new deleteFiles_resultStandardScheme();
            }
        }

        private static class deleteFiles_resultStandardScheme extends StandardScheme<deleteFiles_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFiles_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFiles_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteFiles_resultTupleSchemeFactory implements SchemeFactory {
            public deleteFiles_resultTupleScheme getScheme() {
                return new deleteFiles_resultTupleScheme();
            }
        }

        private static class deleteFiles_resultTupleScheme extends TupleScheme<deleteFiles_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteFiles_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteFiles_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class deletePackages_args implements org.apache.thrift.TBase<deletePackages_args, deletePackages_args._Fields>, java.io.Serializable, Cloneable, Comparable<deletePackages_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePackages_args");

        private static final org.apache.thrift.protocol.TField PIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("pids", org.apache.thrift.protocol.TType.LIST, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deletePackages_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deletePackages_argsTupleSchemeFactory());
        }

        public List<Integer> pids; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(pids);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public deletePackages_args(android.os.Parcel in) {
            this.pids = new ArrayList<Integer>();
            in.readList(this.pids, deletePackages_args.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<deletePackages_args> CREATOR = new android.os.Parcelable.Creator<deletePackages_args>() {
            @Override
            public deletePackages_args[] newArray(int size) {
                return new deletePackages_args[size];
            }

            @Override
            public deletePackages_args createFromParcel(android.os.Parcel in) {
                return new deletePackages_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PIDS((short) 1, "pids");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PIDS
                        return PIDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PIDS, new org.apache.thrift.meta_data.FieldMetaData("pids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID"))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePackages_args.class, metaDataMap);
        }

        public deletePackages_args() {
        }

        public deletePackages_args(
                List<Integer> pids) {
            this();
            this.pids = pids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deletePackages_args(deletePackages_args other) {
            if (other.isSetPids()) {
                List<Integer> __this__pids = new ArrayList<Integer>(other.pids.size());
                for (Integer other_element : other.pids) {
                    __this__pids.add(other_element);
                }
                this.pids = __this__pids;
            }
        }

        public deletePackages_args deepCopy() {
            return new deletePackages_args(this);
        }

        @Override
        public void clear() {
            this.pids = null;
        }

        public int getPidsSize() {
            return (this.pids == null) ? 0 : this.pids.size();
        }

        public java.util.Iterator<Integer> getPidsIterator() {
            return (this.pids == null) ? null : this.pids.iterator();
        }

        public void addToPids(int elem) {
            if (this.pids == null) {
                this.pids = new ArrayList<Integer>();
            }
            this.pids.add(elem);
        }

        public List<Integer> getPids() {
            return this.pids;
        }

        public deletePackages_args setPids(List<Integer> pids) {
            this.pids = pids;
            return this;
        }

        public void unsetPids() {
            this.pids = null;
        }

        /** Returns true if field pids is set (has been assigned a value) and false otherwise */
        public boolean isSetPids() {
            return this.pids != null;
        }

        public void setPidsIsSet(boolean value) {
            if (!value) {
                this.pids = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PIDS:
                    if (value == null) {
                        unsetPids();
                    } else {
                        setPids((List<Integer>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PIDS:
                    return getPids();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PIDS:
                    return isSetPids();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deletePackages_args)
                return this.equals((deletePackages_args) that);
            return false;
        }

        public boolean equals(deletePackages_args that) {
            if (that == null)
                return false;

            boolean this_present_pids = true && this.isSetPids();
            boolean that_present_pids = true && that.isSetPids();
            if (this_present_pids || that_present_pids) {
                if (!(this_present_pids && that_present_pids))
                    return false;
                if (!this.pids.equals(that.pids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pids = true && (isSetPids());
            list.add(present_pids);
            if (present_pids)
                list.add(pids);

            return list.hashCode();
        }

        @Override
        public int compareTo(deletePackages_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPids()).compareTo(other.isSetPids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pids, other.pids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deletePackages_args(");
            boolean first = true;

            sb.append("pids:");
            if (this.pids == null) {
                sb.append("null");
            } else {
                sb.append(this.pids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deletePackages_argsStandardSchemeFactory implements SchemeFactory {
            public deletePackages_argsStandardScheme getScheme() {
                return new deletePackages_argsStandardScheme();
            }
        }

        private static class deletePackages_argsStandardScheme extends StandardScheme<deletePackages_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deletePackages_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PIDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list298 = iprot.readListBegin();
                                    struct.pids = new ArrayList<Integer>(_list298.size);
                                    int _elem299;
                                    for (int _i300 = 0; _i300 < _list298.size; ++_i300) {
                                        _elem299 = iprot.readI32();
                                        struct.pids.add(_elem299);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setPidsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deletePackages_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.pids != null) {
                    oprot.writeFieldBegin(PIDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.pids.size()));
                        for (int _iter301 : struct.pids) {
                            oprot.writeI32(_iter301);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deletePackages_argsTupleSchemeFactory implements SchemeFactory {
            public deletePackages_argsTupleScheme getScheme() {
                return new deletePackages_argsTupleScheme();
            }
        }

        private static class deletePackages_argsTupleScheme extends TupleScheme<deletePackages_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deletePackages_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPids()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPids()) {
                    {
                        oprot.writeI32(struct.pids.size());
                        for (int _iter302 : struct.pids) {
                            oprot.writeI32(_iter302);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deletePackages_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list303 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.pids = new ArrayList<Integer>(_list303.size);
                        int _elem304;
                        for (int _i305 = 0; _i305 < _list303.size; ++_i305) {
                            _elem304 = iprot.readI32();
                            struct.pids.add(_elem304);
                        }
                    }
                    struct.setPidsIsSet(true);
                }
            }
        }

    }

    public static class deletePackages_result implements org.apache.thrift.TBase<deletePackages_result, deletePackages_result._Fields>, java.io.Serializable, Cloneable, Comparable<deletePackages_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deletePackages_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deletePackages_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deletePackages_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public deletePackages_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<deletePackages_result> CREATOR = new android.os.Parcelable.Creator<deletePackages_result>() {
            @Override
            public deletePackages_result[] newArray(int size) {
                return new deletePackages_result[size];
            }

            @Override
            public deletePackages_result createFromParcel(android.os.Parcel in) {
                return new deletePackages_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deletePackages_result.class, metaDataMap);
        }

        public deletePackages_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deletePackages_result(deletePackages_result other) {
        }

        public deletePackages_result deepCopy() {
            return new deletePackages_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deletePackages_result)
                return this.equals((deletePackages_result) that);
            return false;
        }

        public boolean equals(deletePackages_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(deletePackages_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deletePackages_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deletePackages_resultStandardSchemeFactory implements SchemeFactory {
            public deletePackages_resultStandardScheme getScheme() {
                return new deletePackages_resultStandardScheme();
            }
        }

        private static class deletePackages_resultStandardScheme extends StandardScheme<deletePackages_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deletePackages_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deletePackages_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deletePackages_resultTupleSchemeFactory implements SchemeFactory {
            public deletePackages_resultTupleScheme getScheme() {
                return new deletePackages_resultTupleScheme();
            }
        }

        private static class deletePackages_resultTupleScheme extends TupleScheme<deletePackages_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deletePackages_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deletePackages_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class pushToQueue_args implements org.apache.thrift.TBase<pushToQueue_args, pushToQueue_args._Fields>, java.io.Serializable, Cloneable, Comparable<pushToQueue_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushToQueue_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new pushToQueue_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new pushToQueue_argsTupleSchemeFactory());
        }

        public int pid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(pid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public pushToQueue_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.pid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<pushToQueue_args> CREATOR = new android.os.Parcelable.Creator<pushToQueue_args>() {
            @Override
            public pushToQueue_args[] newArray(int size) {
                return new pushToQueue_args[size];
            }

            @Override
            public pushToQueue_args createFromParcel(android.os.Parcel in) {
                return new pushToQueue_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short) 1, "pid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PID
                        return PID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushToQueue_args.class, metaDataMap);
        }

        public pushToQueue_args() {
        }

        public pushToQueue_args(
                int pid) {
            this();
            this.pid = pid;
            setPidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pushToQueue_args(pushToQueue_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
        }

        public pushToQueue_args deepCopy() {
            return new pushToQueue_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public pushToQueue_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof pushToQueue_args)
                return this.equals((pushToQueue_args) that);
            return false;
        }

        public boolean equals(pushToQueue_args that) {
            if (that == null)
                return false;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            return list.hashCode();
        }

        @Override
        public int compareTo(pushToQueue_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("pushToQueue_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class pushToQueue_argsStandardSchemeFactory implements SchemeFactory {
            public pushToQueue_argsStandardScheme getScheme() {
                return new pushToQueue_argsStandardScheme();
            }
        }

        private static class pushToQueue_argsStandardScheme extends StandardScheme<pushToQueue_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, pushToQueue_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, pushToQueue_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class pushToQueue_argsTupleSchemeFactory implements SchemeFactory {
            public pushToQueue_argsTupleScheme getScheme() {
                return new pushToQueue_argsTupleScheme();
            }
        }

        private static class pushToQueue_argsTupleScheme extends TupleScheme<pushToQueue_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, pushToQueue_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, pushToQueue_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
            }
        }

    }

    public static class pushToQueue_result implements org.apache.thrift.TBase<pushToQueue_result, pushToQueue_result._Fields>, java.io.Serializable, Cloneable, Comparable<pushToQueue_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushToQueue_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new pushToQueue_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new pushToQueue_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public pushToQueue_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<pushToQueue_result> CREATOR = new android.os.Parcelable.Creator<pushToQueue_result>() {
            @Override
            public pushToQueue_result[] newArray(int size) {
                return new pushToQueue_result[size];
            }

            @Override
            public pushToQueue_result createFromParcel(android.os.Parcel in) {
                return new pushToQueue_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushToQueue_result.class, metaDataMap);
        }

        public pushToQueue_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pushToQueue_result(pushToQueue_result other) {
        }

        public pushToQueue_result deepCopy() {
            return new pushToQueue_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof pushToQueue_result)
                return this.equals((pushToQueue_result) that);
            return false;
        }

        public boolean equals(pushToQueue_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(pushToQueue_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("pushToQueue_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class pushToQueue_resultStandardSchemeFactory implements SchemeFactory {
            public pushToQueue_resultStandardScheme getScheme() {
                return new pushToQueue_resultStandardScheme();
            }
        }

        private static class pushToQueue_resultStandardScheme extends StandardScheme<pushToQueue_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, pushToQueue_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, pushToQueue_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class pushToQueue_resultTupleSchemeFactory implements SchemeFactory {
            public pushToQueue_resultTupleScheme getScheme() {
                return new pushToQueue_resultTupleScheme();
            }
        }

        private static class pushToQueue_resultTupleScheme extends TupleScheme<pushToQueue_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, pushToQueue_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, pushToQueue_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class pullFromQueue_args implements org.apache.thrift.TBase<pullFromQueue_args, pullFromQueue_args._Fields>, java.io.Serializable, Cloneable, Comparable<pullFromQueue_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pullFromQueue_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new pullFromQueue_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new pullFromQueue_argsTupleSchemeFactory());
        }

        public int pid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(pid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public pullFromQueue_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.pid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<pullFromQueue_args> CREATOR = new android.os.Parcelable.Creator<pullFromQueue_args>() {
            @Override
            public pullFromQueue_args[] newArray(int size) {
                return new pullFromQueue_args[size];
            }

            @Override
            public pullFromQueue_args createFromParcel(android.os.Parcel in) {
                return new pullFromQueue_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short) 1, "pid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PID
                        return PID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pullFromQueue_args.class, metaDataMap);
        }

        public pullFromQueue_args() {
        }

        public pullFromQueue_args(
                int pid) {
            this();
            this.pid = pid;
            setPidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pullFromQueue_args(pullFromQueue_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
        }

        public pullFromQueue_args deepCopy() {
            return new pullFromQueue_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public pullFromQueue_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof pullFromQueue_args)
                return this.equals((pullFromQueue_args) that);
            return false;
        }

        public boolean equals(pullFromQueue_args that) {
            if (that == null)
                return false;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            return list.hashCode();
        }

        @Override
        public int compareTo(pullFromQueue_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("pullFromQueue_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class pullFromQueue_argsStandardSchemeFactory implements SchemeFactory {
            public pullFromQueue_argsStandardScheme getScheme() {
                return new pullFromQueue_argsStandardScheme();
            }
        }

        private static class pullFromQueue_argsStandardScheme extends StandardScheme<pullFromQueue_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, pullFromQueue_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, pullFromQueue_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class pullFromQueue_argsTupleSchemeFactory implements SchemeFactory {
            public pullFromQueue_argsTupleScheme getScheme() {
                return new pullFromQueue_argsTupleScheme();
            }
        }

        private static class pullFromQueue_argsTupleScheme extends TupleScheme<pullFromQueue_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, pullFromQueue_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, pullFromQueue_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
            }
        }

    }

    public static class pullFromQueue_result implements org.apache.thrift.TBase<pullFromQueue_result, pullFromQueue_result._Fields>, java.io.Serializable, Cloneable, Comparable<pullFromQueue_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pullFromQueue_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new pullFromQueue_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new pullFromQueue_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public pullFromQueue_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<pullFromQueue_result> CREATOR = new android.os.Parcelable.Creator<pullFromQueue_result>() {
            @Override
            public pullFromQueue_result[] newArray(int size) {
                return new pullFromQueue_result[size];
            }

            @Override
            public pullFromQueue_result createFromParcel(android.os.Parcel in) {
                return new pullFromQueue_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pullFromQueue_result.class, metaDataMap);
        }

        public pullFromQueue_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pullFromQueue_result(pullFromQueue_result other) {
        }

        public pullFromQueue_result deepCopy() {
            return new pullFromQueue_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof pullFromQueue_result)
                return this.equals((pullFromQueue_result) that);
            return false;
        }

        public boolean equals(pullFromQueue_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(pullFromQueue_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("pullFromQueue_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class pullFromQueue_resultStandardSchemeFactory implements SchemeFactory {
            public pullFromQueue_resultStandardScheme getScheme() {
                return new pullFromQueue_resultStandardScheme();
            }
        }

        private static class pullFromQueue_resultStandardScheme extends StandardScheme<pullFromQueue_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, pullFromQueue_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, pullFromQueue_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class pullFromQueue_resultTupleSchemeFactory implements SchemeFactory {
            public pullFromQueue_resultTupleScheme getScheme() {
                return new pullFromQueue_resultTupleScheme();
            }
        }

        private static class pullFromQueue_resultTupleScheme extends TupleScheme<pullFromQueue_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, pullFromQueue_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, pullFromQueue_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class restartPackage_args implements org.apache.thrift.TBase<restartPackage_args, restartPackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<restartPackage_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartPackage_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new restartPackage_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new restartPackage_argsTupleSchemeFactory());
        }

        public int pid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(pid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public restartPackage_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.pid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<restartPackage_args> CREATOR = new android.os.Parcelable.Creator<restartPackage_args>() {
            @Override
            public restartPackage_args[] newArray(int size) {
                return new restartPackage_args[size];
            }

            @Override
            public restartPackage_args createFromParcel(android.os.Parcel in) {
                return new restartPackage_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short) 1, "pid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PID
                        return PID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartPackage_args.class, metaDataMap);
        }

        public restartPackage_args() {
        }

        public restartPackage_args(
                int pid) {
            this();
            this.pid = pid;
            setPidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public restartPackage_args(restartPackage_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
        }

        public restartPackage_args deepCopy() {
            return new restartPackage_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public restartPackage_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof restartPackage_args)
                return this.equals((restartPackage_args) that);
            return false;
        }

        public boolean equals(restartPackage_args that) {
            if (that == null)
                return false;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            return list.hashCode();
        }

        @Override
        public int compareTo(restartPackage_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("restartPackage_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class restartPackage_argsStandardSchemeFactory implements SchemeFactory {
            public restartPackage_argsStandardScheme getScheme() {
                return new restartPackage_argsStandardScheme();
            }
        }

        private static class restartPackage_argsStandardScheme extends StandardScheme<restartPackage_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, restartPackage_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, restartPackage_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class restartPackage_argsTupleSchemeFactory implements SchemeFactory {
            public restartPackage_argsTupleScheme getScheme() {
                return new restartPackage_argsTupleScheme();
            }
        }

        private static class restartPackage_argsTupleScheme extends TupleScheme<restartPackage_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, restartPackage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, restartPackage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
            }
        }

    }

    public static class restartPackage_result implements org.apache.thrift.TBase<restartPackage_result, restartPackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<restartPackage_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartPackage_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new restartPackage_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new restartPackage_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public restartPackage_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<restartPackage_result> CREATOR = new android.os.Parcelable.Creator<restartPackage_result>() {
            @Override
            public restartPackage_result[] newArray(int size) {
                return new restartPackage_result[size];
            }

            @Override
            public restartPackage_result createFromParcel(android.os.Parcel in) {
                return new restartPackage_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartPackage_result.class, metaDataMap);
        }

        public restartPackage_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public restartPackage_result(restartPackage_result other) {
        }

        public restartPackage_result deepCopy() {
            return new restartPackage_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof restartPackage_result)
                return this.equals((restartPackage_result) that);
            return false;
        }

        public boolean equals(restartPackage_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(restartPackage_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("restartPackage_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class restartPackage_resultStandardSchemeFactory implements SchemeFactory {
            public restartPackage_resultStandardScheme getScheme() {
                return new restartPackage_resultStandardScheme();
            }
        }

        private static class restartPackage_resultStandardScheme extends StandardScheme<restartPackage_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, restartPackage_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, restartPackage_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class restartPackage_resultTupleSchemeFactory implements SchemeFactory {
            public restartPackage_resultTupleScheme getScheme() {
                return new restartPackage_resultTupleScheme();
            }
        }

        private static class restartPackage_resultTupleScheme extends TupleScheme<restartPackage_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, restartPackage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, restartPackage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class restartFile_args implements org.apache.thrift.TBase<restartFile_args, restartFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<restartFile_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartFile_args");

        private static final org.apache.thrift.protocol.TField FID_FIELD_DESC = new org.apache.thrift.protocol.TField("fid", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new restartFile_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new restartFile_argsTupleSchemeFactory());
        }

        public int fid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(fid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public restartFile_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.fid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<restartFile_args> CREATOR = new android.os.Parcelable.Creator<restartFile_args>() {
            @Override
            public restartFile_args[] newArray(int size) {
                return new restartFile_args[size];
            }

            @Override
            public restartFile_args createFromParcel(android.os.Parcel in) {
                return new restartFile_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FID((short) 1, "fid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // FID
                        return FID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __FID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FID, new org.apache.thrift.meta_data.FieldMetaData("fid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "FileID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartFile_args.class, metaDataMap);
        }

        public restartFile_args() {
        }

        public restartFile_args(
                int fid) {
            this();
            this.fid = fid;
            setFidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public restartFile_args(restartFile_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.fid = other.fid;
        }

        public restartFile_args deepCopy() {
            return new restartFile_args(this);
        }

        @Override
        public void clear() {
            setFidIsSet(false);
            this.fid = 0;
        }

        public int getFid() {
            return this.fid;
        }

        public restartFile_args setFid(int fid) {
            this.fid = fid;
            setFidIsSet(true);
            return this;
        }

        public void unsetFid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FID_ISSET_ID);
        }

        /** Returns true if field fid is set (has been assigned a value) and false otherwise */
        public boolean isSetFid() {
            return EncodingUtils.testBit(__isset_bitfield, __FID_ISSET_ID);
        }

        public void setFidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case FID:
                    if (value == null) {
                        unsetFid();
                    } else {
                        setFid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case FID:
                    return getFid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case FID:
                    return isSetFid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof restartFile_args)
                return this.equals((restartFile_args) that);
            return false;
        }

        public boolean equals(restartFile_args that) {
            if (that == null)
                return false;

            boolean this_present_fid = true;
            boolean that_present_fid = true;
            if (this_present_fid || that_present_fid) {
                if (!(this_present_fid && that_present_fid))
                    return false;
                if (this.fid != that.fid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_fid = true;
            list.add(present_fid);
            if (present_fid)
                list.add(fid);

            return list.hashCode();
        }

        @Override
        public int compareTo(restartFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetFid()).compareTo(other.isSetFid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fid, other.fid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("restartFile_args(");
            boolean first = true;

            sb.append("fid:");
            sb.append(this.fid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class restartFile_argsStandardSchemeFactory implements SchemeFactory {
            public restartFile_argsStandardScheme getScheme() {
                return new restartFile_argsStandardScheme();
            }
        }

        private static class restartFile_argsStandardScheme extends StandardScheme<restartFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, restartFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // FID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.fid = iprot.readI32();
                                struct.setFidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, restartFile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(FID_FIELD_DESC);
                oprot.writeI32(struct.fid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class restartFile_argsTupleSchemeFactory implements SchemeFactory {
            public restartFile_argsTupleScheme getScheme() {
                return new restartFile_argsTupleScheme();
            }
        }

        private static class restartFile_argsTupleScheme extends TupleScheme<restartFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, restartFile_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetFid()) {
                    oprot.writeI32(struct.fid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, restartFile_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.fid = iprot.readI32();
                    struct.setFidIsSet(true);
                }
            }
        }

    }

    public static class restartFile_result implements org.apache.thrift.TBase<restartFile_result, restartFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<restartFile_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartFile_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new restartFile_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new restartFile_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public restartFile_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<restartFile_result> CREATOR = new android.os.Parcelable.Creator<restartFile_result>() {
            @Override
            public restartFile_result[] newArray(int size) {
                return new restartFile_result[size];
            }

            @Override
            public restartFile_result createFromParcel(android.os.Parcel in) {
                return new restartFile_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartFile_result.class, metaDataMap);
        }

        public restartFile_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public restartFile_result(restartFile_result other) {
        }

        public restartFile_result deepCopy() {
            return new restartFile_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof restartFile_result)
                return this.equals((restartFile_result) that);
            return false;
        }

        public boolean equals(restartFile_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(restartFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("restartFile_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class restartFile_resultStandardSchemeFactory implements SchemeFactory {
            public restartFile_resultStandardScheme getScheme() {
                return new restartFile_resultStandardScheme();
            }
        }

        private static class restartFile_resultStandardScheme extends StandardScheme<restartFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, restartFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, restartFile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class restartFile_resultTupleSchemeFactory implements SchemeFactory {
            public restartFile_resultTupleScheme getScheme() {
                return new restartFile_resultTupleScheme();
            }
        }

        private static class restartFile_resultTupleScheme extends TupleScheme<restartFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, restartFile_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, restartFile_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class recheckPackage_args implements org.apache.thrift.TBase<recheckPackage_args, recheckPackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<recheckPackage_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recheckPackage_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new recheckPackage_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new recheckPackage_argsTupleSchemeFactory());
        }

        public int pid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(pid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public recheckPackage_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.pid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<recheckPackage_args> CREATOR = new android.os.Parcelable.Creator<recheckPackage_args>() {
            @Override
            public recheckPackage_args[] newArray(int size) {
                return new recheckPackage_args[size];
            }

            @Override
            public recheckPackage_args createFromParcel(android.os.Parcel in) {
                return new recheckPackage_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short) 1, "pid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PID
                        return PID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recheckPackage_args.class, metaDataMap);
        }

        public recheckPackage_args() {
        }

        public recheckPackage_args(
                int pid) {
            this();
            this.pid = pid;
            setPidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public recheckPackage_args(recheckPackage_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
        }

        public recheckPackage_args deepCopy() {
            return new recheckPackage_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public recheckPackage_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof recheckPackage_args)
                return this.equals((recheckPackage_args) that);
            return false;
        }

        public boolean equals(recheckPackage_args that) {
            if (that == null)
                return false;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            return list.hashCode();
        }

        @Override
        public int compareTo(recheckPackage_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("recheckPackage_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class recheckPackage_argsStandardSchemeFactory implements SchemeFactory {
            public recheckPackage_argsStandardScheme getScheme() {
                return new recheckPackage_argsStandardScheme();
            }
        }

        private static class recheckPackage_argsStandardScheme extends StandardScheme<recheckPackage_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, recheckPackage_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, recheckPackage_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class recheckPackage_argsTupleSchemeFactory implements SchemeFactory {
            public recheckPackage_argsTupleScheme getScheme() {
                return new recheckPackage_argsTupleScheme();
            }
        }

        private static class recheckPackage_argsTupleScheme extends TupleScheme<recheckPackage_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, recheckPackage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, recheckPackage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
            }
        }

    }

    public static class recheckPackage_result implements org.apache.thrift.TBase<recheckPackage_result, recheckPackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<recheckPackage_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("recheckPackage_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new recheckPackage_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new recheckPackage_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public recheckPackage_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<recheckPackage_result> CREATOR = new android.os.Parcelable.Creator<recheckPackage_result>() {
            @Override
            public recheckPackage_result[] newArray(int size) {
                return new recheckPackage_result[size];
            }

            @Override
            public recheckPackage_result createFromParcel(android.os.Parcel in) {
                return new recheckPackage_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(recheckPackage_result.class, metaDataMap);
        }

        public recheckPackage_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public recheckPackage_result(recheckPackage_result other) {
        }

        public recheckPackage_result deepCopy() {
            return new recheckPackage_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof recheckPackage_result)
                return this.equals((recheckPackage_result) that);
            return false;
        }

        public boolean equals(recheckPackage_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(recheckPackage_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("recheckPackage_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class recheckPackage_resultStandardSchemeFactory implements SchemeFactory {
            public recheckPackage_resultStandardScheme getScheme() {
                return new recheckPackage_resultStandardScheme();
            }
        }

        private static class recheckPackage_resultStandardScheme extends StandardScheme<recheckPackage_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, recheckPackage_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, recheckPackage_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class recheckPackage_resultTupleSchemeFactory implements SchemeFactory {
            public recheckPackage_resultTupleScheme getScheme() {
                return new recheckPackage_resultTupleScheme();
            }
        }

        private static class recheckPackage_resultTupleScheme extends TupleScheme<recheckPackage_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, recheckPackage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, recheckPackage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class stopAllDownloads_args implements org.apache.thrift.TBase<stopAllDownloads_args, stopAllDownloads_args._Fields>, java.io.Serializable, Cloneable, Comparable<stopAllDownloads_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopAllDownloads_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new stopAllDownloads_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new stopAllDownloads_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public stopAllDownloads_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<stopAllDownloads_args> CREATOR = new android.os.Parcelable.Creator<stopAllDownloads_args>() {
            @Override
            public stopAllDownloads_args[] newArray(int size) {
                return new stopAllDownloads_args[size];
            }

            @Override
            public stopAllDownloads_args createFromParcel(android.os.Parcel in) {
                return new stopAllDownloads_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopAllDownloads_args.class, metaDataMap);
        }

        public stopAllDownloads_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public stopAllDownloads_args(stopAllDownloads_args other) {
        }

        public stopAllDownloads_args deepCopy() {
            return new stopAllDownloads_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof stopAllDownloads_args)
                return this.equals((stopAllDownloads_args) that);
            return false;
        }

        public boolean equals(stopAllDownloads_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(stopAllDownloads_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("stopAllDownloads_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class stopAllDownloads_argsStandardSchemeFactory implements SchemeFactory {
            public stopAllDownloads_argsStandardScheme getScheme() {
                return new stopAllDownloads_argsStandardScheme();
            }
        }

        private static class stopAllDownloads_argsStandardScheme extends StandardScheme<stopAllDownloads_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, stopAllDownloads_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, stopAllDownloads_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class stopAllDownloads_argsTupleSchemeFactory implements SchemeFactory {
            public stopAllDownloads_argsTupleScheme getScheme() {
                return new stopAllDownloads_argsTupleScheme();
            }
        }

        private static class stopAllDownloads_argsTupleScheme extends TupleScheme<stopAllDownloads_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, stopAllDownloads_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, stopAllDownloads_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class stopAllDownloads_result implements org.apache.thrift.TBase<stopAllDownloads_result, stopAllDownloads_result._Fields>, java.io.Serializable, Cloneable, Comparable<stopAllDownloads_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopAllDownloads_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new stopAllDownloads_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new stopAllDownloads_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public stopAllDownloads_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<stopAllDownloads_result> CREATOR = new android.os.Parcelable.Creator<stopAllDownloads_result>() {
            @Override
            public stopAllDownloads_result[] newArray(int size) {
                return new stopAllDownloads_result[size];
            }

            @Override
            public stopAllDownloads_result createFromParcel(android.os.Parcel in) {
                return new stopAllDownloads_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopAllDownloads_result.class, metaDataMap);
        }

        public stopAllDownloads_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public stopAllDownloads_result(stopAllDownloads_result other) {
        }

        public stopAllDownloads_result deepCopy() {
            return new stopAllDownloads_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof stopAllDownloads_result)
                return this.equals((stopAllDownloads_result) that);
            return false;
        }

        public boolean equals(stopAllDownloads_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(stopAllDownloads_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("stopAllDownloads_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class stopAllDownloads_resultStandardSchemeFactory implements SchemeFactory {
            public stopAllDownloads_resultStandardScheme getScheme() {
                return new stopAllDownloads_resultStandardScheme();
            }
        }

        private static class stopAllDownloads_resultStandardScheme extends StandardScheme<stopAllDownloads_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, stopAllDownloads_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, stopAllDownloads_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class stopAllDownloads_resultTupleSchemeFactory implements SchemeFactory {
            public stopAllDownloads_resultTupleScheme getScheme() {
                return new stopAllDownloads_resultTupleScheme();
            }
        }

        private static class stopAllDownloads_resultTupleScheme extends TupleScheme<stopAllDownloads_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, stopAllDownloads_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, stopAllDownloads_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class stopDownloads_args implements org.apache.thrift.TBase<stopDownloads_args, stopDownloads_args._Fields>, java.io.Serializable, Cloneable, Comparable<stopDownloads_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopDownloads_args");

        private static final org.apache.thrift.protocol.TField FIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fids", org.apache.thrift.protocol.TType.LIST, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new stopDownloads_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new stopDownloads_argsTupleSchemeFactory());
        }

        public List<Integer> fids; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(fids);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public stopDownloads_args(android.os.Parcel in) {
            this.fids = new ArrayList<Integer>();
            in.readList(this.fids, stopDownloads_args.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<stopDownloads_args> CREATOR = new android.os.Parcelable.Creator<stopDownloads_args>() {
            @Override
            public stopDownloads_args[] newArray(int size) {
                return new stopDownloads_args[size];
            }

            @Override
            public stopDownloads_args createFromParcel(android.os.Parcel in) {
                return new stopDownloads_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FIDS((short) 1, "fids");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // FIDS
                        return FIDS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FIDS, new org.apache.thrift.meta_data.FieldMetaData("fids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "FileID"))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopDownloads_args.class, metaDataMap);
        }

        public stopDownloads_args() {
        }

        public stopDownloads_args(
                List<Integer> fids) {
            this();
            this.fids = fids;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public stopDownloads_args(stopDownloads_args other) {
            if (other.isSetFids()) {
                List<Integer> __this__fids = new ArrayList<Integer>(other.fids.size());
                for (Integer other_element : other.fids) {
                    __this__fids.add(other_element);
                }
                this.fids = __this__fids;
            }
        }

        public stopDownloads_args deepCopy() {
            return new stopDownloads_args(this);
        }

        @Override
        public void clear() {
            this.fids = null;
        }

        public int getFidsSize() {
            return (this.fids == null) ? 0 : this.fids.size();
        }

        public java.util.Iterator<Integer> getFidsIterator() {
            return (this.fids == null) ? null : this.fids.iterator();
        }

        public void addToFids(int elem) {
            if (this.fids == null) {
                this.fids = new ArrayList<Integer>();
            }
            this.fids.add(elem);
        }

        public List<Integer> getFids() {
            return this.fids;
        }

        public stopDownloads_args setFids(List<Integer> fids) {
            this.fids = fids;
            return this;
        }

        public void unsetFids() {
            this.fids = null;
        }

        /** Returns true if field fids is set (has been assigned a value) and false otherwise */
        public boolean isSetFids() {
            return this.fids != null;
        }

        public void setFidsIsSet(boolean value) {
            if (!value) {
                this.fids = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case FIDS:
                    if (value == null) {
                        unsetFids();
                    } else {
                        setFids((List<Integer>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case FIDS:
                    return getFids();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case FIDS:
                    return isSetFids();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof stopDownloads_args)
                return this.equals((stopDownloads_args) that);
            return false;
        }

        public boolean equals(stopDownloads_args that) {
            if (that == null)
                return false;

            boolean this_present_fids = true && this.isSetFids();
            boolean that_present_fids = true && that.isSetFids();
            if (this_present_fids || that_present_fids) {
                if (!(this_present_fids && that_present_fids))
                    return false;
                if (!this.fids.equals(that.fids))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_fids = true && (isSetFids());
            list.add(present_fids);
            if (present_fids)
                list.add(fids);

            return list.hashCode();
        }

        @Override
        public int compareTo(stopDownloads_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetFids()).compareTo(other.isSetFids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fids, other.fids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("stopDownloads_args(");
            boolean first = true;

            sb.append("fids:");
            if (this.fids == null) {
                sb.append("null");
            } else {
                sb.append(this.fids);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class stopDownloads_argsStandardSchemeFactory implements SchemeFactory {
            public stopDownloads_argsStandardScheme getScheme() {
                return new stopDownloads_argsStandardScheme();
            }
        }

        private static class stopDownloads_argsStandardScheme extends StandardScheme<stopDownloads_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, stopDownloads_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // FIDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list306 = iprot.readListBegin();
                                    struct.fids = new ArrayList<Integer>(_list306.size);
                                    int _elem307;
                                    for (int _i308 = 0; _i308 < _list306.size; ++_i308) {
                                        _elem307 = iprot.readI32();
                                        struct.fids.add(_elem307);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setFidsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, stopDownloads_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.fids != null) {
                    oprot.writeFieldBegin(FIDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.fids.size()));
                        for (int _iter309 : struct.fids) {
                            oprot.writeI32(_iter309);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class stopDownloads_argsTupleSchemeFactory implements SchemeFactory {
            public stopDownloads_argsTupleScheme getScheme() {
                return new stopDownloads_argsTupleScheme();
            }
        }

        private static class stopDownloads_argsTupleScheme extends TupleScheme<stopDownloads_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, stopDownloads_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFids()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetFids()) {
                    {
                        oprot.writeI32(struct.fids.size());
                        for (int _iter310 : struct.fids) {
                            oprot.writeI32(_iter310);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, stopDownloads_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list311 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.fids = new ArrayList<Integer>(_list311.size);
                        int _elem312;
                        for (int _i313 = 0; _i313 < _list311.size; ++_i313) {
                            _elem312 = iprot.readI32();
                            struct.fids.add(_elem312);
                        }
                    }
                    struct.setFidsIsSet(true);
                }
            }
        }

    }

    public static class stopDownloads_result implements org.apache.thrift.TBase<stopDownloads_result, stopDownloads_result._Fields>, java.io.Serializable, Cloneable, Comparable<stopDownloads_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopDownloads_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new stopDownloads_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new stopDownloads_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public stopDownloads_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<stopDownloads_result> CREATOR = new android.os.Parcelable.Creator<stopDownloads_result>() {
            @Override
            public stopDownloads_result[] newArray(int size) {
                return new stopDownloads_result[size];
            }

            @Override
            public stopDownloads_result createFromParcel(android.os.Parcel in) {
                return new stopDownloads_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopDownloads_result.class, metaDataMap);
        }

        public stopDownloads_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public stopDownloads_result(stopDownloads_result other) {
        }

        public stopDownloads_result deepCopy() {
            return new stopDownloads_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof stopDownloads_result)
                return this.equals((stopDownloads_result) that);
            return false;
        }

        public boolean equals(stopDownloads_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(stopDownloads_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("stopDownloads_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class stopDownloads_resultStandardSchemeFactory implements SchemeFactory {
            public stopDownloads_resultStandardScheme getScheme() {
                return new stopDownloads_resultStandardScheme();
            }
        }

        private static class stopDownloads_resultStandardScheme extends StandardScheme<stopDownloads_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, stopDownloads_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, stopDownloads_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class stopDownloads_resultTupleSchemeFactory implements SchemeFactory {
            public stopDownloads_resultTupleScheme getScheme() {
                return new stopDownloads_resultTupleScheme();
            }
        }

        private static class stopDownloads_resultTupleScheme extends TupleScheme<stopDownloads_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, stopDownloads_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, stopDownloads_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class setPackageName_args implements org.apache.thrift.TBase<setPackageName_args, setPackageName_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPackageName_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPackageName_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new setPackageName_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new setPackageName_argsTupleSchemeFactory());
        }

        public int pid; // required
        public String name; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(pid);
            out.writeString(name);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public setPackageName_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.pid = in.readInt();
            this.name = in.readString();
        }

        public static final android.os.Parcelable.Creator<setPackageName_args> CREATOR = new android.os.Parcelable.Creator<setPackageName_args>() {
            @Override
            public setPackageName_args[] newArray(int size) {
                return new setPackageName_args[size];
            }

            @Override
            public setPackageName_args createFromParcel(android.os.Parcel in) {
                return new setPackageName_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short) 1, "pid"),
            NAME((short) 2, "name");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PID
                        return PID;
                    case 2: // NAME
                        return NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPackageName_args.class, metaDataMap);
        }

        public setPackageName_args() {
        }

        public setPackageName_args(
                int pid,
                String name) {
            this();
            this.pid = pid;
            setPidIsSet(true);
            this.name = name;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setPackageName_args(setPackageName_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
            if (other.isSetName()) {
                this.name = other.name;
            }
        }

        public setPackageName_args deepCopy() {
            return new setPackageName_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
            this.name = null;
        }

        public int getPid() {
            return this.pid;
        }

        public setPackageName_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public String getName() {
            return this.name;
        }

        public setPackageName_args setName(String name) {
            this.name = name;
            return this;
        }

        public void unsetName() {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName() {
            return this.name != null;
        }

        public void setNameIsSet(boolean value) {
            if (!value) {
                this.name = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

                case NAME:
                    if (value == null) {
                        unsetName();
                    } else {
                        setName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

                case NAME:
                    return getName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
                case NAME:
                    return isSetName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof setPackageName_args)
                return this.equals((setPackageName_args) that);
            return false;
        }

        public boolean equals(setPackageName_args that) {
            if (that == null)
                return false;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name) {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            boolean present_name = true && (isSetName());
            list.add(present_name);
            if (present_name)
                list.add(name);

            return list.hashCode();
        }

        @Override
        public int compareTo(setPackageName_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetName()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("setPackageName_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            if (!first) sb.append(", ");
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            } else {
                sb.append(this.name);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setPackageName_argsStandardSchemeFactory implements SchemeFactory {
            public setPackageName_argsStandardScheme getScheme() {
                return new setPackageName_argsStandardScheme();
            }
        }

        private static class setPackageName_argsStandardScheme extends StandardScheme<setPackageName_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setPackageName_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setPackageName_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                if (struct.name != null) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setPackageName_argsTupleSchemeFactory implements SchemeFactory {
            public setPackageName_argsTupleScheme getScheme() {
                return new setPackageName_argsTupleScheme();
            }
        }

        private static class setPackageName_argsTupleScheme extends TupleScheme<setPackageName_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setPackageName_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                if (struct.isSetName()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
                if (struct.isSetName()) {
                    oprot.writeString(struct.name);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setPackageName_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
            }
        }

    }

    public static class setPackageName_result implements org.apache.thrift.TBase<setPackageName_result, setPackageName_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPackageName_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPackageName_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new setPackageName_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new setPackageName_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public setPackageName_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<setPackageName_result> CREATOR = new android.os.Parcelable.Creator<setPackageName_result>() {
            @Override
            public setPackageName_result[] newArray(int size) {
                return new setPackageName_result[size];
            }

            @Override
            public setPackageName_result createFromParcel(android.os.Parcel in) {
                return new setPackageName_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPackageName_result.class, metaDataMap);
        }

        public setPackageName_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setPackageName_result(setPackageName_result other) {
        }

        public setPackageName_result deepCopy() {
            return new setPackageName_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof setPackageName_result)
                return this.equals((setPackageName_result) that);
            return false;
        }

        public boolean equals(setPackageName_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(setPackageName_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("setPackageName_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setPackageName_resultStandardSchemeFactory implements SchemeFactory {
            public setPackageName_resultStandardScheme getScheme() {
                return new setPackageName_resultStandardScheme();
            }
        }

        private static class setPackageName_resultStandardScheme extends StandardScheme<setPackageName_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setPackageName_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setPackageName_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setPackageName_resultTupleSchemeFactory implements SchemeFactory {
            public setPackageName_resultTupleScheme getScheme() {
                return new setPackageName_resultTupleScheme();
            }
        }

        private static class setPackageName_resultTupleScheme extends TupleScheme<setPackageName_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setPackageName_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setPackageName_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class movePackage_args implements org.apache.thrift.TBase<movePackage_args, movePackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<movePackage_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("movePackage_args");

        private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new movePackage_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new movePackage_argsTupleSchemeFactory());
        }

        /**
         *
         * @see Destination
         */
        public Destination destination; // required
        public int pid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(destination.getValue());
            out.writeInt(pid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public movePackage_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.destination = Destination.findByValue(in.readInt());
            this.pid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<movePackage_args> CREATOR = new android.os.Parcelable.Creator<movePackage_args>() {
            @Override
            public movePackage_args[] newArray(int size) {
                return new movePackage_args[size];
            }

            @Override
            public movePackage_args createFromParcel(android.os.Parcel in) {
                return new movePackage_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            /**
             *
             * @see Destination
             */
            DESTINATION((short) 1, "destination"),
            PID((short) 2, "pid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // DESTINATION
                        return DESTINATION;
                    case 2: // PID
                        return PID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Destination.class)));
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(movePackage_args.class, metaDataMap);
        }

        public movePackage_args() {
        }

        public movePackage_args(
                Destination destination,
                int pid) {
            this();
            this.destination = destination;
            this.pid = pid;
            setPidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public movePackage_args(movePackage_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetDestination()) {
                this.destination = other.destination;
            }
            this.pid = other.pid;
        }

        public movePackage_args deepCopy() {
            return new movePackage_args(this);
        }

        @Override
        public void clear() {
            this.destination = null;
            setPidIsSet(false);
            this.pid = 0;
        }

        /**
         *
         * @see Destination
         */
        public Destination getDestination() {
            return this.destination;
        }

        /**
         *
         * @see Destination
         */
        public movePackage_args setDestination(Destination destination) {
            this.destination = destination;
            return this;
        }

        public void unsetDestination() {
            this.destination = null;
        }

        /** Returns true if field destination is set (has been assigned a value) and false otherwise */
        public boolean isSetDestination() {
            return this.destination != null;
        }

        public void setDestinationIsSet(boolean value) {
            if (!value) {
                this.destination = null;
            }
        }

        public int getPid() {
            return this.pid;
        }

        public movePackage_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case DESTINATION:
                    if (value == null) {
                        unsetDestination();
                    } else {
                        setDestination((Destination) value);
                    }
                    break;

                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case DESTINATION:
                    return getDestination();

                case PID:
                    return getPid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case DESTINATION:
                    return isSetDestination();
                case PID:
                    return isSetPid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof movePackage_args)
                return this.equals((movePackage_args) that);
            return false;
        }

        public boolean equals(movePackage_args that) {
            if (that == null)
                return false;

            boolean this_present_destination = true && this.isSetDestination();
            boolean that_present_destination = true && that.isSetDestination();
            if (this_present_destination || that_present_destination) {
                if (!(this_present_destination && that_present_destination))
                    return false;
                if (!this.destination.equals(that.destination))
                    return false;
            }

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_destination = true && (isSetDestination());
            list.add(present_destination);
            if (present_destination)
                list.add(destination.getValue());

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            return list.hashCode();
        }

        @Override
        public int compareTo(movePackage_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDestination()).compareTo(other.isSetDestination());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDestination()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, other.destination);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("movePackage_args(");
            boolean first = true;

            sb.append("destination:");
            if (this.destination == null) {
                sb.append("null");
            } else {
                sb.append(this.destination);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class movePackage_argsStandardSchemeFactory implements SchemeFactory {
            public movePackage_argsStandardScheme getScheme() {
                return new movePackage_argsStandardScheme();
            }
        }

        private static class movePackage_argsStandardScheme extends StandardScheme<movePackage_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, movePackage_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // DESTINATION
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.destination = org.pyload.thrift.Destination.findByValue(iprot.readI32());
                                struct.setDestinationIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, movePackage_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.destination != null) {
                    oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
                    oprot.writeI32(struct.destination.getValue());
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class movePackage_argsTupleSchemeFactory implements SchemeFactory {
            public movePackage_argsTupleScheme getScheme() {
                return new movePackage_argsTupleScheme();
            }
        }

        private static class movePackage_argsTupleScheme extends TupleScheme<movePackage_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, movePackage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDestination()) {
                    optionals.set(0);
                }
                if (struct.isSetPid()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetDestination()) {
                    oprot.writeI32(struct.destination.getValue());
                }
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, movePackage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.destination = org.pyload.thrift.Destination.findByValue(iprot.readI32());
                    struct.setDestinationIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
            }
        }

    }

    public static class movePackage_result implements org.apache.thrift.TBase<movePackage_result, movePackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<movePackage_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("movePackage_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new movePackage_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new movePackage_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public movePackage_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<movePackage_result> CREATOR = new android.os.Parcelable.Creator<movePackage_result>() {
            @Override
            public movePackage_result[] newArray(int size) {
                return new movePackage_result[size];
            }

            @Override
            public movePackage_result createFromParcel(android.os.Parcel in) {
                return new movePackage_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(movePackage_result.class, metaDataMap);
        }

        public movePackage_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public movePackage_result(movePackage_result other) {
        }

        public movePackage_result deepCopy() {
            return new movePackage_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof movePackage_result)
                return this.equals((movePackage_result) that);
            return false;
        }

        public boolean equals(movePackage_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(movePackage_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("movePackage_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class movePackage_resultStandardSchemeFactory implements SchemeFactory {
            public movePackage_resultStandardScheme getScheme() {
                return new movePackage_resultStandardScheme();
            }
        }

        private static class movePackage_resultStandardScheme extends StandardScheme<movePackage_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, movePackage_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, movePackage_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class movePackage_resultTupleSchemeFactory implements SchemeFactory {
            public movePackage_resultTupleScheme getScheme() {
                return new movePackage_resultTupleScheme();
            }
        }

        private static class movePackage_resultTupleScheme extends TupleScheme<movePackage_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, movePackage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, movePackage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class moveFiles_args implements org.apache.thrift.TBase<moveFiles_args, moveFiles_args._Fields>, java.io.Serializable, Cloneable, Comparable<moveFiles_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveFiles_args");

        private static final org.apache.thrift.protocol.TField FIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fids", org.apache.thrift.protocol.TType.LIST, (short) 1);
        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new moveFiles_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new moveFiles_argsTupleSchemeFactory());
        }

        public List<Integer> fids; // required
        public int pid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeList(fids);
            out.writeInt(pid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public moveFiles_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.fids = new ArrayList<Integer>();
            in.readList(this.fids, moveFiles_args.class.getClassLoader());
            this.pid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<moveFiles_args> CREATOR = new android.os.Parcelable.Creator<moveFiles_args>() {
            @Override
            public moveFiles_args[] newArray(int size) {
                return new moveFiles_args[size];
            }

            @Override
            public moveFiles_args createFromParcel(android.os.Parcel in) {
                return new moveFiles_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FIDS((short) 1, "fids"),
            PID((short) 2, "pid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // FIDS
                        return FIDS;
                    case 2: // PID
                        return PID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FIDS, new org.apache.thrift.meta_data.FieldMetaData("fids", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "FileID"))));
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveFiles_args.class, metaDataMap);
        }

        public moveFiles_args() {
        }

        public moveFiles_args(
                List<Integer> fids,
                int pid) {
            this();
            this.fids = fids;
            this.pid = pid;
            setPidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public moveFiles_args(moveFiles_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetFids()) {
                List<Integer> __this__fids = new ArrayList<Integer>(other.fids.size());
                for (Integer other_element : other.fids) {
                    __this__fids.add(other_element);
                }
                this.fids = __this__fids;
            }
            this.pid = other.pid;
        }

        public moveFiles_args deepCopy() {
            return new moveFiles_args(this);
        }

        @Override
        public void clear() {
            this.fids = null;
            setPidIsSet(false);
            this.pid = 0;
        }

        public int getFidsSize() {
            return (this.fids == null) ? 0 : this.fids.size();
        }

        public java.util.Iterator<Integer> getFidsIterator() {
            return (this.fids == null) ? null : this.fids.iterator();
        }

        public void addToFids(int elem) {
            if (this.fids == null) {
                this.fids = new ArrayList<Integer>();
            }
            this.fids.add(elem);
        }

        public List<Integer> getFids() {
            return this.fids;
        }

        public moveFiles_args setFids(List<Integer> fids) {
            this.fids = fids;
            return this;
        }

        public void unsetFids() {
            this.fids = null;
        }

        /** Returns true if field fids is set (has been assigned a value) and false otherwise */
        public boolean isSetFids() {
            return this.fids != null;
        }

        public void setFidsIsSet(boolean value) {
            if (!value) {
                this.fids = null;
            }
        }

        public int getPid() {
            return this.pid;
        }

        public moveFiles_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case FIDS:
                    if (value == null) {
                        unsetFids();
                    } else {
                        setFids((List<Integer>) value);
                    }
                    break;

                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case FIDS:
                    return getFids();

                case PID:
                    return getPid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case FIDS:
                    return isSetFids();
                case PID:
                    return isSetPid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof moveFiles_args)
                return this.equals((moveFiles_args) that);
            return false;
        }

        public boolean equals(moveFiles_args that) {
            if (that == null)
                return false;

            boolean this_present_fids = true && this.isSetFids();
            boolean that_present_fids = true && that.isSetFids();
            if (this_present_fids || that_present_fids) {
                if (!(this_present_fids && that_present_fids))
                    return false;
                if (!this.fids.equals(that.fids))
                    return false;
            }

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_fids = true && (isSetFids());
            list.add(present_fids);
            if (present_fids)
                list.add(fids);

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            return list.hashCode();
        }

        @Override
        public int compareTo(moveFiles_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetFids()).compareTo(other.isSetFids());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFids()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fids, other.fids);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("moveFiles_args(");
            boolean first = true;

            sb.append("fids:");
            if (this.fids == null) {
                sb.append("null");
            } else {
                sb.append(this.fids);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class moveFiles_argsStandardSchemeFactory implements SchemeFactory {
            public moveFiles_argsStandardScheme getScheme() {
                return new moveFiles_argsStandardScheme();
            }
        }

        private static class moveFiles_argsStandardScheme extends StandardScheme<moveFiles_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, moveFiles_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // FIDS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list314 = iprot.readListBegin();
                                    struct.fids = new ArrayList<Integer>(_list314.size);
                                    int _elem315;
                                    for (int _i316 = 0; _i316 < _list314.size; ++_i316) {
                                        _elem315 = iprot.readI32();
                                        struct.fids.add(_elem315);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setFidsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, moveFiles_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.fids != null) {
                    oprot.writeFieldBegin(FIDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.fids.size()));
                        for (int _iter317 : struct.fids) {
                            oprot.writeI32(_iter317);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class moveFiles_argsTupleSchemeFactory implements SchemeFactory {
            public moveFiles_argsTupleScheme getScheme() {
                return new moveFiles_argsTupleScheme();
            }
        }

        private static class moveFiles_argsTupleScheme extends TupleScheme<moveFiles_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, moveFiles_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFids()) {
                    optionals.set(0);
                }
                if (struct.isSetPid()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetFids()) {
                    {
                        oprot.writeI32(struct.fids.size());
                        for (int _iter318 : struct.fids) {
                            oprot.writeI32(_iter318);
                        }
                    }
                }
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, moveFiles_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list319 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.fids = new ArrayList<Integer>(_list319.size);
                        int _elem320;
                        for (int _i321 = 0; _i321 < _list319.size; ++_i321) {
                            _elem320 = iprot.readI32();
                            struct.fids.add(_elem320);
                        }
                    }
                    struct.setFidsIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
            }
        }

    }

    public static class moveFiles_result implements org.apache.thrift.TBase<moveFiles_result, moveFiles_result._Fields>, java.io.Serializable, Cloneable, Comparable<moveFiles_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveFiles_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new moveFiles_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new moveFiles_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public moveFiles_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<moveFiles_result> CREATOR = new android.os.Parcelable.Creator<moveFiles_result>() {
            @Override
            public moveFiles_result[] newArray(int size) {
                return new moveFiles_result[size];
            }

            @Override
            public moveFiles_result createFromParcel(android.os.Parcel in) {
                return new moveFiles_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveFiles_result.class, metaDataMap);
        }

        public moveFiles_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public moveFiles_result(moveFiles_result other) {
        }

        public moveFiles_result deepCopy() {
            return new moveFiles_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof moveFiles_result)
                return this.equals((moveFiles_result) that);
            return false;
        }

        public boolean equals(moveFiles_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(moveFiles_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("moveFiles_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class moveFiles_resultStandardSchemeFactory implements SchemeFactory {
            public moveFiles_resultStandardScheme getScheme() {
                return new moveFiles_resultStandardScheme();
            }
        }

        private static class moveFiles_resultStandardScheme extends StandardScheme<moveFiles_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, moveFiles_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, moveFiles_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class moveFiles_resultTupleSchemeFactory implements SchemeFactory {
            public moveFiles_resultTupleScheme getScheme() {
                return new moveFiles_resultTupleScheme();
            }
        }

        private static class moveFiles_resultTupleScheme extends TupleScheme<moveFiles_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, moveFiles_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, moveFiles_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class orderPackage_args implements org.apache.thrift.TBase<orderPackage_args, orderPackage_args._Fields>, java.io.Serializable, Cloneable, Comparable<orderPackage_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("orderPackage_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I16, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new orderPackage_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new orderPackage_argsTupleSchemeFactory());
        }

        public int pid; // required
        public short position; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(pid);
            out.writeInt(new Short(position).intValue());
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public orderPackage_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.pid = in.readInt();
            this.position = (short) in.readInt();
        }

        public static final android.os.Parcelable.Creator<orderPackage_args> CREATOR = new android.os.Parcelable.Creator<orderPackage_args>() {
            @Override
            public orderPackage_args[] newArray(int size) {
                return new orderPackage_args[size];
            }

            @Override
            public orderPackage_args createFromParcel(android.os.Parcel in) {
                return new orderPackage_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short) 1, "pid"),
            POSITION((short) 2, "position");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PID
                        return PID;
                    case 2: // POSITION
                        return POSITION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private static final int __POSITION_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderPackage_args.class, metaDataMap);
        }

        public orderPackage_args() {
        }

        public orderPackage_args(
                int pid,
                short position) {
            this();
            this.pid = pid;
            setPidIsSet(true);
            this.position = position;
            setPositionIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public orderPackage_args(orderPackage_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
            this.position = other.position;
        }

        public orderPackage_args deepCopy() {
            return new orderPackage_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
            setPositionIsSet(false);
            this.position = 0;
        }

        public int getPid() {
            return this.pid;
        }

        public orderPackage_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public short getPosition() {
            return this.position;
        }

        public orderPackage_args setPosition(short position) {
            this.position = position;
            setPositionIsSet(true);
            return this;
        }

        public void unsetPosition() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
        }

        /** Returns true if field position is set (has been assigned a value) and false otherwise */
        public boolean isSetPosition() {
            return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
        }

        public void setPositionIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

                case POSITION:
                    if (value == null) {
                        unsetPosition();
                    } else {
                        setPosition((Short) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

                case POSITION:
                    return getPosition();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
                case POSITION:
                    return isSetPosition();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof orderPackage_args)
                return this.equals((orderPackage_args) that);
            return false;
        }

        public boolean equals(orderPackage_args that) {
            if (that == null)
                return false;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            boolean this_present_position = true;
            boolean that_present_position = true;
            if (this_present_position || that_present_position) {
                if (!(this_present_position && that_present_position))
                    return false;
                if (this.position != that.position)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            boolean present_position = true;
            list.add(present_position);
            if (present_position)
                list.add(position);

            return list.hashCode();
        }

        @Override
        public int compareTo(orderPackage_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPosition()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("orderPackage_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            if (!first) sb.append(", ");
            sb.append("position:");
            sb.append(this.position);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class orderPackage_argsStandardSchemeFactory implements SchemeFactory {
            public orderPackage_argsStandardScheme getScheme() {
                return new orderPackage_argsStandardScheme();
            }
        }

        private static class orderPackage_argsStandardScheme extends StandardScheme<orderPackage_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, orderPackage_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // POSITION
                            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                                struct.position = iprot.readI16();
                                struct.setPositionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, orderPackage_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_FIELD_DESC);
                oprot.writeI16(struct.position);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class orderPackage_argsTupleSchemeFactory implements SchemeFactory {
            public orderPackage_argsTupleScheme getScheme() {
                return new orderPackage_argsTupleScheme();
            }
        }

        private static class orderPackage_argsTupleScheme extends TupleScheme<orderPackage_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, orderPackage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                if (struct.isSetPosition()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
                if (struct.isSetPosition()) {
                    oprot.writeI16(struct.position);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, orderPackage_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.position = iprot.readI16();
                    struct.setPositionIsSet(true);
                }
            }
        }

    }

    public static class orderPackage_result implements org.apache.thrift.TBase<orderPackage_result, orderPackage_result._Fields>, java.io.Serializable, Cloneable, Comparable<orderPackage_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("orderPackage_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new orderPackage_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new orderPackage_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public orderPackage_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<orderPackage_result> CREATOR = new android.os.Parcelable.Creator<orderPackage_result>() {
            @Override
            public orderPackage_result[] newArray(int size) {
                return new orderPackage_result[size];
            }

            @Override
            public orderPackage_result createFromParcel(android.os.Parcel in) {
                return new orderPackage_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderPackage_result.class, metaDataMap);
        }

        public orderPackage_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public orderPackage_result(orderPackage_result other) {
        }

        public orderPackage_result deepCopy() {
            return new orderPackage_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof orderPackage_result)
                return this.equals((orderPackage_result) that);
            return false;
        }

        public boolean equals(orderPackage_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(orderPackage_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("orderPackage_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class orderPackage_resultStandardSchemeFactory implements SchemeFactory {
            public orderPackage_resultStandardScheme getScheme() {
                return new orderPackage_resultStandardScheme();
            }
        }

        private static class orderPackage_resultStandardScheme extends StandardScheme<orderPackage_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, orderPackage_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, orderPackage_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class orderPackage_resultTupleSchemeFactory implements SchemeFactory {
            public orderPackage_resultTupleScheme getScheme() {
                return new orderPackage_resultTupleScheme();
            }
        }

        private static class orderPackage_resultTupleScheme extends TupleScheme<orderPackage_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, orderPackage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, orderPackage_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class orderFile_args implements org.apache.thrift.TBase<orderFile_args, orderFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<orderFile_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("orderFile_args");

        private static final org.apache.thrift.protocol.TField FID_FIELD_DESC = new org.apache.thrift.protocol.TField("fid", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I16, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new orderFile_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new orderFile_argsTupleSchemeFactory());
        }

        public int fid; // required
        public short position; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(fid);
            out.writeInt(new Short(position).intValue());
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public orderFile_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.fid = in.readInt();
            this.position = (short) in.readInt();
        }

        public static final android.os.Parcelable.Creator<orderFile_args> CREATOR = new android.os.Parcelable.Creator<orderFile_args>() {
            @Override
            public orderFile_args[] newArray(int size) {
                return new orderFile_args[size];
            }

            @Override
            public orderFile_args createFromParcel(android.os.Parcel in) {
                return new orderFile_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            FID((short) 1, "fid"),
            POSITION((short) 2, "position");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // FID
                        return FID;
                    case 2: // POSITION
                        return POSITION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __FID_ISSET_ID = 0;
        private static final int __POSITION_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FID, new org.apache.thrift.meta_data.FieldMetaData("fid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "FileID")));
            tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderFile_args.class, metaDataMap);
        }

        public orderFile_args() {
        }

        public orderFile_args(
                int fid,
                short position) {
            this();
            this.fid = fid;
            setFidIsSet(true);
            this.position = position;
            setPositionIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public orderFile_args(orderFile_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.fid = other.fid;
            this.position = other.position;
        }

        public orderFile_args deepCopy() {
            return new orderFile_args(this);
        }

        @Override
        public void clear() {
            setFidIsSet(false);
            this.fid = 0;
            setPositionIsSet(false);
            this.position = 0;
        }

        public int getFid() {
            return this.fid;
        }

        public orderFile_args setFid(int fid) {
            this.fid = fid;
            setFidIsSet(true);
            return this;
        }

        public void unsetFid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FID_ISSET_ID);
        }

        /** Returns true if field fid is set (has been assigned a value) and false otherwise */
        public boolean isSetFid() {
            return EncodingUtils.testBit(__isset_bitfield, __FID_ISSET_ID);
        }

        public void setFidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FID_ISSET_ID, value);
        }

        public short getPosition() {
            return this.position;
        }

        public orderFile_args setPosition(short position) {
            this.position = position;
            setPositionIsSet(true);
            return this;
        }

        public void unsetPosition() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
        }

        /** Returns true if field position is set (has been assigned a value) and false otherwise */
        public boolean isSetPosition() {
            return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
        }

        public void setPositionIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case FID:
                    if (value == null) {
                        unsetFid();
                    } else {
                        setFid((Integer) value);
                    }
                    break;

                case POSITION:
                    if (value == null) {
                        unsetPosition();
                    } else {
                        setPosition((Short) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case FID:
                    return getFid();

                case POSITION:
                    return getPosition();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case FID:
                    return isSetFid();
                case POSITION:
                    return isSetPosition();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof orderFile_args)
                return this.equals((orderFile_args) that);
            return false;
        }

        public boolean equals(orderFile_args that) {
            if (that == null)
                return false;

            boolean this_present_fid = true;
            boolean that_present_fid = true;
            if (this_present_fid || that_present_fid) {
                if (!(this_present_fid && that_present_fid))
                    return false;
                if (this.fid != that.fid)
                    return false;
            }

            boolean this_present_position = true;
            boolean that_present_position = true;
            if (this_present_position || that_present_position) {
                if (!(this_present_position && that_present_position))
                    return false;
                if (this.position != that.position)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_fid = true;
            list.add(present_fid);
            if (present_fid)
                list.add(fid);

            boolean present_position = true;
            list.add(present_position);
            if (present_position)
                list.add(position);

            return list.hashCode();
        }

        @Override
        public int compareTo(orderFile_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetFid()).compareTo(other.isSetFid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fid, other.fid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPosition()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("orderFile_args(");
            boolean first = true;

            sb.append("fid:");
            sb.append(this.fid);
            first = false;
            if (!first) sb.append(", ");
            sb.append("position:");
            sb.append(this.position);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class orderFile_argsStandardSchemeFactory implements SchemeFactory {
            public orderFile_argsStandardScheme getScheme() {
                return new orderFile_argsStandardScheme();
            }
        }

        private static class orderFile_argsStandardScheme extends StandardScheme<orderFile_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, orderFile_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // FID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.fid = iprot.readI32();
                                struct.setFidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // POSITION
                            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                                struct.position = iprot.readI16();
                                struct.setPositionIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, orderFile_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(FID_FIELD_DESC);
                oprot.writeI32(struct.fid);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(POSITION_FIELD_DESC);
                oprot.writeI16(struct.position);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class orderFile_argsTupleSchemeFactory implements SchemeFactory {
            public orderFile_argsTupleScheme getScheme() {
                return new orderFile_argsTupleScheme();
            }
        }

        private static class orderFile_argsTupleScheme extends TupleScheme<orderFile_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, orderFile_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFid()) {
                    optionals.set(0);
                }
                if (struct.isSetPosition()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetFid()) {
                    oprot.writeI32(struct.fid);
                }
                if (struct.isSetPosition()) {
                    oprot.writeI16(struct.position);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, orderFile_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.fid = iprot.readI32();
                    struct.setFidIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.position = iprot.readI16();
                    struct.setPositionIsSet(true);
                }
            }
        }

    }

    public static class orderFile_result implements org.apache.thrift.TBase<orderFile_result, orderFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<orderFile_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("orderFile_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new orderFile_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new orderFile_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public orderFile_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<orderFile_result> CREATOR = new android.os.Parcelable.Creator<orderFile_result>() {
            @Override
            public orderFile_result[] newArray(int size) {
                return new orderFile_result[size];
            }

            @Override
            public orderFile_result createFromParcel(android.os.Parcel in) {
                return new orderFile_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderFile_result.class, metaDataMap);
        }

        public orderFile_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public orderFile_result(orderFile_result other) {
        }

        public orderFile_result deepCopy() {
            return new orderFile_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof orderFile_result)
                return this.equals((orderFile_result) that);
            return false;
        }

        public boolean equals(orderFile_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(orderFile_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("orderFile_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class orderFile_resultStandardSchemeFactory implements SchemeFactory {
            public orderFile_resultStandardScheme getScheme() {
                return new orderFile_resultStandardScheme();
            }
        }

        private static class orderFile_resultStandardScheme extends StandardScheme<orderFile_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, orderFile_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, orderFile_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class orderFile_resultTupleSchemeFactory implements SchemeFactory {
            public orderFile_resultTupleScheme getScheme() {
                return new orderFile_resultTupleScheme();
            }
        }

        private static class orderFile_resultTupleScheme extends TupleScheme<orderFile_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, orderFile_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, orderFile_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class setPackageData_args implements org.apache.thrift.TBase<setPackageData_args, setPackageData_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPackageData_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPackageData_args");

        private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.MAP, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new setPackageData_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new setPackageData_argsTupleSchemeFactory());
        }

        public int pid; // required
        public Map<String, String> data; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(pid);
            out.writeMap(data);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public setPackageData_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.pid = in.readInt();
            this.data = new HashMap<String, String>();
            in.readMap(this.data, setPackageData_args.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<setPackageData_args> CREATOR = new android.os.Parcelable.Creator<setPackageData_args>() {
            @Override
            public setPackageData_args[] newArray(int size) {
                return new setPackageData_args[size];
            }

            @Override
            public setPackageData_args createFromParcel(android.os.Parcel in) {
                return new setPackageData_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PID((short) 1, "pid"),
            DATA((short) 2, "data");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PID
                        return PID;
                    case 2: // DATA
                        return DATA;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __PID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
            tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPackageData_args.class, metaDataMap);
        }

        public setPackageData_args() {
        }

        public setPackageData_args(
                int pid,
                Map<String, String> data) {
            this();
            this.pid = pid;
            setPidIsSet(true);
            this.data = data;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setPackageData_args(setPackageData_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.pid = other.pid;
            if (other.isSetData()) {
                Map<String, String> __this__data = new HashMap<String, String>(other.data);
                this.data = __this__data;
            }
        }

        public setPackageData_args deepCopy() {
            return new setPackageData_args(this);
        }

        @Override
        public void clear() {
            setPidIsSet(false);
            this.pid = 0;
            this.data = null;
        }

        public int getPid() {
            return this.pid;
        }

        public setPackageData_args setPid(int pid) {
            this.pid = pid;
            setPidIsSet(true);
            return this;
        }

        public void unsetPid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
        }

        /** Returns true if field pid is set (has been assigned a value) and false otherwise */
        public boolean isSetPid() {
            return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
        }

        public void setPidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
        }

        public int getDataSize() {
            return (this.data == null) ? 0 : this.data.size();
        }

        public void putToData(String key, String val) {
            if (this.data == null) {
                this.data = new HashMap<String, String>();
            }
            this.data.put(key, val);
        }

        public Map<String, String> getData() {
            return this.data;
        }

        public setPackageData_args setData(Map<String, String> data) {
            this.data = data;
            return this;
        }

        public void unsetData() {
            this.data = null;
        }

        /** Returns true if field data is set (has been assigned a value) and false otherwise */
        public boolean isSetData() {
            return this.data != null;
        }

        public void setDataIsSet(boolean value) {
            if (!value) {
                this.data = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PID:
                    if (value == null) {
                        unsetPid();
                    } else {
                        setPid((Integer) value);
                    }
                    break;

                case DATA:
                    if (value == null) {
                        unsetData();
                    } else {
                        setData((Map<String, String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PID:
                    return getPid();

                case DATA:
                    return getData();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PID:
                    return isSetPid();
                case DATA:
                    return isSetData();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof setPackageData_args)
                return this.equals((setPackageData_args) that);
            return false;
        }

        public boolean equals(setPackageData_args that) {
            if (that == null)
                return false;

            boolean this_present_pid = true;
            boolean that_present_pid = true;
            if (this_present_pid || that_present_pid) {
                if (!(this_present_pid && that_present_pid))
                    return false;
                if (this.pid != that.pid)
                    return false;
            }

            boolean this_present_data = true && this.isSetData();
            boolean that_present_data = true && that.isSetData();
            if (this_present_data || that_present_data) {
                if (!(this_present_data && that_present_data))
                    return false;
                if (!this.data.equals(that.data))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_pid = true;
            list.add(present_pid);
            if (present_pid)
                list.add(pid);

            boolean present_data = true && (isSetData());
            list.add(present_data);
            if (present_data)
                list.add(data);

            return list.hashCode();
        }

        @Override
        public int compareTo(setPackageData_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetData()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("setPackageData_args(");
            boolean first = true;

            sb.append("pid:");
            sb.append(this.pid);
            first = false;
            if (!first) sb.append(", ");
            sb.append("data:");
            if (this.data == null) {
                sb.append("null");
            } else {
                sb.append(this.data);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setPackageData_argsStandardSchemeFactory implements SchemeFactory {
            public setPackageData_argsStandardScheme getScheme() {
                return new setPackageData_argsStandardScheme();
            }
        }

        private static class setPackageData_argsStandardScheme extends StandardScheme<setPackageData_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setPackageData_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.pid = iprot.readI32();
                                struct.setPidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // DATA
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map322 = iprot.readMapBegin();
                                    struct.data = new HashMap<String, String>(2 * _map322.size);
                                    String _key323;
                                    String _val324;
                                    for (int _i325 = 0; _i325 < _map322.size; ++_i325) {
                                        _key323 = iprot.readString();
                                        _val324 = iprot.readString();
                                        struct.data.put(_key323, _val324);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setDataIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setPackageData_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(PID_FIELD_DESC);
                oprot.writeI32(struct.pid);
                oprot.writeFieldEnd();
                if (struct.data != null) {
                    oprot.writeFieldBegin(DATA_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.data.size()));
                        for (Map.Entry<String, String> _iter326 : struct.data.entrySet()) {
                            oprot.writeString(_iter326.getKey());
                            oprot.writeString(_iter326.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setPackageData_argsTupleSchemeFactory implements SchemeFactory {
            public setPackageData_argsTupleScheme getScheme() {
                return new setPackageData_argsTupleScheme();
            }
        }

        private static class setPackageData_argsTupleScheme extends TupleScheme<setPackageData_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setPackageData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPid()) {
                    optionals.set(0);
                }
                if (struct.isSetData()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPid()) {
                    oprot.writeI32(struct.pid);
                }
                if (struct.isSetData()) {
                    {
                        oprot.writeI32(struct.data.size());
                        for (Map.Entry<String, String> _iter327 : struct.data.entrySet()) {
                            oprot.writeString(_iter327.getKey());
                            oprot.writeString(_iter327.getValue());
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setPackageData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.pid = iprot.readI32();
                    struct.setPidIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TMap _map328 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.data = new HashMap<String, String>(2 * _map328.size);
                        String _key329;
                        String _val330;
                        for (int _i331 = 0; _i331 < _map328.size; ++_i331) {
                            _key329 = iprot.readString();
                            _val330 = iprot.readString();
                            struct.data.put(_key329, _val330);
                        }
                    }
                    struct.setDataIsSet(true);
                }
            }
        }

    }

    public static class setPackageData_result implements org.apache.thrift.TBase<setPackageData_result, setPackageData_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPackageData_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPackageData_result");

        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new setPackageData_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new setPackageData_resultTupleSchemeFactory());
        }

        public PackageDoesNotExists e; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public setPackageData_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<setPackageData_result> CREATOR = new android.os.Parcelable.Creator<setPackageData_result>() {
            @Override
            public setPackageData_result[] newArray(int size) {
                return new setPackageData_result[size];
            }

            @Override
            public setPackageData_result createFromParcel(android.os.Parcel in) {
                return new setPackageData_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            E((short) 1, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPackageData_result.class, metaDataMap);
        }

        public setPackageData_result() {
        }

        public setPackageData_result(
                PackageDoesNotExists e) {
            this();
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setPackageData_result(setPackageData_result other) {
            if (other.isSetE()) {
                this.e = new PackageDoesNotExists(other.e);
            }
        }

        public setPackageData_result deepCopy() {
            return new setPackageData_result(this);
        }

        @Override
        public void clear() {
            this.e = null;
        }

        public PackageDoesNotExists getE() {
            return this.e;
        }

        public setPackageData_result setE(PackageDoesNotExists e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((PackageDoesNotExists) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case E:
                    return getE();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case E:
                    return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof setPackageData_result)
                return this.equals((setPackageData_result) that);
            return false;
        }

        public boolean equals(setPackageData_result that) {
            if (that == null)
                return false;

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_e = true && (isSetE());
            list.add(present_e);
            if (present_e)
                list.add(e);

            return list.hashCode();
        }

        @Override
        public int compareTo(setPackageData_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("setPackageData_result(");
            boolean first = true;

            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setPackageData_resultStandardSchemeFactory implements SchemeFactory {
            public setPackageData_resultStandardScheme getScheme() {
                return new setPackageData_resultStandardScheme();
            }
        }

        private static class setPackageData_resultStandardScheme extends StandardScheme<setPackageData_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setPackageData_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new PackageDoesNotExists();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setPackageData_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setPackageData_resultTupleSchemeFactory implements SchemeFactory {
            public setPackageData_resultTupleScheme getScheme() {
                return new setPackageData_resultTupleScheme();
            }
        }

        private static class setPackageData_resultTupleScheme extends TupleScheme<setPackageData_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setPackageData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetE()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setPackageData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.e = new PackageDoesNotExists();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

    public static class deleteFinished_args implements org.apache.thrift.TBase<deleteFinished_args, deleteFinished_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFinished_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFinished_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deleteFinished_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteFinished_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public deleteFinished_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<deleteFinished_args> CREATOR = new android.os.Parcelable.Creator<deleteFinished_args>() {
            @Override
            public deleteFinished_args[] newArray(int size) {
                return new deleteFinished_args[size];
            }

            @Override
            public deleteFinished_args createFromParcel(android.os.Parcel in) {
                return new deleteFinished_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFinished_args.class, metaDataMap);
        }

        public deleteFinished_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteFinished_args(deleteFinished_args other) {
        }

        public deleteFinished_args deepCopy() {
            return new deleteFinished_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteFinished_args)
                return this.equals((deleteFinished_args) that);
            return false;
        }

        public boolean equals(deleteFinished_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteFinished_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteFinished_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteFinished_argsStandardSchemeFactory implements SchemeFactory {
            public deleteFinished_argsStandardScheme getScheme() {
                return new deleteFinished_argsStandardScheme();
            }
        }

        private static class deleteFinished_argsStandardScheme extends StandardScheme<deleteFinished_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFinished_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFinished_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteFinished_argsTupleSchemeFactory implements SchemeFactory {
            public deleteFinished_argsTupleScheme getScheme() {
                return new deleteFinished_argsTupleScheme();
            }
        }

        private static class deleteFinished_argsTupleScheme extends TupleScheme<deleteFinished_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteFinished_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteFinished_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class deleteFinished_result implements org.apache.thrift.TBase<deleteFinished_result, deleteFinished_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFinished_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFinished_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new deleteFinished_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteFinished_resultTupleSchemeFactory());
        }

        public List<Integer> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public deleteFinished_result(android.os.Parcel in) {
            this.success = new ArrayList<Integer>();
            in.readList(this.success, deleteFinished_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<deleteFinished_result> CREATOR = new android.os.Parcelable.Creator<deleteFinished_result>() {
            @Override
            public deleteFinished_result[] newArray(int size) {
                return new deleteFinished_result[size];
            }

            @Override
            public deleteFinished_result createFromParcel(android.os.Parcel in) {
                return new deleteFinished_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID"))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFinished_result.class, metaDataMap);
        }

        public deleteFinished_result() {
        }

        public deleteFinished_result(
                List<Integer> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteFinished_result(deleteFinished_result other) {
            if (other.isSetSuccess()) {
                List<Integer> __this__success = new ArrayList<Integer>(other.success.size());
                for (Integer other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public deleteFinished_result deepCopy() {
            return new deleteFinished_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Integer> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(int elem) {
            if (this.success == null) {
                this.success = new ArrayList<Integer>();
            }
            this.success.add(elem);
        }

        public List<Integer> getSuccess() {
            return this.success;
        }

        public deleteFinished_result setSuccess(List<Integer> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Integer>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteFinished_result)
                return this.equals((deleteFinished_result) that);
            return false;
        }

        public boolean equals(deleteFinished_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteFinished_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteFinished_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteFinished_resultStandardSchemeFactory implements SchemeFactory {
            public deleteFinished_resultStandardScheme getScheme() {
                return new deleteFinished_resultStandardScheme();
            }
        }

        private static class deleteFinished_resultStandardScheme extends StandardScheme<deleteFinished_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFinished_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list332 = iprot.readListBegin();
                                    struct.success = new ArrayList<Integer>(_list332.size);
                                    int _elem333;
                                    for (int _i334 = 0; _i334 < _list332.size; ++_i334) {
                                        _elem333 = iprot.readI32();
                                        struct.success.add(_elem333);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFinished_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
                        for (int _iter335 : struct.success) {
                            oprot.writeI32(_iter335);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteFinished_resultTupleSchemeFactory implements SchemeFactory {
            public deleteFinished_resultTupleScheme getScheme() {
                return new deleteFinished_resultTupleScheme();
            }
        }

        private static class deleteFinished_resultTupleScheme extends TupleScheme<deleteFinished_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteFinished_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (int _iter336 : struct.success) {
                            oprot.writeI32(_iter336);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteFinished_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list337 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.success = new ArrayList<Integer>(_list337.size);
                        int _elem338;
                        for (int _i339 = 0; _i339 < _list337.size; ++_i339) {
                            _elem338 = iprot.readI32();
                            struct.success.add(_elem338);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class restartFailed_args implements org.apache.thrift.TBase<restartFailed_args, restartFailed_args._Fields>, java.io.Serializable, Cloneable, Comparable<restartFailed_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartFailed_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new restartFailed_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new restartFailed_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public restartFailed_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<restartFailed_args> CREATOR = new android.os.Parcelable.Creator<restartFailed_args>() {
            @Override
            public restartFailed_args[] newArray(int size) {
                return new restartFailed_args[size];
            }

            @Override
            public restartFailed_args createFromParcel(android.os.Parcel in) {
                return new restartFailed_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartFailed_args.class, metaDataMap);
        }

        public restartFailed_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public restartFailed_args(restartFailed_args other) {
        }

        public restartFailed_args deepCopy() {
            return new restartFailed_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof restartFailed_args)
                return this.equals((restartFailed_args) that);
            return false;
        }

        public boolean equals(restartFailed_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(restartFailed_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("restartFailed_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class restartFailed_argsStandardSchemeFactory implements SchemeFactory {
            public restartFailed_argsStandardScheme getScheme() {
                return new restartFailed_argsStandardScheme();
            }
        }

        private static class restartFailed_argsStandardScheme extends StandardScheme<restartFailed_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, restartFailed_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, restartFailed_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class restartFailed_argsTupleSchemeFactory implements SchemeFactory {
            public restartFailed_argsTupleScheme getScheme() {
                return new restartFailed_argsTupleScheme();
            }
        }

        private static class restartFailed_argsTupleScheme extends TupleScheme<restartFailed_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, restartFailed_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, restartFailed_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class restartFailed_result implements org.apache.thrift.TBase<restartFailed_result, restartFailed_result._Fields>, java.io.Serializable, Cloneable, Comparable<restartFailed_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restartFailed_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new restartFailed_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new restartFailed_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public restartFailed_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<restartFailed_result> CREATOR = new android.os.Parcelable.Creator<restartFailed_result>() {
            @Override
            public restartFailed_result[] newArray(int size) {
                return new restartFailed_result[size];
            }

            @Override
            public restartFailed_result createFromParcel(android.os.Parcel in) {
                return new restartFailed_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restartFailed_result.class, metaDataMap);
        }

        public restartFailed_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public restartFailed_result(restartFailed_result other) {
        }

        public restartFailed_result deepCopy() {
            return new restartFailed_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof restartFailed_result)
                return this.equals((restartFailed_result) that);
            return false;
        }

        public boolean equals(restartFailed_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(restartFailed_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("restartFailed_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class restartFailed_resultStandardSchemeFactory implements SchemeFactory {
            public restartFailed_resultStandardScheme getScheme() {
                return new restartFailed_resultStandardScheme();
            }
        }

        private static class restartFailed_resultStandardScheme extends StandardScheme<restartFailed_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, restartFailed_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, restartFailed_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class restartFailed_resultTupleSchemeFactory implements SchemeFactory {
            public restartFailed_resultTupleScheme getScheme() {
                return new restartFailed_resultTupleScheme();
            }
        }

        private static class restartFailed_resultTupleScheme extends TupleScheme<restartFailed_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, restartFailed_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, restartFailed_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getEvents_args implements org.apache.thrift.TBase<getEvents_args, getEvents_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEvents_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvents_args");

        private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getEvents_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getEvents_argsTupleSchemeFactory());
        }

        public String uuid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(uuid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getEvents_args(android.os.Parcel in) {
            this.uuid = in.readString();
        }

        public static final android.os.Parcelable.Creator<getEvents_args> CREATOR = new android.os.Parcelable.Creator<getEvents_args>() {
            @Override
            public getEvents_args[] newArray(int size) {
                return new getEvents_args[size];
            }

            @Override
            public getEvents_args createFromParcel(android.os.Parcel in) {
                return new getEvents_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UUID((short) 1, "uuid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // UUID
                        return UUID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvents_args.class, metaDataMap);
        }

        public getEvents_args() {
        }

        public getEvents_args(
                String uuid) {
            this();
            this.uuid = uuid;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEvents_args(getEvents_args other) {
            if (other.isSetUuid()) {
                this.uuid = other.uuid;
            }
        }

        public getEvents_args deepCopy() {
            return new getEvents_args(this);
        }

        @Override
        public void clear() {
            this.uuid = null;
        }

        public String getUuid() {
            return this.uuid;
        }

        public getEvents_args setUuid(String uuid) {
            this.uuid = uuid;
            return this;
        }

        public void unsetUuid() {
            this.uuid = null;
        }

        /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
        public boolean isSetUuid() {
            return this.uuid != null;
        }

        public void setUuidIsSet(boolean value) {
            if (!value) {
                this.uuid = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case UUID:
                    if (value == null) {
                        unsetUuid();
                    } else {
                        setUuid((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case UUID:
                    return getUuid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case UUID:
                    return isSetUuid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getEvents_args)
                return this.equals((getEvents_args) that);
            return false;
        }

        public boolean equals(getEvents_args that) {
            if (that == null)
                return false;

            boolean this_present_uuid = true && this.isSetUuid();
            boolean that_present_uuid = true && that.isSetUuid();
            if (this_present_uuid || that_present_uuid) {
                if (!(this_present_uuid && that_present_uuid))
                    return false;
                if (!this.uuid.equals(that.uuid))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_uuid = true && (isSetUuid());
            list.add(present_uuid);
            if (present_uuid)
                list.add(uuid);

            return list.hashCode();
        }

        @Override
        public int compareTo(getEvents_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUuid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getEvents_args(");
            boolean first = true;

            sb.append("uuid:");
            if (this.uuid == null) {
                sb.append("null");
            } else {
                sb.append(this.uuid);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEvents_argsStandardSchemeFactory implements SchemeFactory {
            public getEvents_argsStandardScheme getScheme() {
                return new getEvents_argsStandardScheme();
            }
        }

        private static class getEvents_argsStandardScheme extends StandardScheme<getEvents_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEvents_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UUID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.uuid = iprot.readString();
                                struct.setUuidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEvents_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.uuid != null) {
                    oprot.writeFieldBegin(UUID_FIELD_DESC);
                    oprot.writeString(struct.uuid);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEvents_argsTupleSchemeFactory implements SchemeFactory {
            public getEvents_argsTupleScheme getScheme() {
                return new getEvents_argsTupleScheme();
            }
        }

        private static class getEvents_argsTupleScheme extends TupleScheme<getEvents_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEvents_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUuid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUuid()) {
                    oprot.writeString(struct.uuid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEvents_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.uuid = iprot.readString();
                    struct.setUuidIsSet(true);
                }
            }
        }

    }

    public static class getEvents_result implements org.apache.thrift.TBase<getEvents_result, getEvents_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEvents_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvents_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getEvents_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getEvents_resultTupleSchemeFactory());
        }

        public List<EventInfo> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeTypedList(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getEvents_result(android.os.Parcel in) {
            this.success = new ArrayList<EventInfo>();
            in.readTypedList(this.success, EventInfo.CREATOR);
        }

        public static final android.os.Parcelable.Creator<getEvents_result> CREATOR = new android.os.Parcelable.Creator<getEvents_result>() {
            @Override
            public getEvents_result[] newArray(int size) {
                return new getEvents_result[size];
            }

            @Override
            public getEvents_result createFromParcel(android.os.Parcel in) {
                return new getEvents_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EventInfo.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvents_result.class, metaDataMap);
        }

        public getEvents_result() {
        }

        public getEvents_result(
                List<EventInfo> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getEvents_result(getEvents_result other) {
            if (other.isSetSuccess()) {
                List<EventInfo> __this__success = new ArrayList<EventInfo>(other.success.size());
                for (EventInfo other_element : other.success) {
                    __this__success.add(new EventInfo(other_element));
                }
                this.success = __this__success;
            }
        }

        public getEvents_result deepCopy() {
            return new getEvents_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<EventInfo> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(EventInfo elem) {
            if (this.success == null) {
                this.success = new ArrayList<EventInfo>();
            }
            this.success.add(elem);
        }

        public List<EventInfo> getSuccess() {
            return this.success;
        }

        public getEvents_result setSuccess(List<EventInfo> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<EventInfo>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getEvents_result)
                return this.equals((getEvents_result) that);
            return false;
        }

        public boolean equals(getEvents_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getEvents_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getEvents_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getEvents_resultStandardSchemeFactory implements SchemeFactory {
            public getEvents_resultStandardScheme getScheme() {
                return new getEvents_resultStandardScheme();
            }
        }

        private static class getEvents_resultStandardScheme extends StandardScheme<getEvents_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getEvents_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list340 = iprot.readListBegin();
                                    struct.success = new ArrayList<EventInfo>(_list340.size);
                                    EventInfo _elem341;
                                    for (int _i342 = 0; _i342 < _list340.size; ++_i342) {
                                        _elem341 = new EventInfo();
                                        _elem341.read(iprot);
                                        struct.success.add(_elem341);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getEvents_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (EventInfo _iter343 : struct.success) {
                            _iter343.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getEvents_resultTupleSchemeFactory implements SchemeFactory {
            public getEvents_resultTupleScheme getScheme() {
                return new getEvents_resultTupleScheme();
            }
        }

        private static class getEvents_resultTupleScheme extends TupleScheme<getEvents_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getEvents_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (EventInfo _iter344 : struct.success) {
                            _iter344.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getEvents_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list345 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<EventInfo>(_list345.size);
                        EventInfo _elem346;
                        for (int _i347 = 0; _i347 < _list345.size; ++_i347) {
                            _elem346 = new EventInfo();
                            _elem346.read(iprot);
                            struct.success.add(_elem346);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getAccounts_args implements org.apache.thrift.TBase<getAccounts_args, getAccounts_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAccounts_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccounts_args");

        private static final org.apache.thrift.protocol.TField REFRESH_FIELD_DESC = new org.apache.thrift.protocol.TField("refresh", org.apache.thrift.protocol.TType.BOOL, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getAccounts_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAccounts_argsTupleSchemeFactory());
        }

        public boolean refresh; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(refresh ? 1 : 0);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getAccounts_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.refresh = (in.readInt() == 1);
        }

        public static final android.os.Parcelable.Creator<getAccounts_args> CREATOR = new android.os.Parcelable.Creator<getAccounts_args>() {
            @Override
            public getAccounts_args[] newArray(int size) {
                return new getAccounts_args[size];
            }

            @Override
            public getAccounts_args createFromParcel(android.os.Parcel in) {
                return new getAccounts_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            REFRESH((short) 1, "refresh");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // REFRESH
                        return REFRESH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __REFRESH_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.REFRESH, new org.apache.thrift.meta_data.FieldMetaData("refresh", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccounts_args.class, metaDataMap);
        }

        public getAccounts_args() {
        }

        public getAccounts_args(
                boolean refresh) {
            this();
            this.refresh = refresh;
            setRefreshIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAccounts_args(getAccounts_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.refresh = other.refresh;
        }

        public getAccounts_args deepCopy() {
            return new getAccounts_args(this);
        }

        @Override
        public void clear() {
            setRefreshIsSet(false);
            this.refresh = false;
        }

        public boolean isRefresh() {
            return this.refresh;
        }

        public getAccounts_args setRefresh(boolean refresh) {
            this.refresh = refresh;
            setRefreshIsSet(true);
            return this;
        }

        public void unsetRefresh() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFRESH_ISSET_ID);
        }

        /** Returns true if field refresh is set (has been assigned a value) and false otherwise */
        public boolean isSetRefresh() {
            return EncodingUtils.testBit(__isset_bitfield, __REFRESH_ISSET_ID);
        }

        public void setRefreshIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFRESH_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case REFRESH:
                    if (value == null) {
                        unsetRefresh();
                    } else {
                        setRefresh((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case REFRESH:
                    return isRefresh();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case REFRESH:
                    return isSetRefresh();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAccounts_args)
                return this.equals((getAccounts_args) that);
            return false;
        }

        public boolean equals(getAccounts_args that) {
            if (that == null)
                return false;

            boolean this_present_refresh = true;
            boolean that_present_refresh = true;
            if (this_present_refresh || that_present_refresh) {
                if (!(this_present_refresh && that_present_refresh))
                    return false;
                if (this.refresh != that.refresh)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_refresh = true;
            list.add(present_refresh);
            if (present_refresh)
                list.add(refresh);

            return list.hashCode();
        }

        @Override
        public int compareTo(getAccounts_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetRefresh()).compareTo(other.isSetRefresh());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetRefresh()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refresh, other.refresh);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAccounts_args(");
            boolean first = true;

            sb.append("refresh:");
            sb.append(this.refresh);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getAccounts_argsStandardSchemeFactory implements SchemeFactory {
            public getAccounts_argsStandardScheme getScheme() {
                return new getAccounts_argsStandardScheme();
            }
        }

        private static class getAccounts_argsStandardScheme extends StandardScheme<getAccounts_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getAccounts_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // REFRESH
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.refresh = iprot.readBool();
                                struct.setRefreshIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getAccounts_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(REFRESH_FIELD_DESC);
                oprot.writeBool(struct.refresh);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getAccounts_argsTupleSchemeFactory implements SchemeFactory {
            public getAccounts_argsTupleScheme getScheme() {
                return new getAccounts_argsTupleScheme();
            }
        }

        private static class getAccounts_argsTupleScheme extends TupleScheme<getAccounts_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAccounts_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRefresh()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRefresh()) {
                    oprot.writeBool(struct.refresh);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAccounts_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.refresh = iprot.readBool();
                    struct.setRefreshIsSet(true);
                }
            }
        }

    }

    public static class getAccounts_result implements org.apache.thrift.TBase<getAccounts_result, getAccounts_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAccounts_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccounts_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getAccounts_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAccounts_resultTupleSchemeFactory());
        }

        public List<AccountInfo> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeTypedList(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getAccounts_result(android.os.Parcel in) {
            this.success = new ArrayList<AccountInfo>();
            in.readTypedList(this.success, AccountInfo.CREATOR);
        }

        public static final android.os.Parcelable.Creator<getAccounts_result> CREATOR = new android.os.Parcelable.Creator<getAccounts_result>() {
            @Override
            public getAccounts_result[] newArray(int size) {
                return new getAccounts_result[size];
            }

            @Override
            public getAccounts_result createFromParcel(android.os.Parcel in) {
                return new getAccounts_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccountInfo.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccounts_result.class, metaDataMap);
        }

        public getAccounts_result() {
        }

        public getAccounts_result(
                List<AccountInfo> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAccounts_result(getAccounts_result other) {
            if (other.isSetSuccess()) {
                List<AccountInfo> __this__success = new ArrayList<AccountInfo>(other.success.size());
                for (AccountInfo other_element : other.success) {
                    __this__success.add(new AccountInfo(other_element));
                }
                this.success = __this__success;
            }
        }

        public getAccounts_result deepCopy() {
            return new getAccounts_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<AccountInfo> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(AccountInfo elem) {
            if (this.success == null) {
                this.success = new ArrayList<AccountInfo>();
            }
            this.success.add(elem);
        }

        public List<AccountInfo> getSuccess() {
            return this.success;
        }

        public getAccounts_result setSuccess(List<AccountInfo> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<AccountInfo>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAccounts_result)
                return this.equals((getAccounts_result) that);
            return false;
        }

        public boolean equals(getAccounts_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getAccounts_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAccounts_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getAccounts_resultStandardSchemeFactory implements SchemeFactory {
            public getAccounts_resultStandardScheme getScheme() {
                return new getAccounts_resultStandardScheme();
            }
        }

        private static class getAccounts_resultStandardScheme extends StandardScheme<getAccounts_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getAccounts_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list348 = iprot.readListBegin();
                                    struct.success = new ArrayList<AccountInfo>(_list348.size);
                                    AccountInfo _elem349;
                                    for (int _i350 = 0; _i350 < _list348.size; ++_i350) {
                                        _elem349 = new AccountInfo();
                                        _elem349.read(iprot);
                                        struct.success.add(_elem349);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getAccounts_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (AccountInfo _iter351 : struct.success) {
                            _iter351.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getAccounts_resultTupleSchemeFactory implements SchemeFactory {
            public getAccounts_resultTupleScheme getScheme() {
                return new getAccounts_resultTupleScheme();
            }
        }

        private static class getAccounts_resultTupleScheme extends TupleScheme<getAccounts_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAccounts_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (AccountInfo _iter352 : struct.success) {
                            _iter352.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAccounts_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list353 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<AccountInfo>(_list353.size);
                        AccountInfo _elem354;
                        for (int _i355 = 0; _i355 < _list353.size; ++_i355) {
                            _elem354 = new AccountInfo();
                            _elem354.read(iprot);
                            struct.success.add(_elem354);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getAccountTypes_args implements org.apache.thrift.TBase<getAccountTypes_args, getAccountTypes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAccountTypes_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountTypes_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getAccountTypes_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAccountTypes_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getAccountTypes_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<getAccountTypes_args> CREATOR = new android.os.Parcelable.Creator<getAccountTypes_args>() {
            @Override
            public getAccountTypes_args[] newArray(int size) {
                return new getAccountTypes_args[size];
            }

            @Override
            public getAccountTypes_args createFromParcel(android.os.Parcel in) {
                return new getAccountTypes_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountTypes_args.class, metaDataMap);
        }

        public getAccountTypes_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAccountTypes_args(getAccountTypes_args other) {
        }

        public getAccountTypes_args deepCopy() {
            return new getAccountTypes_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAccountTypes_args)
                return this.equals((getAccountTypes_args) that);
            return false;
        }

        public boolean equals(getAccountTypes_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getAccountTypes_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAccountTypes_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getAccountTypes_argsStandardSchemeFactory implements SchemeFactory {
            public getAccountTypes_argsStandardScheme getScheme() {
                return new getAccountTypes_argsStandardScheme();
            }
        }

        private static class getAccountTypes_argsStandardScheme extends StandardScheme<getAccountTypes_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountTypes_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountTypes_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getAccountTypes_argsTupleSchemeFactory implements SchemeFactory {
            public getAccountTypes_argsTupleScheme getScheme() {
                return new getAccountTypes_argsTupleScheme();
            }
        }

        private static class getAccountTypes_argsTupleScheme extends TupleScheme<getAccountTypes_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAccountTypes_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAccountTypes_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getAccountTypes_result implements org.apache.thrift.TBase<getAccountTypes_result, getAccountTypes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAccountTypes_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAccountTypes_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getAccountTypes_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAccountTypes_resultTupleSchemeFactory());
        }

        public List<String> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeList(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getAccountTypes_result(android.os.Parcel in) {
            this.success = new ArrayList<String>();
            in.readList(this.success, getAccountTypes_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getAccountTypes_result> CREATOR = new android.os.Parcelable.Creator<getAccountTypes_result>() {
            @Override
            public getAccountTypes_result[] newArray(int size) {
                return new getAccountTypes_result[size];
            }

            @Override
            public getAccountTypes_result createFromParcel(android.os.Parcel in) {
                return new getAccountTypes_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAccountTypes_result.class, metaDataMap);
        }

        public getAccountTypes_result() {
        }

        public getAccountTypes_result(
                List<String> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAccountTypes_result(getAccountTypes_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>(other.success);
                this.success = __this__success;
            }
        }

        public getAccountTypes_result deepCopy() {
            return new getAccountTypes_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public getAccountTypes_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAccountTypes_result)
                return this.equals((getAccountTypes_result) that);
            return false;
        }

        public boolean equals(getAccountTypes_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getAccountTypes_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAccountTypes_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getAccountTypes_resultStandardSchemeFactory implements SchemeFactory {
            public getAccountTypes_resultStandardScheme getScheme() {
                return new getAccountTypes_resultStandardScheme();
            }
        }

        private static class getAccountTypes_resultStandardScheme extends StandardScheme<getAccountTypes_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getAccountTypes_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list356 = iprot.readListBegin();
                                    struct.success = new ArrayList<String>(_list356.size);
                                    String _elem357;
                                    for (int _i358 = 0; _i358 < _list356.size; ++_i358) {
                                        _elem357 = iprot.readString();
                                        struct.success.add(_elem357);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getAccountTypes_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter359 : struct.success) {
                            oprot.writeString(_iter359);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getAccountTypes_resultTupleSchemeFactory implements SchemeFactory {
            public getAccountTypes_resultTupleScheme getScheme() {
                return new getAccountTypes_resultTupleScheme();
            }
        }

        private static class getAccountTypes_resultTupleScheme extends TupleScheme<getAccountTypes_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAccountTypes_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter360 : struct.success) {
                            oprot.writeString(_iter360);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAccountTypes_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list361 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list361.size);
                        String _elem362;
                        for (int _i363 = 0; _i363 < _list361.size; ++_i363) {
                            _elem362 = iprot.readString();
                            struct.success.add(_elem362);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class updateAccount_args implements org.apache.thrift.TBase<updateAccount_args, updateAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAccount_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAccount_args");

        private static final org.apache.thrift.protocol.TField PLUGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("plugin", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.MAP, (short) 4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new updateAccount_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateAccount_argsTupleSchemeFactory());
        }

        public String plugin; // required
        public String account; // required
        public String password; // required
        public Map<String, String> options; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(plugin);
            out.writeString(account);
            out.writeString(password);
            out.writeMap(options);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public updateAccount_args(android.os.Parcel in) {
            this.plugin = in.readString();
            this.account = in.readString();
            this.password = in.readString();
            this.options = new HashMap<String, String>();
            in.readMap(this.options, updateAccount_args.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<updateAccount_args> CREATOR = new android.os.Parcelable.Creator<updateAccount_args>() {
            @Override
            public updateAccount_args[] newArray(int size) {
                return new updateAccount_args[size];
            }

            @Override
            public updateAccount_args createFromParcel(android.os.Parcel in) {
                return new updateAccount_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PLUGIN((short) 1, "plugin"),
            ACCOUNT((short) 2, "account"),
            PASSWORD((short) 3, "password"),
            OPTIONS((short) 4, "options");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PLUGIN
                        return PLUGIN;
                    case 2: // ACCOUNT
                        return ACCOUNT;
                    case 3: // PASSWORD
                        return PASSWORD;
                    case 4: // OPTIONS
                        return OPTIONS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PLUGIN, new org.apache.thrift.meta_data.FieldMetaData("plugin", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "PluginName")));
            tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAccount_args.class, metaDataMap);
        }

        public updateAccount_args() {
        }

        public updateAccount_args(
                String plugin,
                String account,
                String password,
                Map<String, String> options) {
            this();
            this.plugin = plugin;
            this.account = account;
            this.password = password;
            this.options = options;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateAccount_args(updateAccount_args other) {
            if (other.isSetPlugin()) {
                this.plugin = other.plugin;
            }
            if (other.isSetAccount()) {
                this.account = other.account;
            }
            if (other.isSetPassword()) {
                this.password = other.password;
            }
            if (other.isSetOptions()) {
                Map<String, String> __this__options = new HashMap<String, String>(other.options);
                this.options = __this__options;
            }
        }

        public updateAccount_args deepCopy() {
            return new updateAccount_args(this);
        }

        @Override
        public void clear() {
            this.plugin = null;
            this.account = null;
            this.password = null;
            this.options = null;
        }

        public String getPlugin() {
            return this.plugin;
        }

        public updateAccount_args setPlugin(String plugin) {
            this.plugin = plugin;
            return this;
        }

        public void unsetPlugin() {
            this.plugin = null;
        }

        /** Returns true if field plugin is set (has been assigned a value) and false otherwise */
        public boolean isSetPlugin() {
            return this.plugin != null;
        }

        public void setPluginIsSet(boolean value) {
            if (!value) {
                this.plugin = null;
            }
        }

        public String getAccount() {
            return this.account;
        }

        public updateAccount_args setAccount(String account) {
            this.account = account;
            return this;
        }

        public void unsetAccount() {
            this.account = null;
        }

        /** Returns true if field account is set (has been assigned a value) and false otherwise */
        public boolean isSetAccount() {
            return this.account != null;
        }

        public void setAccountIsSet(boolean value) {
            if (!value) {
                this.account = null;
            }
        }

        public String getPassword() {
            return this.password;
        }

        public updateAccount_args setPassword(String password) {
            this.password = password;
            return this;
        }

        public void unsetPassword() {
            this.password = null;
        }

        /** Returns true if field password is set (has been assigned a value) and false otherwise */
        public boolean isSetPassword() {
            return this.password != null;
        }

        public void setPasswordIsSet(boolean value) {
            if (!value) {
                this.password = null;
            }
        }

        public int getOptionsSize() {
            return (this.options == null) ? 0 : this.options.size();
        }

        public void putToOptions(String key, String val) {
            if (this.options == null) {
                this.options = new HashMap<String, String>();
            }
            this.options.put(key, val);
        }

        public Map<String, String> getOptions() {
            return this.options;
        }

        public updateAccount_args setOptions(Map<String, String> options) {
            this.options = options;
            return this;
        }

        public void unsetOptions() {
            this.options = null;
        }

        /** Returns true if field options is set (has been assigned a value) and false otherwise */
        public boolean isSetOptions() {
            return this.options != null;
        }

        public void setOptionsIsSet(boolean value) {
            if (!value) {
                this.options = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PLUGIN:
                    if (value == null) {
                        unsetPlugin();
                    } else {
                        setPlugin((String) value);
                    }
                    break;

                case ACCOUNT:
                    if (value == null) {
                        unsetAccount();
                    } else {
                        setAccount((String) value);
                    }
                    break;

                case PASSWORD:
                    if (value == null) {
                        unsetPassword();
                    } else {
                        setPassword((String) value);
                    }
                    break;

                case OPTIONS:
                    if (value == null) {
                        unsetOptions();
                    } else {
                        setOptions((Map<String, String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PLUGIN:
                    return getPlugin();

                case ACCOUNT:
                    return getAccount();

                case PASSWORD:
                    return getPassword();

                case OPTIONS:
                    return getOptions();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PLUGIN:
                    return isSetPlugin();
                case ACCOUNT:
                    return isSetAccount();
                case PASSWORD:
                    return isSetPassword();
                case OPTIONS:
                    return isSetOptions();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateAccount_args)
                return this.equals((updateAccount_args) that);
            return false;
        }

        public boolean equals(updateAccount_args that) {
            if (that == null)
                return false;

            boolean this_present_plugin = true && this.isSetPlugin();
            boolean that_present_plugin = true && that.isSetPlugin();
            if (this_present_plugin || that_present_plugin) {
                if (!(this_present_plugin && that_present_plugin))
                    return false;
                if (!this.plugin.equals(that.plugin))
                    return false;
            }

            boolean this_present_account = true && this.isSetAccount();
            boolean that_present_account = true && that.isSetAccount();
            if (this_present_account || that_present_account) {
                if (!(this_present_account && that_present_account))
                    return false;
                if (!this.account.equals(that.account))
                    return false;
            }

            boolean this_present_password = true && this.isSetPassword();
            boolean that_present_password = true && that.isSetPassword();
            if (this_present_password || that_present_password) {
                if (!(this_present_password && that_present_password))
                    return false;
                if (!this.password.equals(that.password))
                    return false;
            }

            boolean this_present_options = true && this.isSetOptions();
            boolean that_present_options = true && that.isSetOptions();
            if (this_present_options || that_present_options) {
                if (!(this_present_options && that_present_options))
                    return false;
                if (!this.options.equals(that.options))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_plugin = true && (isSetPlugin());
            list.add(present_plugin);
            if (present_plugin)
                list.add(plugin);

            boolean present_account = true && (isSetAccount());
            list.add(present_account);
            if (present_account)
                list.add(account);

            boolean present_password = true && (isSetPassword());
            list.add(present_password);
            if (present_password)
                list.add(password);

            boolean present_options = true && (isSetOptions());
            list.add(present_options);
            if (present_options)
                list.add(options);

            return list.hashCode();
        }

        @Override
        public int compareTo(updateAccount_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPlugin()).compareTo(other.isSetPlugin());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPlugin()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plugin, other.plugin);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAccount()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPassword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetOptions()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateAccount_args(");
            boolean first = true;

            sb.append("plugin:");
            if (this.plugin == null) {
                sb.append("null");
            } else {
                sb.append(this.plugin);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("account:");
            if (this.account == null) {
                sb.append("null");
            } else {
                sb.append(this.account);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("password:");
            if (this.password == null) {
                sb.append("null");
            } else {
                sb.append(this.password);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("options:");
            if (this.options == null) {
                sb.append("null");
            } else {
                sb.append(this.options);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateAccount_argsStandardSchemeFactory implements SchemeFactory {
            public updateAccount_argsStandardScheme getScheme() {
                return new updateAccount_argsStandardScheme();
            }
        }

        private static class updateAccount_argsStandardScheme extends StandardScheme<updateAccount_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateAccount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PLUGIN
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.plugin = iprot.readString();
                                struct.setPluginIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ACCOUNT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.account = iprot.readString();
                                struct.setAccountIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PASSWORD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.password = iprot.readString();
                                struct.setPasswordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // OPTIONS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map364 = iprot.readMapBegin();
                                    struct.options = new HashMap<String, String>(2 * _map364.size);
                                    String _key365;
                                    String _val366;
                                    for (int _i367 = 0; _i367 < _map364.size; ++_i367) {
                                        _key365 = iprot.readString();
                                        _val366 = iprot.readString();
                                        struct.options.put(_key365, _val366);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setOptionsIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateAccount_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.plugin != null) {
                    oprot.writeFieldBegin(PLUGIN_FIELD_DESC);
                    oprot.writeString(struct.plugin);
                    oprot.writeFieldEnd();
                }
                if (struct.account != null) {
                    oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
                    oprot.writeString(struct.account);
                    oprot.writeFieldEnd();
                }
                if (struct.password != null) {
                    oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                    oprot.writeString(struct.password);
                    oprot.writeFieldEnd();
                }
                if (struct.options != null) {
                    oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.options.size()));
                        for (Map.Entry<String, String> _iter368 : struct.options.entrySet()) {
                            oprot.writeString(_iter368.getKey());
                            oprot.writeString(_iter368.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateAccount_argsTupleSchemeFactory implements SchemeFactory {
            public updateAccount_argsTupleScheme getScheme() {
                return new updateAccount_argsTupleScheme();
            }
        }

        private static class updateAccount_argsTupleScheme extends TupleScheme<updateAccount_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateAccount_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPlugin()) {
                    optionals.set(0);
                }
                if (struct.isSetAccount()) {
                    optionals.set(1);
                }
                if (struct.isSetPassword()) {
                    optionals.set(2);
                }
                if (struct.isSetOptions()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetPlugin()) {
                    oprot.writeString(struct.plugin);
                }
                if (struct.isSetAccount()) {
                    oprot.writeString(struct.account);
                }
                if (struct.isSetPassword()) {
                    oprot.writeString(struct.password);
                }
                if (struct.isSetOptions()) {
                    {
                        oprot.writeI32(struct.options.size());
                        for (Map.Entry<String, String> _iter369 : struct.options.entrySet()) {
                            oprot.writeString(_iter369.getKey());
                            oprot.writeString(_iter369.getValue());
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateAccount_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.plugin = iprot.readString();
                    struct.setPluginIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.account = iprot.readString();
                    struct.setAccountIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.password = iprot.readString();
                    struct.setPasswordIsSet(true);
                }
                if (incoming.get(3)) {
                    {
                        org.apache.thrift.protocol.TMap _map370 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.options = new HashMap<String, String>(2 * _map370.size);
                        String _key371;
                        String _val372;
                        for (int _i373 = 0; _i373 < _map370.size; ++_i373) {
                            _key371 = iprot.readString();
                            _val372 = iprot.readString();
                            struct.options.put(_key371, _val372);
                        }
                    }
                    struct.setOptionsIsSet(true);
                }
            }
        }

    }

    public static class updateAccount_result implements org.apache.thrift.TBase<updateAccount_result, updateAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAccount_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAccount_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new updateAccount_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateAccount_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public updateAccount_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<updateAccount_result> CREATOR = new android.os.Parcelable.Creator<updateAccount_result>() {
            @Override
            public updateAccount_result[] newArray(int size) {
                return new updateAccount_result[size];
            }

            @Override
            public updateAccount_result createFromParcel(android.os.Parcel in) {
                return new updateAccount_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAccount_result.class, metaDataMap);
        }

        public updateAccount_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public updateAccount_result(updateAccount_result other) {
        }

        public updateAccount_result deepCopy() {
            return new updateAccount_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof updateAccount_result)
                return this.equals((updateAccount_result) that);
            return false;
        }

        public boolean equals(updateAccount_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(updateAccount_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateAccount_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class updateAccount_resultStandardSchemeFactory implements SchemeFactory {
            public updateAccount_resultStandardScheme getScheme() {
                return new updateAccount_resultStandardScheme();
            }
        }

        private static class updateAccount_resultStandardScheme extends StandardScheme<updateAccount_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, updateAccount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, updateAccount_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class updateAccount_resultTupleSchemeFactory implements SchemeFactory {
            public updateAccount_resultTupleScheme getScheme() {
                return new updateAccount_resultTupleScheme();
            }
        }

        private static class updateAccount_resultTupleScheme extends TupleScheme<updateAccount_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateAccount_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateAccount_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class removeAccount_args implements org.apache.thrift.TBase<removeAccount_args, removeAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeAccount_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAccount_args");

        private static final org.apache.thrift.protocol.TField PLUGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("plugin", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new removeAccount_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new removeAccount_argsTupleSchemeFactory());
        }

        public String plugin; // required
        public String account; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(plugin);
            out.writeString(account);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public removeAccount_args(android.os.Parcel in) {
            this.plugin = in.readString();
            this.account = in.readString();
        }

        public static final android.os.Parcelable.Creator<removeAccount_args> CREATOR = new android.os.Parcelable.Creator<removeAccount_args>() {
            @Override
            public removeAccount_args[] newArray(int size) {
                return new removeAccount_args[size];
            }

            @Override
            public removeAccount_args createFromParcel(android.os.Parcel in) {
                return new removeAccount_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PLUGIN((short) 1, "plugin"),
            ACCOUNT((short) 2, "account");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PLUGIN
                        return PLUGIN;
                    case 2: // ACCOUNT
                        return ACCOUNT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PLUGIN, new org.apache.thrift.meta_data.FieldMetaData("plugin", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "PluginName")));
            tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAccount_args.class, metaDataMap);
        }

        public removeAccount_args() {
        }

        public removeAccount_args(
                String plugin,
                String account) {
            this();
            this.plugin = plugin;
            this.account = account;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public removeAccount_args(removeAccount_args other) {
            if (other.isSetPlugin()) {
                this.plugin = other.plugin;
            }
            if (other.isSetAccount()) {
                this.account = other.account;
            }
        }

        public removeAccount_args deepCopy() {
            return new removeAccount_args(this);
        }

        @Override
        public void clear() {
            this.plugin = null;
            this.account = null;
        }

        public String getPlugin() {
            return this.plugin;
        }

        public removeAccount_args setPlugin(String plugin) {
            this.plugin = plugin;
            return this;
        }

        public void unsetPlugin() {
            this.plugin = null;
        }

        /** Returns true if field plugin is set (has been assigned a value) and false otherwise */
        public boolean isSetPlugin() {
            return this.plugin != null;
        }

        public void setPluginIsSet(boolean value) {
            if (!value) {
                this.plugin = null;
            }
        }

        public String getAccount() {
            return this.account;
        }

        public removeAccount_args setAccount(String account) {
            this.account = account;
            return this;
        }

        public void unsetAccount() {
            this.account = null;
        }

        /** Returns true if field account is set (has been assigned a value) and false otherwise */
        public boolean isSetAccount() {
            return this.account != null;
        }

        public void setAccountIsSet(boolean value) {
            if (!value) {
                this.account = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PLUGIN:
                    if (value == null) {
                        unsetPlugin();
                    } else {
                        setPlugin((String) value);
                    }
                    break;

                case ACCOUNT:
                    if (value == null) {
                        unsetAccount();
                    } else {
                        setAccount((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PLUGIN:
                    return getPlugin();

                case ACCOUNT:
                    return getAccount();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PLUGIN:
                    return isSetPlugin();
                case ACCOUNT:
                    return isSetAccount();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof removeAccount_args)
                return this.equals((removeAccount_args) that);
            return false;
        }

        public boolean equals(removeAccount_args that) {
            if (that == null)
                return false;

            boolean this_present_plugin = true && this.isSetPlugin();
            boolean that_present_plugin = true && that.isSetPlugin();
            if (this_present_plugin || that_present_plugin) {
                if (!(this_present_plugin && that_present_plugin))
                    return false;
                if (!this.plugin.equals(that.plugin))
                    return false;
            }

            boolean this_present_account = true && this.isSetAccount();
            boolean that_present_account = true && that.isSetAccount();
            if (this_present_account || that_present_account) {
                if (!(this_present_account && that_present_account))
                    return false;
                if (!this.account.equals(that.account))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_plugin = true && (isSetPlugin());
            list.add(present_plugin);
            if (present_plugin)
                list.add(plugin);

            boolean present_account = true && (isSetAccount());
            list.add(present_account);
            if (present_account)
                list.add(account);

            return list.hashCode();
        }

        @Override
        public int compareTo(removeAccount_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPlugin()).compareTo(other.isSetPlugin());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPlugin()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plugin, other.plugin);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAccount()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("removeAccount_args(");
            boolean first = true;

            sb.append("plugin:");
            if (this.plugin == null) {
                sb.append("null");
            } else {
                sb.append(this.plugin);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("account:");
            if (this.account == null) {
                sb.append("null");
            } else {
                sb.append(this.account);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class removeAccount_argsStandardSchemeFactory implements SchemeFactory {
            public removeAccount_argsStandardScheme getScheme() {
                return new removeAccount_argsStandardScheme();
            }
        }

        private static class removeAccount_argsStandardScheme extends StandardScheme<removeAccount_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, removeAccount_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PLUGIN
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.plugin = iprot.readString();
                                struct.setPluginIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ACCOUNT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.account = iprot.readString();
                                struct.setAccountIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, removeAccount_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.plugin != null) {
                    oprot.writeFieldBegin(PLUGIN_FIELD_DESC);
                    oprot.writeString(struct.plugin);
                    oprot.writeFieldEnd();
                }
                if (struct.account != null) {
                    oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
                    oprot.writeString(struct.account);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class removeAccount_argsTupleSchemeFactory implements SchemeFactory {
            public removeAccount_argsTupleScheme getScheme() {
                return new removeAccount_argsTupleScheme();
            }
        }

        private static class removeAccount_argsTupleScheme extends TupleScheme<removeAccount_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, removeAccount_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPlugin()) {
                    optionals.set(0);
                }
                if (struct.isSetAccount()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPlugin()) {
                    oprot.writeString(struct.plugin);
                }
                if (struct.isSetAccount()) {
                    oprot.writeString(struct.account);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, removeAccount_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.plugin = iprot.readString();
                    struct.setPluginIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.account = iprot.readString();
                    struct.setAccountIsSet(true);
                }
            }
        }

    }

    public static class removeAccount_result implements org.apache.thrift.TBase<removeAccount_result, removeAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeAccount_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAccount_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new removeAccount_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new removeAccount_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public removeAccount_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<removeAccount_result> CREATOR = new android.os.Parcelable.Creator<removeAccount_result>() {
            @Override
            public removeAccount_result[] newArray(int size) {
                return new removeAccount_result[size];
            }

            @Override
            public removeAccount_result createFromParcel(android.os.Parcel in) {
                return new removeAccount_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAccount_result.class, metaDataMap);
        }

        public removeAccount_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public removeAccount_result(removeAccount_result other) {
        }

        public removeAccount_result deepCopy() {
            return new removeAccount_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof removeAccount_result)
                return this.equals((removeAccount_result) that);
            return false;
        }

        public boolean equals(removeAccount_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(removeAccount_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("removeAccount_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class removeAccount_resultStandardSchemeFactory implements SchemeFactory {
            public removeAccount_resultStandardScheme getScheme() {
                return new removeAccount_resultStandardScheme();
            }
        }

        private static class removeAccount_resultStandardScheme extends StandardScheme<removeAccount_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, removeAccount_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, removeAccount_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class removeAccount_resultTupleSchemeFactory implements SchemeFactory {
            public removeAccount_resultTupleScheme getScheme() {
                return new removeAccount_resultTupleScheme();
            }
        }

        private static class removeAccount_resultTupleScheme extends TupleScheme<removeAccount_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, removeAccount_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, removeAccount_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

        private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new login_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new login_argsTupleSchemeFactory());
        }

        public String username; // required
        public String password; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(username);
            out.writeString(password);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public login_args(android.os.Parcel in) {
            this.username = in.readString();
            this.password = in.readString();
        }

        public static final android.os.Parcelable.Creator<login_args> CREATOR = new android.os.Parcelable.Creator<login_args>() {
            @Override
            public login_args[] newArray(int size) {
                return new login_args[size];
            }

            @Override
            public login_args createFromParcel(android.os.Parcel in) {
                return new login_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USERNAME((short) 1, "username"),
            PASSWORD((short) 2, "password");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USERNAME
                        return USERNAME;
                    case 2: // PASSWORD
                        return PASSWORD;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
        }

        public login_args() {
        }

        public login_args(
                String username,
                String password) {
            this();
            this.username = username;
            this.password = password;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public login_args(login_args other) {
            if (other.isSetUsername()) {
                this.username = other.username;
            }
            if (other.isSetPassword()) {
                this.password = other.password;
            }
        }

        public login_args deepCopy() {
            return new login_args(this);
        }

        @Override
        public void clear() {
            this.username = null;
            this.password = null;
        }

        public String getUsername() {
            return this.username;
        }

        public login_args setUsername(String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /** Returns true if field username is set (has been assigned a value) and false otherwise */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        public String getPassword() {
            return this.password;
        }

        public login_args setPassword(String password) {
            this.password = password;
            return this;
        }

        public void unsetPassword() {
            this.password = null;
        }

        /** Returns true if field password is set (has been assigned a value) and false otherwise */
        public boolean isSetPassword() {
            return this.password != null;
        }

        public void setPasswordIsSet(boolean value) {
            if (!value) {
                this.password = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USERNAME:
                    if (value == null) {
                        unsetUsername();
                    } else {
                        setUsername((String) value);
                    }
                    break;

                case PASSWORD:
                    if (value == null) {
                        unsetPassword();
                    } else {
                        setPassword((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USERNAME:
                    return getUsername();

                case PASSWORD:
                    return getPassword();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USERNAME:
                    return isSetUsername();
                case PASSWORD:
                    return isSetPassword();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof login_args)
                return this.equals((login_args) that);
            return false;
        }

        public boolean equals(login_args that) {
            if (that == null)
                return false;

            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }

            boolean this_present_password = true && this.isSetPassword();
            boolean that_present_password = true && that.isSetPassword();
            if (this_present_password || that_present_password) {
                if (!(this_present_password && that_present_password))
                    return false;
                if (!this.password.equals(that.password))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_username = true && (isSetUsername());
            list.add(present_username);
            if (present_username)
                list.add(username);

            boolean present_password = true && (isSetPassword());
            list.add(present_password);
            if (present_password)
                list.add(password);

            return list.hashCode();
        }

        @Override
        public int compareTo(login_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPassword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("login_args(");
            boolean first = true;

            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("password:");
            if (this.password == null) {
                sb.append("null");
            } else {
                sb.append(this.password);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class login_argsStandardSchemeFactory implements SchemeFactory {
            public login_argsStandardScheme getScheme() {
                return new login_argsStandardScheme();
            }
        }

        private static class login_argsStandardScheme extends StandardScheme<login_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USERNAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.username = iprot.readString();
                                struct.setUsernameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PASSWORD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.password = iprot.readString();
                                struct.setPasswordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.username != null) {
                    oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                    oprot.writeString(struct.username);
                    oprot.writeFieldEnd();
                }
                if (struct.password != null) {
                    oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                    oprot.writeString(struct.password);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class login_argsTupleSchemeFactory implements SchemeFactory {
            public login_argsTupleScheme getScheme() {
                return new login_argsTupleScheme();
            }
        }

        private static class login_argsTupleScheme extends TupleScheme<login_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUsername()) {
                    optionals.set(0);
                }
                if (struct.isSetPassword()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetUsername()) {
                    oprot.writeString(struct.username);
                }
                if (struct.isSetPassword()) {
                    oprot.writeString(struct.password);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.username = iprot.readString();
                    struct.setUsernameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.password = iprot.readString();
                    struct.setPasswordIsSet(true);
                }
            }
        }

    }

    public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new login_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new login_resultTupleSchemeFactory());
        }

        public boolean success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(success ? 1 : 0);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public login_result(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.success = (in.readInt() == 1);
        }

        public static final android.os.Parcelable.Creator<login_result> CREATOR = new android.os.Parcelable.Creator<login_result>() {
            @Override
            public login_result[] newArray(int size) {
                return new login_result[size];
            }

            @Override
            public login_result createFromParcel(android.os.Parcel in) {
                return new login_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
        }

        public login_result() {
        }

        public login_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public login_result(login_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public login_result deepCopy() {
            return new login_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public login_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof login_result)
                return this.equals((login_result) that);
            return false;
        }

        public boolean equals(login_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(login_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("login_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class login_resultStandardSchemeFactory implements SchemeFactory {
            public login_resultStandardScheme getScheme() {
                return new login_resultStandardScheme();
            }
        }

        private static class login_resultStandardScheme extends StandardScheme<login_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class login_resultTupleSchemeFactory implements SchemeFactory {
            public login_resultTupleScheme getScheme() {
                return new login_resultTupleScheme();
            }
        }

        private static class login_resultTupleScheme extends TupleScheme<login_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getUserData_args implements org.apache.thrift.TBase<getUserData_args, getUserData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserData_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserData_args");

        private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getUserData_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getUserData_argsTupleSchemeFactory());
        }

        public String username; // required
        public String password; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(username);
            out.writeString(password);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getUserData_args(android.os.Parcel in) {
            this.username = in.readString();
            this.password = in.readString();
        }

        public static final android.os.Parcelable.Creator<getUserData_args> CREATOR = new android.os.Parcelable.Creator<getUserData_args>() {
            @Override
            public getUserData_args[] newArray(int size) {
                return new getUserData_args[size];
            }

            @Override
            public getUserData_args createFromParcel(android.os.Parcel in) {
                return new getUserData_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            USERNAME((short) 1, "username"),
            PASSWORD((short) 2, "password");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USERNAME
                        return USERNAME;
                    case 2: // PASSWORD
                        return PASSWORD;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserData_args.class, metaDataMap);
        }

        public getUserData_args() {
        }

        public getUserData_args(
                String username,
                String password) {
            this();
            this.username = username;
            this.password = password;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getUserData_args(getUserData_args other) {
            if (other.isSetUsername()) {
                this.username = other.username;
            }
            if (other.isSetPassword()) {
                this.password = other.password;
            }
        }

        public getUserData_args deepCopy() {
            return new getUserData_args(this);
        }

        @Override
        public void clear() {
            this.username = null;
            this.password = null;
        }

        public String getUsername() {
            return this.username;
        }

        public getUserData_args setUsername(String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /** Returns true if field username is set (has been assigned a value) and false otherwise */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        public String getPassword() {
            return this.password;
        }

        public getUserData_args setPassword(String password) {
            this.password = password;
            return this;
        }

        public void unsetPassword() {
            this.password = null;
        }

        /** Returns true if field password is set (has been assigned a value) and false otherwise */
        public boolean isSetPassword() {
            return this.password != null;
        }

        public void setPasswordIsSet(boolean value) {
            if (!value) {
                this.password = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case USERNAME:
                    if (value == null) {
                        unsetUsername();
                    } else {
                        setUsername((String) value);
                    }
                    break;

                case PASSWORD:
                    if (value == null) {
                        unsetPassword();
                    } else {
                        setPassword((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USERNAME:
                    return getUsername();

                case PASSWORD:
                    return getPassword();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USERNAME:
                    return isSetUsername();
                case PASSWORD:
                    return isSetPassword();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getUserData_args)
                return this.equals((getUserData_args) that);
            return false;
        }

        public boolean equals(getUserData_args that) {
            if (that == null)
                return false;

            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }

            boolean this_present_password = true && this.isSetPassword();
            boolean that_present_password = true && that.isSetPassword();
            if (this_present_password || that_present_password) {
                if (!(this_present_password && that_present_password))
                    return false;
                if (!this.password.equals(that.password))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_username = true && (isSetUsername());
            list.add(present_username);
            if (present_username)
                list.add(username);

            boolean present_password = true && (isSetPassword());
            list.add(present_password);
            if (present_password)
                list.add(password);

            return list.hashCode();
        }

        @Override
        public int compareTo(getUserData_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPassword()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getUserData_args(");
            boolean first = true;

            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("password:");
            if (this.password == null) {
                sb.append("null");
            } else {
                sb.append(this.password);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getUserData_argsStandardSchemeFactory implements SchemeFactory {
            public getUserData_argsStandardScheme getScheme() {
                return new getUserData_argsStandardScheme();
            }
        }

        private static class getUserData_argsStandardScheme extends StandardScheme<getUserData_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getUserData_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USERNAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.username = iprot.readString();
                                struct.setUsernameIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PASSWORD
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.password = iprot.readString();
                                struct.setPasswordIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getUserData_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.username != null) {
                    oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                    oprot.writeString(struct.username);
                    oprot.writeFieldEnd();
                }
                if (struct.password != null) {
                    oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
                    oprot.writeString(struct.password);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getUserData_argsTupleSchemeFactory implements SchemeFactory {
            public getUserData_argsTupleScheme getScheme() {
                return new getUserData_argsTupleScheme();
            }
        }

        private static class getUserData_argsTupleScheme extends TupleScheme<getUserData_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getUserData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUsername()) {
                    optionals.set(0);
                }
                if (struct.isSetPassword()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetUsername()) {
                    oprot.writeString(struct.username);
                }
                if (struct.isSetPassword()) {
                    oprot.writeString(struct.password);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getUserData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.username = iprot.readString();
                    struct.setUsernameIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.password = iprot.readString();
                    struct.setPasswordIsSet(true);
                }
            }
        }

    }

    public static class getUserData_result implements org.apache.thrift.TBase<getUserData_result, getUserData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserData_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserData_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getUserData_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getUserData_resultTupleSchemeFactory());
        }

        public UserData success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeParcelable(success, flags);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getUserData_result(android.os.Parcel in) {
            this.success = in.readParcelable(getUserData_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getUserData_result> CREATOR = new android.os.Parcelable.Creator<getUserData_result>() {
            @Override
            public getUserData_result[] newArray(int size) {
                return new getUserData_result[size];
            }

            @Override
            public getUserData_result createFromParcel(android.os.Parcel in) {
                return new getUserData_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserData.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserData_result.class, metaDataMap);
        }

        public getUserData_result() {
        }

        public getUserData_result(
                UserData success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getUserData_result(getUserData_result other) {
            if (other.isSetSuccess()) {
                this.success = new UserData(other.success);
            }
        }

        public getUserData_result deepCopy() {
            return new getUserData_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public UserData getSuccess() {
            return this.success;
        }

        public getUserData_result setSuccess(UserData success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((UserData) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getUserData_result)
                return this.equals((getUserData_result) that);
            return false;
        }

        public boolean equals(getUserData_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getUserData_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getUserData_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getUserData_resultStandardSchemeFactory implements SchemeFactory {
            public getUserData_resultStandardScheme getScheme() {
                return new getUserData_resultStandardScheme();
            }
        }

        private static class getUserData_resultStandardScheme extends StandardScheme<getUserData_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getUserData_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new UserData();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getUserData_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getUserData_resultTupleSchemeFactory implements SchemeFactory {
            public getUserData_resultTupleScheme getScheme() {
                return new getUserData_resultTupleScheme();
            }
        }

        private static class getUserData_resultTupleScheme extends TupleScheme<getUserData_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getUserData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getUserData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new UserData();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getAllUserData_args implements org.apache.thrift.TBase<getAllUserData_args, getAllUserData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUserData_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUserData_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getAllUserData_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAllUserData_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getAllUserData_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<getAllUserData_args> CREATOR = new android.os.Parcelable.Creator<getAllUserData_args>() {
            @Override
            public getAllUserData_args[] newArray(int size) {
                return new getAllUserData_args[size];
            }

            @Override
            public getAllUserData_args createFromParcel(android.os.Parcel in) {
                return new getAllUserData_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUserData_args.class, metaDataMap);
        }

        public getAllUserData_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAllUserData_args(getAllUserData_args other) {
        }

        public getAllUserData_args deepCopy() {
            return new getAllUserData_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAllUserData_args)
                return this.equals((getAllUserData_args) that);
            return false;
        }

        public boolean equals(getAllUserData_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getAllUserData_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAllUserData_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getAllUserData_argsStandardSchemeFactory implements SchemeFactory {
            public getAllUserData_argsStandardScheme getScheme() {
                return new getAllUserData_argsStandardScheme();
            }
        }

        private static class getAllUserData_argsStandardScheme extends StandardScheme<getAllUserData_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUserData_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUserData_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getAllUserData_argsTupleSchemeFactory implements SchemeFactory {
            public getAllUserData_argsTupleScheme getScheme() {
                return new getAllUserData_argsTupleScheme();
            }
        }

        private static class getAllUserData_argsTupleScheme extends TupleScheme<getAllUserData_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAllUserData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAllUserData_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getAllUserData_result implements org.apache.thrift.TBase<getAllUserData_result, getAllUserData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUserData_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUserData_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getAllUserData_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAllUserData_resultTupleSchemeFactory());
        }

        public Map<String, UserData> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeMap(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getAllUserData_result(android.os.Parcel in) {
            this.success = new HashMap<String, UserData>();
            in.readMap(this.success, getAllUserData_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getAllUserData_result> CREATOR = new android.os.Parcelable.Creator<getAllUserData_result>() {
            @Override
            public getAllUserData_result[] newArray(int size) {
                return new getAllUserData_result[size];
            }

            @Override
            public getAllUserData_result createFromParcel(android.os.Parcel in) {
                return new getAllUserData_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserData.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUserData_result.class, metaDataMap);
        }

        public getAllUserData_result() {
        }

        public getAllUserData_result(
                Map<String, UserData> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAllUserData_result(getAllUserData_result other) {
            if (other.isSetSuccess()) {
                Map<String, UserData> __this__success = new HashMap<String, UserData>(other.success.size());
                for (Map.Entry<String, UserData> other_element : other.success.entrySet()) {

                    String other_element_key = other_element.getKey();
                    UserData other_element_value = other_element.getValue();

                    String __this__success_copy_key = other_element_key;

                    UserData __this__success_copy_value = new UserData(other_element_value);

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public getAllUserData_result deepCopy() {
            return new getAllUserData_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(String key, UserData val) {
            if (this.success == null) {
                this.success = new HashMap<String, UserData>();
            }
            this.success.put(key, val);
        }

        public Map<String, UserData> getSuccess() {
            return this.success;
        }

        public getAllUserData_result setSuccess(Map<String, UserData> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<String, UserData>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAllUserData_result)
                return this.equals((getAllUserData_result) that);
            return false;
        }

        public boolean equals(getAllUserData_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getAllUserData_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAllUserData_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getAllUserData_resultStandardSchemeFactory implements SchemeFactory {
            public getAllUserData_resultStandardScheme getScheme() {
                return new getAllUserData_resultStandardScheme();
            }
        }

        private static class getAllUserData_resultStandardScheme extends StandardScheme<getAllUserData_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUserData_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map374 = iprot.readMapBegin();
                                    struct.success = new HashMap<String, UserData>(2 * _map374.size);
                                    String _key375;
                                    UserData _val376;
                                    for (int _i377 = 0; _i377 < _map374.size; ++_i377) {
                                        _key375 = iprot.readString();
                                        _val376 = new UserData();
                                        _val376.read(iprot);
                                        struct.success.put(_key375, _val376);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUserData_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (Map.Entry<String, UserData> _iter378 : struct.success.entrySet()) {
                            oprot.writeString(_iter378.getKey());
                            _iter378.getValue().write(oprot);
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getAllUserData_resultTupleSchemeFactory implements SchemeFactory {
            public getAllUserData_resultTupleScheme getScheme() {
                return new getAllUserData_resultTupleScheme();
            }
        }

        private static class getAllUserData_resultTupleScheme extends TupleScheme<getAllUserData_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAllUserData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<String, UserData> _iter379 : struct.success.entrySet()) {
                            oprot.writeString(_iter379.getKey());
                            _iter379.getValue().write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAllUserData_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map380 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new HashMap<String, UserData>(2 * _map380.size);
                        String _key381;
                        UserData _val382;
                        for (int _i383 = 0; _i383 < _map380.size; ++_i383) {
                            _key381 = iprot.readString();
                            _val382 = new UserData();
                            _val382.read(iprot);
                            struct.success.put(_key381, _val382);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getServices_args implements org.apache.thrift.TBase<getServices_args, getServices_args._Fields>, java.io.Serializable, Cloneable, Comparable<getServices_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServices_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getServices_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getServices_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getServices_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<getServices_args> CREATOR = new android.os.Parcelable.Creator<getServices_args>() {
            @Override
            public getServices_args[] newArray(int size) {
                return new getServices_args[size];
            }

            @Override
            public getServices_args createFromParcel(android.os.Parcel in) {
                return new getServices_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServices_args.class, metaDataMap);
        }

        public getServices_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getServices_args(getServices_args other) {
        }

        public getServices_args deepCopy() {
            return new getServices_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getServices_args)
                return this.equals((getServices_args) that);
            return false;
        }

        public boolean equals(getServices_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getServices_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getServices_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getServices_argsStandardSchemeFactory implements SchemeFactory {
            public getServices_argsStandardScheme getScheme() {
                return new getServices_argsStandardScheme();
            }
        }

        private static class getServices_argsStandardScheme extends StandardScheme<getServices_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getServices_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getServices_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getServices_argsTupleSchemeFactory implements SchemeFactory {
            public getServices_argsTupleScheme getScheme() {
                return new getServices_argsTupleScheme();
            }
        }

        private static class getServices_argsTupleScheme extends TupleScheme<getServices_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getServices_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getServices_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getServices_result implements org.apache.thrift.TBase<getServices_result, getServices_result._Fields>, java.io.Serializable, Cloneable, Comparable<getServices_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServices_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getServices_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getServices_resultTupleSchemeFactory());
        }

        public Map<String, Map<String, String>> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeMap(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getServices_result(android.os.Parcel in) {
            this.success = new HashMap<String, Map<String, String>>();
            in.readMap(this.success, getServices_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getServices_result> CREATOR = new android.os.Parcelable.Creator<getServices_result>() {
            @Override
            public getServices_result[] newArray(int size) {
                return new getServices_result[size];
            }

            @Override
            public getServices_result createFromParcel(android.os.Parcel in) {
                return new getServices_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "PluginName"),
                            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServices_result.class, metaDataMap);
        }

        public getServices_result() {
        }

        public getServices_result(
                Map<String, Map<String, String>> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getServices_result(getServices_result other) {
            if (other.isSetSuccess()) {
                Map<String, Map<String, String>> __this__success = new HashMap<String, Map<String, String>>(other.success.size());
                for (Map.Entry<String, Map<String, String>> other_element : other.success.entrySet()) {

                    String other_element_key = other_element.getKey();
                    Map<String, String> other_element_value = other_element.getValue();

                    String __this__success_copy_key = other_element_key;

                    Map<String, String> __this__success_copy_value = new HashMap<String, String>(other_element_value);

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public getServices_result deepCopy() {
            return new getServices_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(String key, Map<String, String> val) {
            if (this.success == null) {
                this.success = new HashMap<String, Map<String, String>>();
            }
            this.success.put(key, val);
        }

        public Map<String, Map<String, String>> getSuccess() {
            return this.success;
        }

        public getServices_result setSuccess(Map<String, Map<String, String>> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<String, Map<String, String>>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getServices_result)
                return this.equals((getServices_result) that);
            return false;
        }

        public boolean equals(getServices_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getServices_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getServices_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getServices_resultStandardSchemeFactory implements SchemeFactory {
            public getServices_resultStandardScheme getScheme() {
                return new getServices_resultStandardScheme();
            }
        }

        private static class getServices_resultStandardScheme extends StandardScheme<getServices_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getServices_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map384 = iprot.readMapBegin();
                                    struct.success = new HashMap<String, Map<String, String>>(2 * _map384.size);
                                    String _key385;
                                    Map<String, String> _val386;
                                    for (int _i387 = 0; _i387 < _map384.size; ++_i387) {
                                        _key385 = iprot.readString();
                                        {
                                            org.apache.thrift.protocol.TMap _map388 = iprot.readMapBegin();
                                            _val386 = new HashMap<String, String>(2 * _map388.size);
                                            String _key389;
                                            String _val390;
                                            for (int _i391 = 0; _i391 < _map388.size; ++_i391) {
                                                _key389 = iprot.readString();
                                                _val390 = iprot.readString();
                                                _val386.put(_key389, _val390);
                                            }
                                            iprot.readMapEnd();
                                        }
                                        struct.success.put(_key385, _val386);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getServices_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
                        for (Map.Entry<String, Map<String, String>> _iter392 : struct.success.entrySet()) {
                            oprot.writeString(_iter392.getKey());
                            {
                                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter392.getValue().size()));
                                for (Map.Entry<String, String> _iter393 : _iter392.getValue().entrySet()) {
                                    oprot.writeString(_iter393.getKey());
                                    oprot.writeString(_iter393.getValue());
                                }
                                oprot.writeMapEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getServices_resultTupleSchemeFactory implements SchemeFactory {
            public getServices_resultTupleScheme getScheme() {
                return new getServices_resultTupleScheme();
            }
        }

        private static class getServices_resultTupleScheme extends TupleScheme<getServices_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getServices_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<String, Map<String, String>> _iter394 : struct.success.entrySet()) {
                            oprot.writeString(_iter394.getKey());
                            {
                                oprot.writeI32(_iter394.getValue().size());
                                for (Map.Entry<String, String> _iter395 : _iter394.getValue().entrySet()) {
                                    oprot.writeString(_iter395.getKey());
                                    oprot.writeString(_iter395.getValue());
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getServices_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map396 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                        struct.success = new HashMap<String, Map<String, String>>(2 * _map396.size);
                        String _key397;
                        Map<String, String> _val398;
                        for (int _i399 = 0; _i399 < _map396.size; ++_i399) {
                            _key397 = iprot.readString();
                            {
                                org.apache.thrift.protocol.TMap _map400 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                                _val398 = new HashMap<String, String>(2 * _map400.size);
                                String _key401;
                                String _val402;
                                for (int _i403 = 0; _i403 < _map400.size; ++_i403) {
                                    _key401 = iprot.readString();
                                    _val402 = iprot.readString();
                                    _val398.put(_key401, _val402);
                                }
                            }
                            struct.success.put(_key397, _val398);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class hasService_args implements org.apache.thrift.TBase<hasService_args, hasService_args._Fields>, java.io.Serializable, Cloneable, Comparable<hasService_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hasService_args");

        private static final org.apache.thrift.protocol.TField PLUGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("plugin", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField FUNC_FIELD_DESC = new org.apache.thrift.protocol.TField("func", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new hasService_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new hasService_argsTupleSchemeFactory());
        }

        public String plugin; // required
        public String func; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(plugin);
            out.writeString(func);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public hasService_args(android.os.Parcel in) {
            this.plugin = in.readString();
            this.func = in.readString();
        }

        public static final android.os.Parcelable.Creator<hasService_args> CREATOR = new android.os.Parcelable.Creator<hasService_args>() {
            @Override
            public hasService_args[] newArray(int size) {
                return new hasService_args[size];
            }

            @Override
            public hasService_args createFromParcel(android.os.Parcel in) {
                return new hasService_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PLUGIN((short) 1, "plugin"),
            FUNC((short) 2, "func");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PLUGIN
                        return PLUGIN;
                    case 2: // FUNC
                        return FUNC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PLUGIN, new org.apache.thrift.meta_data.FieldMetaData("plugin", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "PluginName")));
            tmpMap.put(_Fields.FUNC, new org.apache.thrift.meta_data.FieldMetaData("func", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hasService_args.class, metaDataMap);
        }

        public hasService_args() {
        }

        public hasService_args(
                String plugin,
                String func) {
            this();
            this.plugin = plugin;
            this.func = func;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hasService_args(hasService_args other) {
            if (other.isSetPlugin()) {
                this.plugin = other.plugin;
            }
            if (other.isSetFunc()) {
                this.func = other.func;
            }
        }

        public hasService_args deepCopy() {
            return new hasService_args(this);
        }

        @Override
        public void clear() {
            this.plugin = null;
            this.func = null;
        }

        public String getPlugin() {
            return this.plugin;
        }

        public hasService_args setPlugin(String plugin) {
            this.plugin = plugin;
            return this;
        }

        public void unsetPlugin() {
            this.plugin = null;
        }

        /** Returns true if field plugin is set (has been assigned a value) and false otherwise */
        public boolean isSetPlugin() {
            return this.plugin != null;
        }

        public void setPluginIsSet(boolean value) {
            if (!value) {
                this.plugin = null;
            }
        }

        public String getFunc() {
            return this.func;
        }

        public hasService_args setFunc(String func) {
            this.func = func;
            return this;
        }

        public void unsetFunc() {
            this.func = null;
        }

        /** Returns true if field func is set (has been assigned a value) and false otherwise */
        public boolean isSetFunc() {
            return this.func != null;
        }

        public void setFuncIsSet(boolean value) {
            if (!value) {
                this.func = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PLUGIN:
                    if (value == null) {
                        unsetPlugin();
                    } else {
                        setPlugin((String) value);
                    }
                    break;

                case FUNC:
                    if (value == null) {
                        unsetFunc();
                    } else {
                        setFunc((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PLUGIN:
                    return getPlugin();

                case FUNC:
                    return getFunc();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PLUGIN:
                    return isSetPlugin();
                case FUNC:
                    return isSetFunc();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof hasService_args)
                return this.equals((hasService_args) that);
            return false;
        }

        public boolean equals(hasService_args that) {
            if (that == null)
                return false;

            boolean this_present_plugin = true && this.isSetPlugin();
            boolean that_present_plugin = true && that.isSetPlugin();
            if (this_present_plugin || that_present_plugin) {
                if (!(this_present_plugin && that_present_plugin))
                    return false;
                if (!this.plugin.equals(that.plugin))
                    return false;
            }

            boolean this_present_func = true && this.isSetFunc();
            boolean that_present_func = true && that.isSetFunc();
            if (this_present_func || that_present_func) {
                if (!(this_present_func && that_present_func))
                    return false;
                if (!this.func.equals(that.func))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_plugin = true && (isSetPlugin());
            list.add(present_plugin);
            if (present_plugin)
                list.add(plugin);

            boolean present_func = true && (isSetFunc());
            list.add(present_func);
            if (present_func)
                list.add(func);

            return list.hashCode();
        }

        @Override
        public int compareTo(hasService_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPlugin()).compareTo(other.isSetPlugin());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPlugin()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plugin, other.plugin);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetFunc()).compareTo(other.isSetFunc());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetFunc()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.func, other.func);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("hasService_args(");
            boolean first = true;

            sb.append("plugin:");
            if (this.plugin == null) {
                sb.append("null");
            } else {
                sb.append(this.plugin);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("func:");
            if (this.func == null) {
                sb.append("null");
            } else {
                sb.append(this.func);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hasService_argsStandardSchemeFactory implements SchemeFactory {
            public hasService_argsStandardScheme getScheme() {
                return new hasService_argsStandardScheme();
            }
        }

        private static class hasService_argsStandardScheme extends StandardScheme<hasService_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hasService_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PLUGIN
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.plugin = iprot.readString();
                                struct.setPluginIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // FUNC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.func = iprot.readString();
                                struct.setFuncIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hasService_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.plugin != null) {
                    oprot.writeFieldBegin(PLUGIN_FIELD_DESC);
                    oprot.writeString(struct.plugin);
                    oprot.writeFieldEnd();
                }
                if (struct.func != null) {
                    oprot.writeFieldBegin(FUNC_FIELD_DESC);
                    oprot.writeString(struct.func);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hasService_argsTupleSchemeFactory implements SchemeFactory {
            public hasService_argsTupleScheme getScheme() {
                return new hasService_argsTupleScheme();
            }
        }

        private static class hasService_argsTupleScheme extends TupleScheme<hasService_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hasService_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPlugin()) {
                    optionals.set(0);
                }
                if (struct.isSetFunc()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPlugin()) {
                    oprot.writeString(struct.plugin);
                }
                if (struct.isSetFunc()) {
                    oprot.writeString(struct.func);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hasService_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.plugin = iprot.readString();
                    struct.setPluginIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.func = iprot.readString();
                    struct.setFuncIsSet(true);
                }
            }
        }

    }

    public static class hasService_result implements org.apache.thrift.TBase<hasService_result, hasService_result._Fields>, java.io.Serializable, Cloneable, Comparable<hasService_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hasService_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new hasService_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new hasService_resultTupleSchemeFactory());
        }

        public boolean success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(success ? 1 : 0);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public hasService_result(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.success = (in.readInt() == 1);
        }

        public static final android.os.Parcelable.Creator<hasService_result> CREATOR = new android.os.Parcelable.Creator<hasService_result>() {
            @Override
            public hasService_result[] newArray(int size) {
                return new hasService_result[size];
            }

            @Override
            public hasService_result createFromParcel(android.os.Parcel in) {
                return new hasService_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hasService_result.class, metaDataMap);
        }

        public hasService_result() {
        }

        public hasService_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public hasService_result(hasService_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public hasService_result deepCopy() {
            return new hasService_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public hasService_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof hasService_result)
                return this.equals((hasService_result) that);
            return false;
        }

        public boolean equals(hasService_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(hasService_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("hasService_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class hasService_resultStandardSchemeFactory implements SchemeFactory {
            public hasService_resultStandardScheme getScheme() {
                return new hasService_resultStandardScheme();
            }
        }

        private static class hasService_resultStandardScheme extends StandardScheme<hasService_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, hasService_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, hasService_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class hasService_resultTupleSchemeFactory implements SchemeFactory {
            public hasService_resultTupleScheme getScheme() {
                return new hasService_resultTupleScheme();
            }
        }

        private static class hasService_resultTupleScheme extends TupleScheme<hasService_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, hasService_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, hasService_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class call_args implements org.apache.thrift.TBase<call_args, call_args._Fields>, java.io.Serializable, Cloneable, Comparable<call_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("call_args");

        private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new call_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new call_argsTupleSchemeFactory());
        }

        public ServiceCall info; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeParcelable(info, flags);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public call_args(android.os.Parcel in) {
            this.info = in.readParcelable(call_args.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<call_args> CREATOR = new android.os.Parcelable.Creator<call_args>() {
            @Override
            public call_args[] newArray(int size) {
                return new call_args[size];
            }

            @Override
            public call_args createFromParcel(android.os.Parcel in) {
                return new call_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            INFO((short) 1, "info");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // INFO
                        return INFO;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceCall.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(call_args.class, metaDataMap);
        }

        public call_args() {
        }

        public call_args(
                ServiceCall info) {
            this();
            this.info = info;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public call_args(call_args other) {
            if (other.isSetInfo()) {
                this.info = new ServiceCall(other.info);
            }
        }

        public call_args deepCopy() {
            return new call_args(this);
        }

        @Override
        public void clear() {
            this.info = null;
        }

        public ServiceCall getInfo() {
            return this.info;
        }

        public call_args setInfo(ServiceCall info) {
            this.info = info;
            return this;
        }

        public void unsetInfo() {
            this.info = null;
        }

        /** Returns true if field info is set (has been assigned a value) and false otherwise */
        public boolean isSetInfo() {
            return this.info != null;
        }

        public void setInfoIsSet(boolean value) {
            if (!value) {
                this.info = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case INFO:
                    if (value == null) {
                        unsetInfo();
                    } else {
                        setInfo((ServiceCall) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case INFO:
                    return getInfo();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case INFO:
                    return isSetInfo();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof call_args)
                return this.equals((call_args) that);
            return false;
        }

        public boolean equals(call_args that) {
            if (that == null)
                return false;

            boolean this_present_info = true && this.isSetInfo();
            boolean that_present_info = true && that.isSetInfo();
            if (this_present_info || that_present_info) {
                if (!(this_present_info && that_present_info))
                    return false;
                if (!this.info.equals(that.info))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_info = true && (isSetInfo());
            list.add(present_info);
            if (present_info)
                list.add(info);

            return list.hashCode();
        }

        @Override
        public int compareTo(call_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetInfo()).compareTo(other.isSetInfo());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetInfo()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("call_args(");
            boolean first = true;

            sb.append("info:");
            if (this.info == null) {
                sb.append("null");
            } else {
                sb.append(this.info);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (info != null) {
                info.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class call_argsStandardSchemeFactory implements SchemeFactory {
            public call_argsStandardScheme getScheme() {
                return new call_argsStandardScheme();
            }
        }

        private static class call_argsStandardScheme extends StandardScheme<call_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, call_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // INFO
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.info = new ServiceCall();
                                struct.info.read(iprot);
                                struct.setInfoIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, call_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.info != null) {
                    oprot.writeFieldBegin(INFO_FIELD_DESC);
                    struct.info.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class call_argsTupleSchemeFactory implements SchemeFactory {
            public call_argsTupleScheme getScheme() {
                return new call_argsTupleScheme();
            }
        }

        private static class call_argsTupleScheme extends TupleScheme<call_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, call_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetInfo()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetInfo()) {
                    struct.info.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, call_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.info = new ServiceCall();
                    struct.info.read(iprot);
                    struct.setInfoIsSet(true);
                }
            }
        }

    }

    public static class call_result implements org.apache.thrift.TBase<call_result, call_result._Fields>, java.io.Serializable, Cloneable, Comparable<call_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("call_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new call_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new call_resultTupleSchemeFactory());
        }

        public String success; // required
        public ServiceDoesNotExists ex; // required
        public ServiceException e; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public call_result(android.os.Parcel in) {
            this.success = in.readString();
        }

        public static final android.os.Parcelable.Creator<call_result> CREATOR = new android.os.Parcelable.Creator<call_result>() {
            @Override
            public call_result[] newArray(int size) {
                return new call_result[size];
            }

            @Override
            public call_result createFromParcel(android.os.Parcel in) {
                return new call_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            EX((short) 1, "ex"),
            E((short) 2, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // EX
                        return EX;
                    case 2: // E
                        return E;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(call_result.class, metaDataMap);
        }

        public call_result() {
        }

        public call_result(
                String success,
                ServiceDoesNotExists ex,
                ServiceException e) {
            this();
            this.success = success;
            this.ex = ex;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public call_result(call_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetEx()) {
                this.ex = new ServiceDoesNotExists(other.ex);
            }
            if (other.isSetE()) {
                this.e = new ServiceException(other.e);
            }
        }

        public call_result deepCopy() {
            return new call_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.ex = null;
            this.e = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public call_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public ServiceDoesNotExists getEx() {
            return this.ex;
        }

        public call_result setEx(ServiceDoesNotExists ex) {
            this.ex = ex;
            return this;
        }

        public void unsetEx() {
            this.ex = null;
        }

        /** Returns true if field ex is set (has been assigned a value) and false otherwise */
        public boolean isSetEx() {
            return this.ex != null;
        }

        public void setExIsSet(boolean value) {
            if (!value) {
                this.ex = null;
            }
        }

        public ServiceException getE() {
            return this.e;
        }

        public call_result setE(ServiceException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

                case EX:
                    if (value == null) {
                        unsetEx();
                    } else {
                        setEx((ServiceDoesNotExists) value);
                    }
                    break;

                case E:
                    if (value == null) {
                        unsetE();
                    } else {
                        setE((ServiceException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case EX:
                    return getEx();

                case E:
                    return getE();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case EX:
                    return isSetEx();
                case E:
                    return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof call_result)
                return this.equals((call_result) that);
            return false;
        }

        public boolean equals(call_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_ex = true && this.isSetEx();
            boolean that_present_ex = true && that.isSetEx();
            if (this_present_ex || that_present_ex) {
                if (!(this_present_ex && that_present_ex))
                    return false;
                if (!this.ex.equals(that.ex))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_ex = true && (isSetEx());
            list.add(present_ex);
            if (present_ex)
                list.add(ex);

            boolean present_e = true && (isSetE());
            list.add(present_e);
            if (present_e)
                list.add(e);

            return list.hashCode();
        }

        @Override
        public int compareTo(call_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetEx()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("call_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("ex:");
            if (this.ex == null) {
                sb.append("null");
            } else {
                sb.append(this.ex);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class call_resultStandardSchemeFactory implements SchemeFactory {
            public call_resultStandardScheme getScheme() {
                return new call_resultStandardScheme();
            }
        }

        private static class call_resultStandardScheme extends StandardScheme<call_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, call_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // EX
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.ex = new ServiceDoesNotExists();
                                struct.ex.read(iprot);
                                struct.setExIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // E
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.e = new ServiceException();
                                struct.e.read(iprot);
                                struct.setEIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, call_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.ex != null) {
                    oprot.writeFieldBegin(EX_FIELD_DESC);
                    struct.ex.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class call_resultTupleSchemeFactory implements SchemeFactory {
            public call_resultTupleScheme getScheme() {
                return new call_resultTupleScheme();
            }
        }

        private static class call_resultTupleScheme extends TupleScheme<call_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, call_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetEx()) {
                    optionals.set(1);
                }
                if (struct.isSetE()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetEx()) {
                    struct.ex.write(oprot);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, call_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.ex = new ServiceDoesNotExists();
                    struct.ex.read(iprot);
                    struct.setExIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.e = new ServiceException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

    public static class getAllInfo_args implements org.apache.thrift.TBase<getAllInfo_args, getAllInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllInfo_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllInfo_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getAllInfo_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAllInfo_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getAllInfo_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<getAllInfo_args> CREATOR = new android.os.Parcelable.Creator<getAllInfo_args>() {
            @Override
            public getAllInfo_args[] newArray(int size) {
                return new getAllInfo_args[size];
            }

            @Override
            public getAllInfo_args createFromParcel(android.os.Parcel in) {
                return new getAllInfo_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllInfo_args.class, metaDataMap);
        }

        public getAllInfo_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAllInfo_args(getAllInfo_args other) {
        }

        public getAllInfo_args deepCopy() {
            return new getAllInfo_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAllInfo_args)
                return this.equals((getAllInfo_args) that);
            return false;
        }

        public boolean equals(getAllInfo_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getAllInfo_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAllInfo_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getAllInfo_argsStandardSchemeFactory implements SchemeFactory {
            public getAllInfo_argsStandardScheme getScheme() {
                return new getAllInfo_argsStandardScheme();
            }
        }

        private static class getAllInfo_argsStandardScheme extends StandardScheme<getAllInfo_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getAllInfo_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getAllInfo_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getAllInfo_argsTupleSchemeFactory implements SchemeFactory {
            public getAllInfo_argsTupleScheme getScheme() {
                return new getAllInfo_argsTupleScheme();
            }
        }

        private static class getAllInfo_argsTupleScheme extends TupleScheme<getAllInfo_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAllInfo_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAllInfo_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getAllInfo_result implements org.apache.thrift.TBase<getAllInfo_result, getAllInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllInfo_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getAllInfo_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getAllInfo_resultTupleSchemeFactory());
        }

        public Map<String, Map<String, String>> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeMap(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getAllInfo_result(android.os.Parcel in) {
            this.success = new HashMap<String, Map<String, String>>();
            in.readMap(this.success, getAllInfo_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getAllInfo_result> CREATOR = new android.os.Parcelable.Creator<getAllInfo_result>() {
            @Override
            public getAllInfo_result[] newArray(int size) {
                return new getAllInfo_result[size];
            }

            @Override
            public getAllInfo_result createFromParcel(android.os.Parcel in) {
                return new getAllInfo_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "PluginName"),
                            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllInfo_result.class, metaDataMap);
        }

        public getAllInfo_result() {
        }

        public getAllInfo_result(
                Map<String, Map<String, String>> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getAllInfo_result(getAllInfo_result other) {
            if (other.isSetSuccess()) {
                Map<String, Map<String, String>> __this__success = new HashMap<String, Map<String, String>>(other.success.size());
                for (Map.Entry<String, Map<String, String>> other_element : other.success.entrySet()) {

                    String other_element_key = other_element.getKey();
                    Map<String, String> other_element_value = other_element.getValue();

                    String __this__success_copy_key = other_element_key;

                    Map<String, String> __this__success_copy_value = new HashMap<String, String>(other_element_value);

                    __this__success.put(__this__success_copy_key, __this__success_copy_value);
                }
                this.success = __this__success;
            }
        }

        public getAllInfo_result deepCopy() {
            return new getAllInfo_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(String key, Map<String, String> val) {
            if (this.success == null) {
                this.success = new HashMap<String, Map<String, String>>();
            }
            this.success.put(key, val);
        }

        public Map<String, Map<String, String>> getSuccess() {
            return this.success;
        }

        public getAllInfo_result setSuccess(Map<String, Map<String, String>> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<String, Map<String, String>>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getAllInfo_result)
                return this.equals((getAllInfo_result) that);
            return false;
        }

        public boolean equals(getAllInfo_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getAllInfo_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getAllInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getAllInfo_resultStandardSchemeFactory implements SchemeFactory {
            public getAllInfo_resultStandardScheme getScheme() {
                return new getAllInfo_resultStandardScheme();
            }
        }

        private static class getAllInfo_resultStandardScheme extends StandardScheme<getAllInfo_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getAllInfo_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map404 = iprot.readMapBegin();
                                    struct.success = new HashMap<String, Map<String, String>>(2 * _map404.size);
                                    String _key405;
                                    Map<String, String> _val406;
                                    for (int _i407 = 0; _i407 < _map404.size; ++_i407) {
                                        _key405 = iprot.readString();
                                        {
                                            org.apache.thrift.protocol.TMap _map408 = iprot.readMapBegin();
                                            _val406 = new HashMap<String, String>(2 * _map408.size);
                                            String _key409;
                                            String _val410;
                                            for (int _i411 = 0; _i411 < _map408.size; ++_i411) {
                                                _key409 = iprot.readString();
                                                _val410 = iprot.readString();
                                                _val406.put(_key409, _val410);
                                            }
                                            iprot.readMapEnd();
                                        }
                                        struct.success.put(_key405, _val406);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getAllInfo_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
                        for (Map.Entry<String, Map<String, String>> _iter412 : struct.success.entrySet()) {
                            oprot.writeString(_iter412.getKey());
                            {
                                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter412.getValue().size()));
                                for (Map.Entry<String, String> _iter413 : _iter412.getValue().entrySet()) {
                                    oprot.writeString(_iter413.getKey());
                                    oprot.writeString(_iter413.getValue());
                                }
                                oprot.writeMapEnd();
                            }
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getAllInfo_resultTupleSchemeFactory implements SchemeFactory {
            public getAllInfo_resultTupleScheme getScheme() {
                return new getAllInfo_resultTupleScheme();
            }
        }

        private static class getAllInfo_resultTupleScheme extends TupleScheme<getAllInfo_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getAllInfo_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<String, Map<String, String>> _iter414 : struct.success.entrySet()) {
                            oprot.writeString(_iter414.getKey());
                            {
                                oprot.writeI32(_iter414.getValue().size());
                                for (Map.Entry<String, String> _iter415 : _iter414.getValue().entrySet()) {
                                    oprot.writeString(_iter415.getKey());
                                    oprot.writeString(_iter415.getValue());
                                }
                            }
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getAllInfo_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map416 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                        struct.success = new HashMap<String, Map<String, String>>(2 * _map416.size);
                        String _key417;
                        Map<String, String> _val418;
                        for (int _i419 = 0; _i419 < _map416.size; ++_i419) {
                            _key417 = iprot.readString();
                            {
                                org.apache.thrift.protocol.TMap _map420 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                                _val418 = new HashMap<String, String>(2 * _map420.size);
                                String _key421;
                                String _val422;
                                for (int _i423 = 0; _i423 < _map420.size; ++_i423) {
                                    _key421 = iprot.readString();
                                    _val422 = iprot.readString();
                                    _val418.put(_key421, _val422);
                                }
                            }
                            struct.success.put(_key417, _val418);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getInfoByPlugin_args implements org.apache.thrift.TBase<getInfoByPlugin_args, getInfoByPlugin_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInfoByPlugin_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoByPlugin_args");

        private static final org.apache.thrift.protocol.TField PLUGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("plugin", org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getInfoByPlugin_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getInfoByPlugin_argsTupleSchemeFactory());
        }

        public String plugin; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(plugin);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getInfoByPlugin_args(android.os.Parcel in) {
            this.plugin = in.readString();
        }

        public static final android.os.Parcelable.Creator<getInfoByPlugin_args> CREATOR = new android.os.Parcelable.Creator<getInfoByPlugin_args>() {
            @Override
            public getInfoByPlugin_args[] newArray(int size) {
                return new getInfoByPlugin_args[size];
            }

            @Override
            public getInfoByPlugin_args createFromParcel(android.os.Parcel in) {
                return new getInfoByPlugin_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            PLUGIN((short) 1, "plugin");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PLUGIN
                        return PLUGIN;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PLUGIN, new org.apache.thrift.meta_data.FieldMetaData("plugin", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "PluginName")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoByPlugin_args.class, metaDataMap);
        }

        public getInfoByPlugin_args() {
        }

        public getInfoByPlugin_args(
                String plugin) {
            this();
            this.plugin = plugin;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getInfoByPlugin_args(getInfoByPlugin_args other) {
            if (other.isSetPlugin()) {
                this.plugin = other.plugin;
            }
        }

        public getInfoByPlugin_args deepCopy() {
            return new getInfoByPlugin_args(this);
        }

        @Override
        public void clear() {
            this.plugin = null;
        }

        public String getPlugin() {
            return this.plugin;
        }

        public getInfoByPlugin_args setPlugin(String plugin) {
            this.plugin = plugin;
            return this;
        }

        public void unsetPlugin() {
            this.plugin = null;
        }

        /** Returns true if field plugin is set (has been assigned a value) and false otherwise */
        public boolean isSetPlugin() {
            return this.plugin != null;
        }

        public void setPluginIsSet(boolean value) {
            if (!value) {
                this.plugin = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case PLUGIN:
                    if (value == null) {
                        unsetPlugin();
                    } else {
                        setPlugin((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PLUGIN:
                    return getPlugin();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PLUGIN:
                    return isSetPlugin();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getInfoByPlugin_args)
                return this.equals((getInfoByPlugin_args) that);
            return false;
        }

        public boolean equals(getInfoByPlugin_args that) {
            if (that == null)
                return false;

            boolean this_present_plugin = true && this.isSetPlugin();
            boolean that_present_plugin = true && that.isSetPlugin();
            if (this_present_plugin || that_present_plugin) {
                if (!(this_present_plugin && that_present_plugin))
                    return false;
                if (!this.plugin.equals(that.plugin))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_plugin = true && (isSetPlugin());
            list.add(present_plugin);
            if (present_plugin)
                list.add(plugin);

            return list.hashCode();
        }

        @Override
        public int compareTo(getInfoByPlugin_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPlugin()).compareTo(other.isSetPlugin());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPlugin()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plugin, other.plugin);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getInfoByPlugin_args(");
            boolean first = true;

            sb.append("plugin:");
            if (this.plugin == null) {
                sb.append("null");
            } else {
                sb.append(this.plugin);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getInfoByPlugin_argsStandardSchemeFactory implements SchemeFactory {
            public getInfoByPlugin_argsStandardScheme getScheme() {
                return new getInfoByPlugin_argsStandardScheme();
            }
        }

        private static class getInfoByPlugin_argsStandardScheme extends StandardScheme<getInfoByPlugin_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoByPlugin_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PLUGIN
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.plugin = iprot.readString();
                                struct.setPluginIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoByPlugin_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.plugin != null) {
                    oprot.writeFieldBegin(PLUGIN_FIELD_DESC);
                    oprot.writeString(struct.plugin);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getInfoByPlugin_argsTupleSchemeFactory implements SchemeFactory {
            public getInfoByPlugin_argsTupleScheme getScheme() {
                return new getInfoByPlugin_argsTupleScheme();
            }
        }

        private static class getInfoByPlugin_argsTupleScheme extends TupleScheme<getInfoByPlugin_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getInfoByPlugin_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPlugin()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetPlugin()) {
                    oprot.writeString(struct.plugin);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getInfoByPlugin_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.plugin = iprot.readString();
                    struct.setPluginIsSet(true);
                }
            }
        }

    }

    public static class getInfoByPlugin_result implements org.apache.thrift.TBase<getInfoByPlugin_result, getInfoByPlugin_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInfoByPlugin_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoByPlugin_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getInfoByPlugin_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getInfoByPlugin_resultTupleSchemeFactory());
        }

        public Map<String, String> success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeMap(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getInfoByPlugin_result(android.os.Parcel in) {
            this.success = new HashMap<String, String>();
            in.readMap(this.success, getInfoByPlugin_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getInfoByPlugin_result> CREATOR = new android.os.Parcelable.Creator<getInfoByPlugin_result>() {
            @Override
            public getInfoByPlugin_result[] newArray(int size) {
                return new getInfoByPlugin_result[size];
            }

            @Override
            public getInfoByPlugin_result createFromParcel(android.os.Parcel in) {
                return new getInfoByPlugin_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoByPlugin_result.class, metaDataMap);
        }

        public getInfoByPlugin_result() {
        }

        public getInfoByPlugin_result(
                Map<String, String> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getInfoByPlugin_result(getInfoByPlugin_result other) {
            if (other.isSetSuccess()) {
                Map<String, String> __this__success = new HashMap<String, String>(other.success);
                this.success = __this__success;
            }
        }

        public getInfoByPlugin_result deepCopy() {
            return new getInfoByPlugin_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public void putToSuccess(String key, String val) {
            if (this.success == null) {
                this.success = new HashMap<String, String>();
            }
            this.success.put(key, val);
        }

        public Map<String, String> getSuccess() {
            return this.success;
        }

        public getInfoByPlugin_result setSuccess(Map<String, String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Map<String, String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getInfoByPlugin_result)
                return this.equals((getInfoByPlugin_result) that);
            return false;
        }

        public boolean equals(getInfoByPlugin_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getInfoByPlugin_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getInfoByPlugin_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getInfoByPlugin_resultStandardSchemeFactory implements SchemeFactory {
            public getInfoByPlugin_resultStandardScheme getScheme() {
                return new getInfoByPlugin_resultStandardScheme();
            }
        }

        private static class getInfoByPlugin_resultStandardScheme extends StandardScheme<getInfoByPlugin_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoByPlugin_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                                {
                                    org.apache.thrift.protocol.TMap _map424 = iprot.readMapBegin();
                                    struct.success = new HashMap<String, String>(2 * _map424.size);
                                    String _key425;
                                    String _val426;
                                    for (int _i427 = 0; _i427 < _map424.size; ++_i427) {
                                        _key425 = iprot.readString();
                                        _val426 = iprot.readString();
                                        struct.success.put(_key425, _val426);
                                    }
                                    iprot.readMapEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoByPlugin_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (Map.Entry<String, String> _iter428 : struct.success.entrySet()) {
                            oprot.writeString(_iter428.getKey());
                            oprot.writeString(_iter428.getValue());
                        }
                        oprot.writeMapEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getInfoByPlugin_resultTupleSchemeFactory implements SchemeFactory {
            public getInfoByPlugin_resultTupleScheme getScheme() {
                return new getInfoByPlugin_resultTupleScheme();
            }
        }

        private static class getInfoByPlugin_resultTupleScheme extends TupleScheme<getInfoByPlugin_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getInfoByPlugin_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Map.Entry<String, String> _iter429 : struct.success.entrySet()) {
                            oprot.writeString(_iter429.getKey());
                            oprot.writeString(_iter429.getValue());
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getInfoByPlugin_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TMap _map430 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new HashMap<String, String>(2 * _map430.size);
                        String _key431;
                        String _val432;
                        for (int _i433 = 0; _i433 < _map430.size; ++_i433) {
                            _key431 = iprot.readString();
                            _val432 = iprot.readString();
                            struct.success.put(_key431, _val432);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class isCaptchaWaiting_args implements org.apache.thrift.TBase<isCaptchaWaiting_args, isCaptchaWaiting_args._Fields>, java.io.Serializable, Cloneable, Comparable<isCaptchaWaiting_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isCaptchaWaiting_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new isCaptchaWaiting_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new isCaptchaWaiting_argsTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public isCaptchaWaiting_args(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<isCaptchaWaiting_args> CREATOR = new android.os.Parcelable.Creator<isCaptchaWaiting_args>() {
            @Override
            public isCaptchaWaiting_args[] newArray(int size) {
                return new isCaptchaWaiting_args[size];
            }

            @Override
            public isCaptchaWaiting_args createFromParcel(android.os.Parcel in) {
                return new isCaptchaWaiting_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isCaptchaWaiting_args.class, metaDataMap);
        }

        public isCaptchaWaiting_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public isCaptchaWaiting_args(isCaptchaWaiting_args other) {
        }

        public isCaptchaWaiting_args deepCopy() {
            return new isCaptchaWaiting_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof isCaptchaWaiting_args)
                return this.equals((isCaptchaWaiting_args) that);
            return false;
        }

        public boolean equals(isCaptchaWaiting_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(isCaptchaWaiting_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("isCaptchaWaiting_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class isCaptchaWaiting_argsStandardSchemeFactory implements SchemeFactory {
            public isCaptchaWaiting_argsStandardScheme getScheme() {
                return new isCaptchaWaiting_argsStandardScheme();
            }
        }

        private static class isCaptchaWaiting_argsStandardScheme extends StandardScheme<isCaptchaWaiting_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, isCaptchaWaiting_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, isCaptchaWaiting_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class isCaptchaWaiting_argsTupleSchemeFactory implements SchemeFactory {
            public isCaptchaWaiting_argsTupleScheme getScheme() {
                return new isCaptchaWaiting_argsTupleScheme();
            }
        }

        private static class isCaptchaWaiting_argsTupleScheme extends TupleScheme<isCaptchaWaiting_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, isCaptchaWaiting_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, isCaptchaWaiting_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class isCaptchaWaiting_result implements org.apache.thrift.TBase<isCaptchaWaiting_result, isCaptchaWaiting_result._Fields>, java.io.Serializable, Cloneable, Comparable<isCaptchaWaiting_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isCaptchaWaiting_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new isCaptchaWaiting_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new isCaptchaWaiting_resultTupleSchemeFactory());
        }

        public boolean success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(success ? 1 : 0);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public isCaptchaWaiting_result(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.success = (in.readInt() == 1);
        }

        public static final android.os.Parcelable.Creator<isCaptchaWaiting_result> CREATOR = new android.os.Parcelable.Creator<isCaptchaWaiting_result>() {
            @Override
            public isCaptchaWaiting_result[] newArray(int size) {
                return new isCaptchaWaiting_result[size];
            }

            @Override
            public isCaptchaWaiting_result createFromParcel(android.os.Parcel in) {
                return new isCaptchaWaiting_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isCaptchaWaiting_result.class, metaDataMap);
        }

        public isCaptchaWaiting_result() {
        }

        public isCaptchaWaiting_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public isCaptchaWaiting_result(isCaptchaWaiting_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public isCaptchaWaiting_result deepCopy() {
            return new isCaptchaWaiting_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public isCaptchaWaiting_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return isSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof isCaptchaWaiting_result)
                return this.equals((isCaptchaWaiting_result) that);
            return false;
        }

        public boolean equals(isCaptchaWaiting_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(isCaptchaWaiting_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("isCaptchaWaiting_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class isCaptchaWaiting_resultStandardSchemeFactory implements SchemeFactory {
            public isCaptchaWaiting_resultStandardScheme getScheme() {
                return new isCaptchaWaiting_resultStandardScheme();
            }
        }

        private static class isCaptchaWaiting_resultStandardScheme extends StandardScheme<isCaptchaWaiting_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, isCaptchaWaiting_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, isCaptchaWaiting_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class isCaptchaWaiting_resultTupleSchemeFactory implements SchemeFactory {
            public isCaptchaWaiting_resultTupleScheme getScheme() {
                return new isCaptchaWaiting_resultTupleScheme();
            }
        }

        private static class isCaptchaWaiting_resultTupleScheme extends TupleScheme<isCaptchaWaiting_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, isCaptchaWaiting_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, isCaptchaWaiting_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getCaptchaTask_args implements org.apache.thrift.TBase<getCaptchaTask_args, getCaptchaTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCaptchaTask_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCaptchaTask_args");

        private static final org.apache.thrift.protocol.TField EXCLUSIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("exclusive", org.apache.thrift.protocol.TType.BOOL, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getCaptchaTask_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getCaptchaTask_argsTupleSchemeFactory());
        }

        public boolean exclusive; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(exclusive ? 1 : 0);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getCaptchaTask_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.exclusive = (in.readInt() == 1);
        }

        public static final android.os.Parcelable.Creator<getCaptchaTask_args> CREATOR = new android.os.Parcelable.Creator<getCaptchaTask_args>() {
            @Override
            public getCaptchaTask_args[] newArray(int size) {
                return new getCaptchaTask_args[size];
            }

            @Override
            public getCaptchaTask_args createFromParcel(android.os.Parcel in) {
                return new getCaptchaTask_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            EXCLUSIVE((short) 1, "exclusive");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // EXCLUSIVE
                        return EXCLUSIVE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __EXCLUSIVE_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.EXCLUSIVE, new org.apache.thrift.meta_data.FieldMetaData("exclusive", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCaptchaTask_args.class, metaDataMap);
        }

        public getCaptchaTask_args() {
        }

        public getCaptchaTask_args(
                boolean exclusive) {
            this();
            this.exclusive = exclusive;
            setExclusiveIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCaptchaTask_args(getCaptchaTask_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.exclusive = other.exclusive;
        }

        public getCaptchaTask_args deepCopy() {
            return new getCaptchaTask_args(this);
        }

        @Override
        public void clear() {
            setExclusiveIsSet(false);
            this.exclusive = false;
        }

        public boolean isExclusive() {
            return this.exclusive;
        }

        public getCaptchaTask_args setExclusive(boolean exclusive) {
            this.exclusive = exclusive;
            setExclusiveIsSet(true);
            return this;
        }

        public void unsetExclusive() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCLUSIVE_ISSET_ID);
        }

        /** Returns true if field exclusive is set (has been assigned a value) and false otherwise */
        public boolean isSetExclusive() {
            return EncodingUtils.testBit(__isset_bitfield, __EXCLUSIVE_ISSET_ID);
        }

        public void setExclusiveIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCLUSIVE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case EXCLUSIVE:
                    if (value == null) {
                        unsetExclusive();
                    } else {
                        setExclusive((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case EXCLUSIVE:
                    return isExclusive();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case EXCLUSIVE:
                    return isSetExclusive();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCaptchaTask_args)
                return this.equals((getCaptchaTask_args) that);
            return false;
        }

        public boolean equals(getCaptchaTask_args that) {
            if (that == null)
                return false;

            boolean this_present_exclusive = true;
            boolean that_present_exclusive = true;
            if (this_present_exclusive || that_present_exclusive) {
                if (!(this_present_exclusive && that_present_exclusive))
                    return false;
                if (this.exclusive != that.exclusive)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_exclusive = true;
            list.add(present_exclusive);
            if (present_exclusive)
                list.add(exclusive);

            return list.hashCode();
        }

        @Override
        public int compareTo(getCaptchaTask_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetExclusive()).compareTo(other.isSetExclusive());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetExclusive()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exclusive, other.exclusive);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCaptchaTask_args(");
            boolean first = true;

            sb.append("exclusive:");
            sb.append(this.exclusive);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCaptchaTask_argsStandardSchemeFactory implements SchemeFactory {
            public getCaptchaTask_argsStandardScheme getScheme() {
                return new getCaptchaTask_argsStandardScheme();
            }
        }

        private static class getCaptchaTask_argsStandardScheme extends StandardScheme<getCaptchaTask_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCaptchaTask_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // EXCLUSIVE
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.exclusive = iprot.readBool();
                                struct.setExclusiveIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCaptchaTask_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(EXCLUSIVE_FIELD_DESC);
                oprot.writeBool(struct.exclusive);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCaptchaTask_argsTupleSchemeFactory implements SchemeFactory {
            public getCaptchaTask_argsTupleScheme getScheme() {
                return new getCaptchaTask_argsTupleScheme();
            }
        }

        private static class getCaptchaTask_argsTupleScheme extends TupleScheme<getCaptchaTask_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCaptchaTask_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetExclusive()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetExclusive()) {
                    oprot.writeBool(struct.exclusive);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCaptchaTask_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.exclusive = iprot.readBool();
                    struct.setExclusiveIsSet(true);
                }
            }
        }

    }

    public static class getCaptchaTask_result implements org.apache.thrift.TBase<getCaptchaTask_result, getCaptchaTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCaptchaTask_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCaptchaTask_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getCaptchaTask_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getCaptchaTask_resultTupleSchemeFactory());
        }

        public CaptchaTask success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeParcelable(success, flags);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getCaptchaTask_result(android.os.Parcel in) {
            this.success = in.readParcelable(getCaptchaTask_result.class.getClassLoader());
        }

        public static final android.os.Parcelable.Creator<getCaptchaTask_result> CREATOR = new android.os.Parcelable.Creator<getCaptchaTask_result>() {
            @Override
            public getCaptchaTask_result[] newArray(int size) {
                return new getCaptchaTask_result[size];
            }

            @Override
            public getCaptchaTask_result createFromParcel(android.os.Parcel in) {
                return new getCaptchaTask_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CaptchaTask.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCaptchaTask_result.class, metaDataMap);
        }

        public getCaptchaTask_result() {
        }

        public getCaptchaTask_result(
                CaptchaTask success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCaptchaTask_result(getCaptchaTask_result other) {
            if (other.isSetSuccess()) {
                this.success = new CaptchaTask(other.success);
            }
        }

        public getCaptchaTask_result deepCopy() {
            return new getCaptchaTask_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public CaptchaTask getSuccess() {
            return this.success;
        }

        public getCaptchaTask_result setSuccess(CaptchaTask success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((CaptchaTask) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCaptchaTask_result)
                return this.equals((getCaptchaTask_result) that);
            return false;
        }

        public boolean equals(getCaptchaTask_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getCaptchaTask_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCaptchaTask_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCaptchaTask_resultStandardSchemeFactory implements SchemeFactory {
            public getCaptchaTask_resultStandardScheme getScheme() {
                return new getCaptchaTask_resultStandardScheme();
            }
        }

        private static class getCaptchaTask_resultStandardScheme extends StandardScheme<getCaptchaTask_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCaptchaTask_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new CaptchaTask();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCaptchaTask_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCaptchaTask_resultTupleSchemeFactory implements SchemeFactory {
            public getCaptchaTask_resultTupleScheme getScheme() {
                return new getCaptchaTask_resultTupleScheme();
            }
        }

        private static class getCaptchaTask_resultTupleScheme extends TupleScheme<getCaptchaTask_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCaptchaTask_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCaptchaTask_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new CaptchaTask();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getCaptchaTaskStatus_args implements org.apache.thrift.TBase<getCaptchaTaskStatus_args, getCaptchaTaskStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCaptchaTaskStatus_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCaptchaTaskStatus_args");

        private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.I32, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getCaptchaTaskStatus_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getCaptchaTaskStatus_argsTupleSchemeFactory());
        }

        public int tid; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(tid);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getCaptchaTaskStatus_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.tid = in.readInt();
        }

        public static final android.os.Parcelable.Creator<getCaptchaTaskStatus_args> CREATOR = new android.os.Parcelable.Creator<getCaptchaTaskStatus_args>() {
            @Override
            public getCaptchaTaskStatus_args[] newArray(int size) {
                return new getCaptchaTaskStatus_args[size];
            }

            @Override
            public getCaptchaTaskStatus_args createFromParcel(android.os.Parcel in) {
                return new getCaptchaTaskStatus_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            TID((short) 1, "tid");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // TID
                        return TID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __TID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "TaskID")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCaptchaTaskStatus_args.class, metaDataMap);
        }

        public getCaptchaTaskStatus_args() {
        }

        public getCaptchaTaskStatus_args(
                int tid) {
            this();
            this.tid = tid;
            setTidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCaptchaTaskStatus_args(getCaptchaTaskStatus_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.tid = other.tid;
        }

        public getCaptchaTaskStatus_args deepCopy() {
            return new getCaptchaTaskStatus_args(this);
        }

        @Override
        public void clear() {
            setTidIsSet(false);
            this.tid = 0;
        }

        public int getTid() {
            return this.tid;
        }

        public getCaptchaTaskStatus_args setTid(int tid) {
            this.tid = tid;
            setTidIsSet(true);
            return this;
        }

        public void unsetTid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
        }

        /** Returns true if field tid is set (has been assigned a value) and false otherwise */
        public boolean isSetTid() {
            return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
        }

        public void setTidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case TID:
                    if (value == null) {
                        unsetTid();
                    } else {
                        setTid((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case TID:
                    return getTid();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case TID:
                    return isSetTid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCaptchaTaskStatus_args)
                return this.equals((getCaptchaTaskStatus_args) that);
            return false;
        }

        public boolean equals(getCaptchaTaskStatus_args that) {
            if (that == null)
                return false;

            boolean this_present_tid = true;
            boolean that_present_tid = true;
            if (this_present_tid || that_present_tid) {
                if (!(this_present_tid && that_present_tid))
                    return false;
                if (this.tid != that.tid)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_tid = true;
            list.add(present_tid);
            if (present_tid)
                list.add(tid);

            return list.hashCode();
        }

        @Override
        public int compareTo(getCaptchaTaskStatus_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCaptchaTaskStatus_args(");
            boolean first = true;

            sb.append("tid:");
            sb.append(this.tid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCaptchaTaskStatus_argsStandardSchemeFactory implements SchemeFactory {
            public getCaptchaTaskStatus_argsStandardScheme getScheme() {
                return new getCaptchaTaskStatus_argsStandardScheme();
            }
        }

        private static class getCaptchaTaskStatus_argsStandardScheme extends StandardScheme<getCaptchaTaskStatus_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCaptchaTaskStatus_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.tid = iprot.readI32();
                                struct.setTidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCaptchaTaskStatus_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(TID_FIELD_DESC);
                oprot.writeI32(struct.tid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCaptchaTaskStatus_argsTupleSchemeFactory implements SchemeFactory {
            public getCaptchaTaskStatus_argsTupleScheme getScheme() {
                return new getCaptchaTaskStatus_argsTupleScheme();
            }
        }

        private static class getCaptchaTaskStatus_argsTupleScheme extends TupleScheme<getCaptchaTaskStatus_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCaptchaTaskStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetTid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetTid()) {
                    oprot.writeI32(struct.tid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCaptchaTaskStatus_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.tid = iprot.readI32();
                    struct.setTidIsSet(true);
                }
            }
        }

    }

    public static class getCaptchaTaskStatus_result implements org.apache.thrift.TBase<getCaptchaTaskStatus_result, getCaptchaTaskStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCaptchaTaskStatus_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCaptchaTaskStatus_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new getCaptchaTaskStatus_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getCaptchaTaskStatus_resultTupleSchemeFactory());
        }

        public String success; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            out.writeString(success);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public getCaptchaTaskStatus_result(android.os.Parcel in) {
            this.success = in.readString();
        }

        public static final android.os.Parcelable.Creator<getCaptchaTaskStatus_result> CREATOR = new android.os.Parcelable.Creator<getCaptchaTaskStatus_result>() {
            @Override
            public getCaptchaTaskStatus_result[] newArray(int size) {
                return new getCaptchaTaskStatus_result[size];
            }

            @Override
            public getCaptchaTaskStatus_result createFromParcel(android.os.Parcel in) {
                return new getCaptchaTaskStatus_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCaptchaTaskStatus_result.class, metaDataMap);
        }

        public getCaptchaTaskStatus_result() {
        }

        public getCaptchaTaskStatus_result(
                String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getCaptchaTaskStatus_result(getCaptchaTaskStatus_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public getCaptchaTaskStatus_result deepCopy() {
            return new getCaptchaTaskStatus_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public getCaptchaTaskStatus_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getCaptchaTaskStatus_result)
                return this.equals((getCaptchaTaskStatus_result) that);
            return false;
        }

        public boolean equals(getCaptchaTaskStatus_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getCaptchaTaskStatus_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getCaptchaTaskStatus_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class getCaptchaTaskStatus_resultStandardSchemeFactory implements SchemeFactory {
            public getCaptchaTaskStatus_resultStandardScheme getScheme() {
                return new getCaptchaTaskStatus_resultStandardScheme();
            }
        }

        private static class getCaptchaTaskStatus_resultStandardScheme extends StandardScheme<getCaptchaTaskStatus_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getCaptchaTaskStatus_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getCaptchaTaskStatus_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getCaptchaTaskStatus_resultTupleSchemeFactory implements SchemeFactory {
            public getCaptchaTaskStatus_resultTupleScheme getScheme() {
                return new getCaptchaTaskStatus_resultTupleScheme();
            }
        }

        private static class getCaptchaTaskStatus_resultTupleScheme extends TupleScheme<getCaptchaTaskStatus_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getCaptchaTaskStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getCaptchaTaskStatus_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class setCaptchaResult_args implements org.apache.thrift.TBase<setCaptchaResult_args, setCaptchaResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<setCaptchaResult_args>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCaptchaResult_args");

        private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.I32, (short) 1);
        private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new setCaptchaResult_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new setCaptchaResult_argsTupleSchemeFactory());
        }

        public int tid; // required
        public String result; // required

        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
            //primitive bitfield of type: byte
            out.writeByte(__isset_bitfield);

            out.writeInt(tid);
            out.writeString(result);
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public setCaptchaResult_args(android.os.Parcel in) {
            //primitive bitfield of type: byte
            __isset_bitfield = in.readByte();

            this.tid = in.readInt();
            this.result = in.readString();
        }

        public static final android.os.Parcelable.Creator<setCaptchaResult_args> CREATOR = new android.os.Parcelable.Creator<setCaptchaResult_args>() {
            @Override
            public setCaptchaResult_args[] newArray(int size) {
                return new setCaptchaResult_args[size];
            }

            @Override
            public setCaptchaResult_args createFromParcel(android.os.Parcel in) {
                return new setCaptchaResult_args(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            TID((short) 1, "tid"),
            RESULT((short) 2, "result");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // TID
                        return TID;
                    case 2: // RESULT
                        return RESULT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __TID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "TaskID")));
            tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCaptchaResult_args.class, metaDataMap);
        }

        public setCaptchaResult_args() {
        }

        public setCaptchaResult_args(
                int tid,
                String result) {
            this();
            this.tid = tid;
            setTidIsSet(true);
            this.result = result;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setCaptchaResult_args(setCaptchaResult_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.tid = other.tid;
            if (other.isSetResult()) {
                this.result = other.result;
            }
        }

        public setCaptchaResult_args deepCopy() {
            return new setCaptchaResult_args(this);
        }

        @Override
        public void clear() {
            setTidIsSet(false);
            this.tid = 0;
            this.result = null;
        }

        public int getTid() {
            return this.tid;
        }

        public setCaptchaResult_args setTid(int tid) {
            this.tid = tid;
            setTidIsSet(true);
            return this;
        }

        public void unsetTid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
        }

        /** Returns true if field tid is set (has been assigned a value) and false otherwise */
        public boolean isSetTid() {
            return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
        }

        public void setTidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
        }

        public String getResult() {
            return this.result;
        }

        public setCaptchaResult_args setResult(String result) {
            this.result = result;
            return this;
        }

        public void unsetResult() {
            this.result = null;
        }

        /** Returns true if field result is set (has been assigned a value) and false otherwise */
        public boolean isSetResult() {
            return this.result != null;
        }

        public void setResultIsSet(boolean value) {
            if (!value) {
                this.result = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case TID:
                    if (value == null) {
                        unsetTid();
                    } else {
                        setTid((Integer) value);
                    }
                    break;

                case RESULT:
                    if (value == null) {
                        unsetResult();
                    } else {
                        setResult((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case TID:
                    return getTid();

                case RESULT:
                    return getResult();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case TID:
                    return isSetTid();
                case RESULT:
                    return isSetResult();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof setCaptchaResult_args)
                return this.equals((setCaptchaResult_args) that);
            return false;
        }

        public boolean equals(setCaptchaResult_args that) {
            if (that == null)
                return false;

            boolean this_present_tid = true;
            boolean that_present_tid = true;
            if (this_present_tid || that_present_tid) {
                if (!(this_present_tid && that_present_tid))
                    return false;
                if (this.tid != that.tid)
                    return false;
            }

            boolean this_present_result = true && this.isSetResult();
            boolean that_present_result = true && that.isSetResult();
            if (this_present_result || that_present_result) {
                if (!(this_present_result && that_present_result))
                    return false;
                if (!this.result.equals(that.result))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_tid = true;
            list.add(present_tid);
            if (present_tid)
                list.add(tid);

            boolean present_result = true && (isSetResult());
            list.add(present_result);
            if (present_result)
                list.add(result);

            return list.hashCode();
        }

        @Override
        public int compareTo(setCaptchaResult_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetResult()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("setCaptchaResult_args(");
            boolean first = true;

            sb.append("tid:");
            sb.append(this.tid);
            first = false;
            if (!first) sb.append(", ");
            sb.append("result:");
            if (this.result == null) {
                sb.append("null");
            } else {
                sb.append(this.result);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setCaptchaResult_argsStandardSchemeFactory implements SchemeFactory {
            public setCaptchaResult_argsStandardScheme getScheme() {
                return new setCaptchaResult_argsStandardScheme();
            }
        }

        private static class setCaptchaResult_argsStandardScheme extends StandardScheme<setCaptchaResult_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setCaptchaResult_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.tid = iprot.readI32();
                                struct.setTidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // RESULT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.result = iprot.readString();
                                struct.setResultIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setCaptchaResult_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(TID_FIELD_DESC);
                oprot.writeI32(struct.tid);
                oprot.writeFieldEnd();
                if (struct.result != null) {
                    oprot.writeFieldBegin(RESULT_FIELD_DESC);
                    oprot.writeString(struct.result);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setCaptchaResult_argsTupleSchemeFactory implements SchemeFactory {
            public setCaptchaResult_argsTupleScheme getScheme() {
                return new setCaptchaResult_argsTupleScheme();
            }
        }

        private static class setCaptchaResult_argsTupleScheme extends TupleScheme<setCaptchaResult_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setCaptchaResult_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetTid()) {
                    optionals.set(0);
                }
                if (struct.isSetResult()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetTid()) {
                    oprot.writeI32(struct.tid);
                }
                if (struct.isSetResult()) {
                    oprot.writeString(struct.result);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setCaptchaResult_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.tid = iprot.readI32();
                    struct.setTidIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.result = iprot.readString();
                    struct.setResultIsSet(true);
                }
            }
        }

    }

    public static class setCaptchaResult_result implements org.apache.thrift.TBase<setCaptchaResult_result, setCaptchaResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<setCaptchaResult_result>, android.os.Parcelable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCaptchaResult_result");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new setCaptchaResult_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new setCaptchaResult_resultTupleSchemeFactory());
        }


        @Override
        public void writeToParcel(android.os.Parcel out, int flags) {
        }

        @Override
        public int describeContents() {
            return 0;
        }

        public setCaptchaResult_result(android.os.Parcel in) {
        }

        public static final android.os.Parcelable.Creator<setCaptchaResult_result> CREATOR = new android.os.Parcelable.Creator<setCaptchaResult_result>() {
            @Override
            public setCaptchaResult_result[] newArray(int size) {
                return new setCaptchaResult_result[size];
            }

            @Override
            public setCaptchaResult_result createFromParcel(android.os.Parcel in) {
                return new setCaptchaResult_result(in);
            }
        };

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCaptchaResult_result.class, metaDataMap);
        }

        public setCaptchaResult_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public setCaptchaResult_result(setCaptchaResult_result other) {
        }

        public setCaptchaResult_result deepCopy() {
            return new setCaptchaResult_result(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof setCaptchaResult_result)
                return this.equals((setCaptchaResult_result) that);
            return false;
        }

        public boolean equals(setCaptchaResult_result that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(setCaptchaResult_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("setCaptchaResult_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class setCaptchaResult_resultStandardSchemeFactory implements SchemeFactory {
            public setCaptchaResult_resultStandardScheme getScheme() {
                return new setCaptchaResult_resultStandardScheme();
            }
        }

        private static class setCaptchaResult_resultStandardScheme extends StandardScheme<setCaptchaResult_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, setCaptchaResult_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, setCaptchaResult_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class setCaptchaResult_resultTupleSchemeFactory implements SchemeFactory {
            public setCaptchaResult_resultTupleScheme getScheme() {
                return new setCaptchaResult_resultTupleScheme();
            }
        }

        private static class setCaptchaResult_resultTupleScheme extends TupleScheme<setCaptchaResult_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, setCaptchaResult_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, setCaptchaResult_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }
    }
}
