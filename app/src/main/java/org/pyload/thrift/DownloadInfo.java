/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package org.pyload.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class DownloadInfo implements org.apache.thrift.TBase<DownloadInfo, DownloadInfo._Fields>, java.io.Serializable, Cloneable, Comparable<DownloadInfo>, android.os.Parcelable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DownloadInfo");

    private static final org.apache.thrift.protocol.TField FID_FIELD_DESC = new org.apache.thrift.protocol.TField("fid", org.apache.thrift.protocol.TType.I32, (short) 1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("speed", org.apache.thrift.protocol.TType.I64, (short) 3);
    private static final org.apache.thrift.protocol.TField ETA_FIELD_DESC = new org.apache.thrift.protocol.TField("eta", org.apache.thrift.protocol.TType.I32, (short) 4);
    private static final org.apache.thrift.protocol.TField FORMAT_ETA_FIELD_DESC = new org.apache.thrift.protocol.TField("format_eta", org.apache.thrift.protocol.TType.STRING, (short) 5);
    private static final org.apache.thrift.protocol.TField BLEFT_FIELD_DESC = new org.apache.thrift.protocol.TField("bleft", org.apache.thrift.protocol.TType.I64, (short) 6);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short) 7);
    private static final org.apache.thrift.protocol.TField FORMAT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("format_size", org.apache.thrift.protocol.TType.STRING, (short) 8);
    private static final org.apache.thrift.protocol.TField PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("percent", org.apache.thrift.protocol.TType.BYTE, (short) 9);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short) 10);
    private static final org.apache.thrift.protocol.TField STATUSMSG_FIELD_DESC = new org.apache.thrift.protocol.TField("statusmsg", org.apache.thrift.protocol.TType.STRING, (short) 11);
    private static final org.apache.thrift.protocol.TField FORMAT_WAIT_FIELD_DESC = new org.apache.thrift.protocol.TField("format_wait", org.apache.thrift.protocol.TType.STRING, (short) 12);
    private static final org.apache.thrift.protocol.TField WAIT_UNTIL_FIELD_DESC = new org.apache.thrift.protocol.TField("wait_until", org.apache.thrift.protocol.TType.I64, (short) 13);
    private static final org.apache.thrift.protocol.TField PACKAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("packageID", org.apache.thrift.protocol.TType.I32, (short) 14);
    private static final org.apache.thrift.protocol.TField PACKAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("packageName", org.apache.thrift.protocol.TType.STRING, (short) 15);
    private static final org.apache.thrift.protocol.TField PLUGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("plugin", org.apache.thrift.protocol.TType.STRING, (short) 16);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new DownloadInfoStandardSchemeFactory());
        schemes.put(TupleScheme.class, new DownloadInfoTupleSchemeFactory());
    }

    public int fid; // required
    public String name; // required
    public long speed; // required
    public int eta; // required
    public String format_eta; // required
    public long bleft; // required
    public long size; // required
    public String format_size; // required
    public byte percent; // required
    /**
     *
     * @see DownloadStatus
     */
    public DownloadStatus status; // required
    public String statusmsg; // required
    public String format_wait; // required
    public long wait_until; // required
    public int packageID; // required
    public String packageName; // required
    public String plugin; // required

    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
        //primitive bitfield of type: byte
        out.writeByte(__isset_bitfield);

        out.writeInt(fid);
        out.writeString(name);
        out.writeLong(speed);
        out.writeInt(eta);
        out.writeString(format_eta);
        out.writeLong(bleft);
        out.writeLong(size);
        out.writeString(format_size);
        out.writeByte(percent);
        out.writeInt(status.getValue());
        out.writeString(statusmsg);
        out.writeString(format_wait);
        out.writeLong(wait_until);
        out.writeInt(packageID);
        out.writeString(packageName);
        out.writeString(plugin);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    public DownloadInfo(android.os.Parcel in) {
        //primitive bitfield of type: byte
        __isset_bitfield = in.readByte();

        this.fid = in.readInt();
        this.name = in.readString();
        this.speed = in.readLong();
        this.eta = in.readInt();
        this.format_eta = in.readString();
        this.bleft = in.readLong();
        this.size = in.readLong();
        this.format_size = in.readString();
        this.percent = in.readByte();
        this.status = DownloadStatus.findByValue(in.readInt());
        this.statusmsg = in.readString();
        this.format_wait = in.readString();
        this.wait_until = in.readLong();
        this.packageID = in.readInt();
        this.packageName = in.readString();
        this.plugin = in.readString();
    }

    public static final android.os.Parcelable.Creator<DownloadInfo> CREATOR = new android.os.Parcelable.Creator<DownloadInfo>() {
        @Override
        public DownloadInfo[] newArray(int size) {
            return new DownloadInfo[size];
        }

        @Override
        public DownloadInfo createFromParcel(android.os.Parcel in) {
            return new DownloadInfo(in);
        }
    };

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        FID((short) 1, "fid"),
        NAME((short) 2, "name"),
        SPEED((short) 3, "speed"),
        ETA((short) 4, "eta"),
        FORMAT_ETA((short) 5, "format_eta"),
        BLEFT((short) 6, "bleft"),
        SIZE((short) 7, "size"),
        FORMAT_SIZE((short) 8, "format_size"),
        PERCENT((short) 9, "percent"),
        /**
         *
         * @see DownloadStatus
         */
        STATUS((short) 10, "status"),
        STATUSMSG((short) 11, "statusmsg"),
        FORMAT_WAIT((short) 12, "format_wait"),
        WAIT_UNTIL((short) 13, "wait_until"),
        PACKAGE_ID((short) 14, "packageID"),
        PACKAGE_NAME((short) 15, "packageName"),
        PLUGIN((short) 16, "plugin");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // FID
                    return FID;
                case 2: // NAME
                    return NAME;
                case 3: // SPEED
                    return SPEED;
                case 4: // ETA
                    return ETA;
                case 5: // FORMAT_ETA
                    return FORMAT_ETA;
                case 6: // BLEFT
                    return BLEFT;
                case 7: // SIZE
                    return SIZE;
                case 8: // FORMAT_SIZE
                    return FORMAT_SIZE;
                case 9: // PERCENT
                    return PERCENT;
                case 10: // STATUS
                    return STATUS;
                case 11: // STATUSMSG
                    return STATUSMSG;
                case 12: // FORMAT_WAIT
                    return FORMAT_WAIT;
                case 13: // WAIT_UNTIL
                    return WAIT_UNTIL;
                case 14: // PACKAGE_ID
                    return PACKAGE_ID;
                case 15: // PACKAGE_NAME
                    return PACKAGE_NAME;
                case 16: // PLUGIN
                    return PLUGIN;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __FID_ISSET_ID = 0;
    private static final int __SPEED_ISSET_ID = 1;
    private static final int __ETA_ISSET_ID = 2;
    private static final int __BLEFT_ISSET_ID = 3;
    private static final int __SIZE_ISSET_ID = 4;
    private static final int __PERCENT_ISSET_ID = 5;
    private static final int __WAIT_UNTIL_ISSET_ID = 6;
    private static final int __PACKAGEID_ISSET_ID = 7;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.FID, new org.apache.thrift.meta_data.FieldMetaData("fid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "FileID")));
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SPEED, new org.apache.thrift.meta_data.FieldMetaData("speed", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.ETA, new org.apache.thrift.meta_data.FieldMetaData("eta", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.FORMAT_ETA, new org.apache.thrift.meta_data.FieldMetaData("format_eta", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.BLEFT, new org.apache.thrift.meta_data.FieldMetaData("bleft", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.FORMAT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("format_size", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PERCENT, new org.apache.thrift.meta_data.FieldMetaData("percent", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE, "Progress")));
        tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DownloadStatus.class)));
        tmpMap.put(_Fields.STATUSMSG, new org.apache.thrift.meta_data.FieldMetaData("statusmsg", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.FORMAT_WAIT, new org.apache.thrift.meta_data.FieldMetaData("format_wait", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.WAIT_UNTIL, new org.apache.thrift.meta_data.FieldMetaData("wait_until", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.PACKAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("packageID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32, "PackageID")));
        tmpMap.put(_Fields.PACKAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("packageName", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PLUGIN, new org.apache.thrift.meta_data.FieldMetaData("plugin", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "PluginName")));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DownloadInfo.class, metaDataMap);
    }

    public DownloadInfo() {
    }

    public DownloadInfo(
            int fid,
            String name,
            long speed,
            int eta,
            String format_eta,
            long bleft,
            long size,
            String format_size,
            byte percent,
            DownloadStatus status,
            String statusmsg,
            String format_wait,
            long wait_until,
            int packageID,
            String packageName,
            String plugin) {
        this();
        this.fid = fid;
        setFidIsSet(true);
        this.name = name;
        this.speed = speed;
        setSpeedIsSet(true);
        this.eta = eta;
        setEtaIsSet(true);
        this.format_eta = format_eta;
        this.bleft = bleft;
        setBleftIsSet(true);
        this.size = size;
        setSizeIsSet(true);
        this.format_size = format_size;
        this.percent = percent;
        setPercentIsSet(true);
        this.status = status;
        this.statusmsg = statusmsg;
        this.format_wait = format_wait;
        this.wait_until = wait_until;
        setWait_untilIsSet(true);
        this.packageID = packageID;
        setPackageIDIsSet(true);
        this.packageName = packageName;
        this.plugin = plugin;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DownloadInfo(DownloadInfo other) {
        __isset_bitfield = other.__isset_bitfield;
        this.fid = other.fid;
        if (other.isSetName()) {
            this.name = other.name;
        }
        this.speed = other.speed;
        this.eta = other.eta;
        if (other.isSetFormat_eta()) {
            this.format_eta = other.format_eta;
        }
        this.bleft = other.bleft;
        this.size = other.size;
        if (other.isSetFormat_size()) {
            this.format_size = other.format_size;
        }
        this.percent = other.percent;
        if (other.isSetStatus()) {
            this.status = other.status;
        }
        if (other.isSetStatusmsg()) {
            this.statusmsg = other.statusmsg;
        }
        if (other.isSetFormat_wait()) {
            this.format_wait = other.format_wait;
        }
        this.wait_until = other.wait_until;
        this.packageID = other.packageID;
        if (other.isSetPackageName()) {
            this.packageName = other.packageName;
        }
        if (other.isSetPlugin()) {
            this.plugin = other.plugin;
        }
    }

    public DownloadInfo deepCopy() {
        return new DownloadInfo(this);
    }

    @Override
    public void clear() {
        setFidIsSet(false);
        this.fid = 0;
        this.name = null;
        setSpeedIsSet(false);
        this.speed = 0;
        setEtaIsSet(false);
        this.eta = 0;
        this.format_eta = null;
        setBleftIsSet(false);
        this.bleft = 0;
        setSizeIsSet(false);
        this.size = 0;
        this.format_size = null;
        setPercentIsSet(false);
        this.percent = 0;
        this.status = null;
        this.statusmsg = null;
        this.format_wait = null;
        setWait_untilIsSet(false);
        this.wait_until = 0;
        setPackageIDIsSet(false);
        this.packageID = 0;
        this.packageName = null;
        this.plugin = null;
    }

    public int getFid() {
        return this.fid;
    }

    public DownloadInfo setFid(int fid) {
        this.fid = fid;
        setFidIsSet(true);
        return this;
    }

    public void unsetFid() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FID_ISSET_ID);
    }

    /** Returns true if field fid is set (has been assigned a value) and false otherwise */
    public boolean isSetFid() {
        return EncodingUtils.testBit(__isset_bitfield, __FID_ISSET_ID);
    }

    public void setFidIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FID_ISSET_ID, value);
    }

    public String getName() {
        return this.name;
    }

    public DownloadInfo setName(String name) {
        this.name = name;
        return this;
    }

    public void unsetName() {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
        return this.name != null;
    }

    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    public long getSpeed() {
        return this.speed;
    }

    public DownloadInfo setSpeed(long speed) {
        this.speed = speed;
        setSpeedIsSet(true);
        return this;
    }

    public void unsetSpeed() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPEED_ISSET_ID);
    }

    /** Returns true if field speed is set (has been assigned a value) and false otherwise */
    public boolean isSetSpeed() {
        return EncodingUtils.testBit(__isset_bitfield, __SPEED_ISSET_ID);
    }

    public void setSpeedIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPEED_ISSET_ID, value);
    }

    public int getEta() {
        return this.eta;
    }

    public DownloadInfo setEta(int eta) {
        this.eta = eta;
        setEtaIsSet(true);
        return this;
    }

    public void unsetEta() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ETA_ISSET_ID);
    }

    /** Returns true if field eta is set (has been assigned a value) and false otherwise */
    public boolean isSetEta() {
        return EncodingUtils.testBit(__isset_bitfield, __ETA_ISSET_ID);
    }

    public void setEtaIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ETA_ISSET_ID, value);
    }

    public String getFormat_eta() {
        return this.format_eta;
    }

    public DownloadInfo setFormat_eta(String format_eta) {
        this.format_eta = format_eta;
        return this;
    }

    public void unsetFormat_eta() {
        this.format_eta = null;
    }

    /** Returns true if field format_eta is set (has been assigned a value) and false otherwise */
    public boolean isSetFormat_eta() {
        return this.format_eta != null;
    }

    public void setFormat_etaIsSet(boolean value) {
        if (!value) {
            this.format_eta = null;
        }
    }

    public long getBleft() {
        return this.bleft;
    }

    public DownloadInfo setBleft(long bleft) {
        this.bleft = bleft;
        setBleftIsSet(true);
        return this;
    }

    public void unsetBleft() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLEFT_ISSET_ID);
    }

    /** Returns true if field bleft is set (has been assigned a value) and false otherwise */
    public boolean isSetBleft() {
        return EncodingUtils.testBit(__isset_bitfield, __BLEFT_ISSET_ID);
    }

    public void setBleftIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLEFT_ISSET_ID, value);
    }

    public long getSize() {
        return this.size;
    }

    public DownloadInfo setSize(long size) {
        this.size = size;
        setSizeIsSet(true);
        return this;
    }

    public void unsetSize() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
        return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public String getFormat_size() {
        return this.format_size;
    }

    public DownloadInfo setFormat_size(String format_size) {
        this.format_size = format_size;
        return this;
    }

    public void unsetFormat_size() {
        this.format_size = null;
    }

    /** Returns true if field format_size is set (has been assigned a value) and false otherwise */
    public boolean isSetFormat_size() {
        return this.format_size != null;
    }

    public void setFormat_sizeIsSet(boolean value) {
        if (!value) {
            this.format_size = null;
        }
    }

    public byte getPercent() {
        return this.percent;
    }

    public DownloadInfo setPercent(byte percent) {
        this.percent = percent;
        setPercentIsSet(true);
        return this;
    }

    public void unsetPercent() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERCENT_ISSET_ID);
    }

    /** Returns true if field percent is set (has been assigned a value) and false otherwise */
    public boolean isSetPercent() {
        return EncodingUtils.testBit(__isset_bitfield, __PERCENT_ISSET_ID);
    }

    public void setPercentIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERCENT_ISSET_ID, value);
    }

    /**
     *
     * @see DownloadStatus
     */
    public DownloadStatus getStatus() {
        return this.status;
    }

    /**
     *
     * @see DownloadStatus
     */
    public DownloadInfo setStatus(DownloadStatus status) {
        this.status = status;
        return this;
    }

    public void unsetStatus() {
        this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
        return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
        if (!value) {
            this.status = null;
        }
    }

    public String getStatusmsg() {
        return this.statusmsg;
    }

    public DownloadInfo setStatusmsg(String statusmsg) {
        this.statusmsg = statusmsg;
        return this;
    }

    public void unsetStatusmsg() {
        this.statusmsg = null;
    }

    /** Returns true if field statusmsg is set (has been assigned a value) and false otherwise */
    public boolean isSetStatusmsg() {
        return this.statusmsg != null;
    }

    public void setStatusmsgIsSet(boolean value) {
        if (!value) {
            this.statusmsg = null;
        }
    }

    public String getFormat_wait() {
        return this.format_wait;
    }

    public DownloadInfo setFormat_wait(String format_wait) {
        this.format_wait = format_wait;
        return this;
    }

    public void unsetFormat_wait() {
        this.format_wait = null;
    }

    /** Returns true if field format_wait is set (has been assigned a value) and false otherwise */
    public boolean isSetFormat_wait() {
        return this.format_wait != null;
    }

    public void setFormat_waitIsSet(boolean value) {
        if (!value) {
            this.format_wait = null;
        }
    }

    public long getWait_until() {
        return this.wait_until;
    }

    public DownloadInfo setWait_until(long wait_until) {
        this.wait_until = wait_until;
        setWait_untilIsSet(true);
        return this;
    }

    public void unsetWait_until() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAIT_UNTIL_ISSET_ID);
    }

    /** Returns true if field wait_until is set (has been assigned a value) and false otherwise */
    public boolean isSetWait_until() {
        return EncodingUtils.testBit(__isset_bitfield, __WAIT_UNTIL_ISSET_ID);
    }

    public void setWait_untilIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAIT_UNTIL_ISSET_ID, value);
    }

    public int getPackageID() {
        return this.packageID;
    }

    public DownloadInfo setPackageID(int packageID) {
        this.packageID = packageID;
        setPackageIDIsSet(true);
        return this;
    }

    public void unsetPackageID() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PACKAGEID_ISSET_ID);
    }

    /** Returns true if field packageID is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageID() {
        return EncodingUtils.testBit(__isset_bitfield, __PACKAGEID_ISSET_ID);
    }

    public void setPackageIDIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PACKAGEID_ISSET_ID, value);
    }

    public String getPackageName() {
        return this.packageName;
    }

    public DownloadInfo setPackageName(String packageName) {
        this.packageName = packageName;
        return this;
    }

    public void unsetPackageName() {
        this.packageName = null;
    }

    /** Returns true if field packageName is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageName() {
        return this.packageName != null;
    }

    public void setPackageNameIsSet(boolean value) {
        if (!value) {
            this.packageName = null;
        }
    }

    public String getPlugin() {
        return this.plugin;
    }

    public DownloadInfo setPlugin(String plugin) {
        this.plugin = plugin;
        return this;
    }

    public void unsetPlugin() {
        this.plugin = null;
    }

    /** Returns true if field plugin is set (has been assigned a value) and false otherwise */
    public boolean isSetPlugin() {
        return this.plugin != null;
    }

    public void setPluginIsSet(boolean value) {
        if (!value) {
            this.plugin = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case FID:
                if (value == null) {
                    unsetFid();
                } else {
                    setFid((Integer) value);
                }
                break;

            case NAME:
                if (value == null) {
                    unsetName();
                } else {
                    setName((String) value);
                }
                break;

            case SPEED:
                if (value == null) {
                    unsetSpeed();
                } else {
                    setSpeed((Long) value);
                }
                break;

            case ETA:
                if (value == null) {
                    unsetEta();
                } else {
                    setEta((Integer) value);
                }
                break;

            case FORMAT_ETA:
                if (value == null) {
                    unsetFormat_eta();
                } else {
                    setFormat_eta((String) value);
                }
                break;

            case BLEFT:
                if (value == null) {
                    unsetBleft();
                } else {
                    setBleft((Long) value);
                }
                break;

            case SIZE:
                if (value == null) {
                    unsetSize();
                } else {
                    setSize((Long) value);
                }
                break;

            case FORMAT_SIZE:
                if (value == null) {
                    unsetFormat_size();
                } else {
                    setFormat_size((String) value);
                }
                break;

            case PERCENT:
                if (value == null) {
                    unsetPercent();
                } else {
                    setPercent((Byte) value);
                }
                break;

            case STATUS:
                if (value == null) {
                    unsetStatus();
                } else {
                    setStatus((DownloadStatus) value);
                }
                break;

            case STATUSMSG:
                if (value == null) {
                    unsetStatusmsg();
                } else {
                    setStatusmsg((String) value);
                }
                break;

            case FORMAT_WAIT:
                if (value == null) {
                    unsetFormat_wait();
                } else {
                    setFormat_wait((String) value);
                }
                break;

            case WAIT_UNTIL:
                if (value == null) {
                    unsetWait_until();
                } else {
                    setWait_until((Long) value);
                }
                break;

            case PACKAGE_ID:
                if (value == null) {
                    unsetPackageID();
                } else {
                    setPackageID((Integer) value);
                }
                break;

            case PACKAGE_NAME:
                if (value == null) {
                    unsetPackageName();
                } else {
                    setPackageName((String) value);
                }
                break;

            case PLUGIN:
                if (value == null) {
                    unsetPlugin();
                } else {
                    setPlugin((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case FID:
                return getFid();

            case NAME:
                return getName();

            case SPEED:
                return getSpeed();

            case ETA:
                return getEta();

            case FORMAT_ETA:
                return getFormat_eta();

            case BLEFT:
                return getBleft();

            case SIZE:
                return getSize();

            case FORMAT_SIZE:
                return getFormat_size();

            case PERCENT:
                return getPercent();

            case STATUS:
                return getStatus();

            case STATUSMSG:
                return getStatusmsg();

            case FORMAT_WAIT:
                return getFormat_wait();

            case WAIT_UNTIL:
                return getWait_until();

            case PACKAGE_ID:
                return getPackageID();

            case PACKAGE_NAME:
                return getPackageName();

            case PLUGIN:
                return getPlugin();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case FID:
                return isSetFid();
            case NAME:
                return isSetName();
            case SPEED:
                return isSetSpeed();
            case ETA:
                return isSetEta();
            case FORMAT_ETA:
                return isSetFormat_eta();
            case BLEFT:
                return isSetBleft();
            case SIZE:
                return isSetSize();
            case FORMAT_SIZE:
                return isSetFormat_size();
            case PERCENT:
                return isSetPercent();
            case STATUS:
                return isSetStatus();
            case STATUSMSG:
                return isSetStatusmsg();
            case FORMAT_WAIT:
                return isSetFormat_wait();
            case WAIT_UNTIL:
                return isSetWait_until();
            case PACKAGE_ID:
                return isSetPackageID();
            case PACKAGE_NAME:
                return isSetPackageName();
            case PLUGIN:
                return isSetPlugin();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof DownloadInfo)
            return this.equals((DownloadInfo) that);
        return false;
    }

    public boolean equals(DownloadInfo that) {
        if (that == null)
            return false;

        boolean this_present_fid = true;
        boolean that_present_fid = true;
        if (this_present_fid || that_present_fid) {
            if (!(this_present_fid && that_present_fid))
                return false;
            if (this.fid != that.fid)
                return false;
        }

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }

        boolean this_present_speed = true;
        boolean that_present_speed = true;
        if (this_present_speed || that_present_speed) {
            if (!(this_present_speed && that_present_speed))
                return false;
            if (this.speed != that.speed)
                return false;
        }

        boolean this_present_eta = true;
        boolean that_present_eta = true;
        if (this_present_eta || that_present_eta) {
            if (!(this_present_eta && that_present_eta))
                return false;
            if (this.eta != that.eta)
                return false;
        }

        boolean this_present_format_eta = true && this.isSetFormat_eta();
        boolean that_present_format_eta = true && that.isSetFormat_eta();
        if (this_present_format_eta || that_present_format_eta) {
            if (!(this_present_format_eta && that_present_format_eta))
                return false;
            if (!this.format_eta.equals(that.format_eta))
                return false;
        }

        boolean this_present_bleft = true;
        boolean that_present_bleft = true;
        if (this_present_bleft || that_present_bleft) {
            if (!(this_present_bleft && that_present_bleft))
                return false;
            if (this.bleft != that.bleft)
                return false;
        }

        boolean this_present_size = true;
        boolean that_present_size = true;
        if (this_present_size || that_present_size) {
            if (!(this_present_size && that_present_size))
                return false;
            if (this.size != that.size)
                return false;
        }

        boolean this_present_format_size = true && this.isSetFormat_size();
        boolean that_present_format_size = true && that.isSetFormat_size();
        if (this_present_format_size || that_present_format_size) {
            if (!(this_present_format_size && that_present_format_size))
                return false;
            if (!this.format_size.equals(that.format_size))
                return false;
        }

        boolean this_present_percent = true;
        boolean that_present_percent = true;
        if (this_present_percent || that_present_percent) {
            if (!(this_present_percent && that_present_percent))
                return false;
            if (this.percent != that.percent)
                return false;
        }

        boolean this_present_status = true && this.isSetStatus();
        boolean that_present_status = true && that.isSetStatus();
        if (this_present_status || that_present_status) {
            if (!(this_present_status && that_present_status))
                return false;
            if (!this.status.equals(that.status))
                return false;
        }

        boolean this_present_statusmsg = true && this.isSetStatusmsg();
        boolean that_present_statusmsg = true && that.isSetStatusmsg();
        if (this_present_statusmsg || that_present_statusmsg) {
            if (!(this_present_statusmsg && that_present_statusmsg))
                return false;
            if (!this.statusmsg.equals(that.statusmsg))
                return false;
        }

        boolean this_present_format_wait = true && this.isSetFormat_wait();
        boolean that_present_format_wait = true && that.isSetFormat_wait();
        if (this_present_format_wait || that_present_format_wait) {
            if (!(this_present_format_wait && that_present_format_wait))
                return false;
            if (!this.format_wait.equals(that.format_wait))
                return false;
        }

        boolean this_present_wait_until = true;
        boolean that_present_wait_until = true;
        if (this_present_wait_until || that_present_wait_until) {
            if (!(this_present_wait_until && that_present_wait_until))
                return false;
            if (this.wait_until != that.wait_until)
                return false;
        }

        boolean this_present_packageID = true;
        boolean that_present_packageID = true;
        if (this_present_packageID || that_present_packageID) {
            if (!(this_present_packageID && that_present_packageID))
                return false;
            if (this.packageID != that.packageID)
                return false;
        }

        boolean this_present_packageName = true && this.isSetPackageName();
        boolean that_present_packageName = true && that.isSetPackageName();
        if (this_present_packageName || that_present_packageName) {
            if (!(this_present_packageName && that_present_packageName))
                return false;
            if (!this.packageName.equals(that.packageName))
                return false;
        }

        boolean this_present_plugin = true && this.isSetPlugin();
        boolean that_present_plugin = true && that.isSetPlugin();
        if (this_present_plugin || that_present_plugin) {
            if (!(this_present_plugin && that_present_plugin))
                return false;
            if (!this.plugin.equals(that.plugin))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_fid = true;
        list.add(present_fid);
        if (present_fid)
            list.add(fid);

        boolean present_name = true && (isSetName());
        list.add(present_name);
        if (present_name)
            list.add(name);

        boolean present_speed = true;
        list.add(present_speed);
        if (present_speed)
            list.add(speed);

        boolean present_eta = true;
        list.add(present_eta);
        if (present_eta)
            list.add(eta);

        boolean present_format_eta = true && (isSetFormat_eta());
        list.add(present_format_eta);
        if (present_format_eta)
            list.add(format_eta);

        boolean present_bleft = true;
        list.add(present_bleft);
        if (present_bleft)
            list.add(bleft);

        boolean present_size = true;
        list.add(present_size);
        if (present_size)
            list.add(size);

        boolean present_format_size = true && (isSetFormat_size());
        list.add(present_format_size);
        if (present_format_size)
            list.add(format_size);

        boolean present_percent = true;
        list.add(present_percent);
        if (present_percent)
            list.add(percent);

        boolean present_status = true && (isSetStatus());
        list.add(present_status);
        if (present_status)
            list.add(status.getValue());

        boolean present_statusmsg = true && (isSetStatusmsg());
        list.add(present_statusmsg);
        if (present_statusmsg)
            list.add(statusmsg);

        boolean present_format_wait = true && (isSetFormat_wait());
        list.add(present_format_wait);
        if (present_format_wait)
            list.add(format_wait);

        boolean present_wait_until = true;
        list.add(present_wait_until);
        if (present_wait_until)
            list.add(wait_until);

        boolean present_packageID = true;
        list.add(present_packageID);
        if (present_packageID)
            list.add(packageID);

        boolean present_packageName = true && (isSetPackageName());
        list.add(present_packageName);
        if (present_packageName)
            list.add(packageName);

        boolean present_plugin = true && (isSetPlugin());
        list.add(present_plugin);
        if (present_plugin)
            list.add(plugin);

        return list.hashCode();
    }

    @Override
    public int compareTo(DownloadInfo other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetFid()).compareTo(other.isSetFid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFid()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fid, other.fid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSpeed()).compareTo(other.isSetSpeed());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSpeed()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.speed, other.speed);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetEta()).compareTo(other.isSetEta());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEta()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eta, other.eta);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFormat_eta()).compareTo(other.isSetFormat_eta());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFormat_eta()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format_eta, other.format_eta);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetBleft()).compareTo(other.isSetBleft());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBleft()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bleft, other.bleft);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFormat_size()).compareTo(other.isSetFormat_size());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFormat_size()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format_size, other.format_size);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPercent()).compareTo(other.isSetPercent());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPercent()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.percent, other.percent);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStatus()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetStatusmsg()).compareTo(other.isSetStatusmsg());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetStatusmsg()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusmsg, other.statusmsg);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFormat_wait()).compareTo(other.isSetFormat_wait());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFormat_wait()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format_wait, other.format_wait);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetWait_until()).compareTo(other.isSetWait_until());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetWait_until()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wait_until, other.wait_until);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPackageID()).compareTo(other.isSetPackageID());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPackageID()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageID, other.packageID);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPackageName()).compareTo(other.isSetPackageName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPackageName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageName, other.packageName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPlugin()).compareTo(other.isSetPlugin());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetPlugin()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plugin, other.plugin);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DownloadInfo(");
        boolean first = true;

        sb.append("fid:");
        sb.append(this.fid);
        first = false;
        if (!first) sb.append(", ");
        sb.append("name:");
        if (this.name == null) {
            sb.append("null");
        } else {
            sb.append(this.name);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("speed:");
        sb.append(this.speed);
        first = false;
        if (!first) sb.append(", ");
        sb.append("eta:");
        sb.append(this.eta);
        first = false;
        if (!first) sb.append(", ");
        sb.append("format_eta:");
        if (this.format_eta == null) {
            sb.append("null");
        } else {
            sb.append(this.format_eta);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("bleft:");
        sb.append(this.bleft);
        first = false;
        if (!first) sb.append(", ");
        sb.append("size:");
        sb.append(this.size);
        first = false;
        if (!first) sb.append(", ");
        sb.append("format_size:");
        if (this.format_size == null) {
            sb.append("null");
        } else {
            sb.append(this.format_size);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("percent:");
        sb.append(this.percent);
        first = false;
        if (!first) sb.append(", ");
        sb.append("status:");
        if (this.status == null) {
            sb.append("null");
        } else {
            sb.append(this.status);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("statusmsg:");
        if (this.statusmsg == null) {
            sb.append("null");
        } else {
            sb.append(this.statusmsg);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("format_wait:");
        if (this.format_wait == null) {
            sb.append("null");
        } else {
            sb.append(this.format_wait);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("wait_until:");
        sb.append(this.wait_until);
        first = false;
        if (!first) sb.append(", ");
        sb.append("packageID:");
        sb.append(this.packageID);
        first = false;
        if (!first) sb.append(", ");
        sb.append("packageName:");
        if (this.packageName == null) {
            sb.append("null");
        } else {
            sb.append(this.packageName);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("plugin:");
        if (this.plugin == null) {
            sb.append("null");
        } else {
            sb.append(this.plugin);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class DownloadInfoStandardSchemeFactory implements SchemeFactory {
        public DownloadInfoStandardScheme getScheme() {
            return new DownloadInfoStandardScheme();
        }
    }

    private static class DownloadInfoStandardScheme extends StandardScheme<DownloadInfo> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, DownloadInfo struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // FID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.fid = iprot.readI32();
                            struct.setFidIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // SPEED
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.speed = iprot.readI64();
                            struct.setSpeedIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // ETA
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.eta = iprot.readI32();
                            struct.setEtaIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // FORMAT_ETA
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.format_eta = iprot.readString();
                            struct.setFormat_etaIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // BLEFT
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.bleft = iprot.readI64();
                            struct.setBleftIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.size = iprot.readI64();
                            struct.setSizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // FORMAT_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.format_size = iprot.readString();
                            struct.setFormat_sizeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // PERCENT
                        if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                            struct.percent = iprot.readByte();
                            struct.setPercentIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // STATUS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.status = org.pyload.thrift.DownloadStatus.findByValue(iprot.readI32());
                            struct.setStatusIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 11: // STATUSMSG
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.statusmsg = iprot.readString();
                            struct.setStatusmsgIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 12: // FORMAT_WAIT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.format_wait = iprot.readString();
                            struct.setFormat_waitIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 13: // WAIT_UNTIL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.wait_until = iprot.readI64();
                            struct.setWait_untilIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 14: // PACKAGE_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.packageID = iprot.readI32();
                            struct.setPackageIDIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 15: // PACKAGE_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.packageName = iprot.readString();
                            struct.setPackageNameIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 16: // PLUGIN
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.plugin = iprot.readString();
                            struct.setPluginIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, DownloadInfo struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(FID_FIELD_DESC);
            oprot.writeI32(struct.fid);
            oprot.writeFieldEnd();
            if (struct.name != null) {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(SPEED_FIELD_DESC);
            oprot.writeI64(struct.speed);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(ETA_FIELD_DESC);
            oprot.writeI32(struct.eta);
            oprot.writeFieldEnd();
            if (struct.format_eta != null) {
                oprot.writeFieldBegin(FORMAT_ETA_FIELD_DESC);
                oprot.writeString(struct.format_eta);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(BLEFT_FIELD_DESC);
            oprot.writeI64(struct.bleft);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(SIZE_FIELD_DESC);
            oprot.writeI64(struct.size);
            oprot.writeFieldEnd();
            if (struct.format_size != null) {
                oprot.writeFieldBegin(FORMAT_SIZE_FIELD_DESC);
                oprot.writeString(struct.format_size);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(PERCENT_FIELD_DESC);
            oprot.writeByte(struct.percent);
            oprot.writeFieldEnd();
            if (struct.status != null) {
                oprot.writeFieldBegin(STATUS_FIELD_DESC);
                oprot.writeI32(struct.status.getValue());
                oprot.writeFieldEnd();
            }
            if (struct.statusmsg != null) {
                oprot.writeFieldBegin(STATUSMSG_FIELD_DESC);
                oprot.writeString(struct.statusmsg);
                oprot.writeFieldEnd();
            }
            if (struct.format_wait != null) {
                oprot.writeFieldBegin(FORMAT_WAIT_FIELD_DESC);
                oprot.writeString(struct.format_wait);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(WAIT_UNTIL_FIELD_DESC);
            oprot.writeI64(struct.wait_until);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(PACKAGE_ID_FIELD_DESC);
            oprot.writeI32(struct.packageID);
            oprot.writeFieldEnd();
            if (struct.packageName != null) {
                oprot.writeFieldBegin(PACKAGE_NAME_FIELD_DESC);
                oprot.writeString(struct.packageName);
                oprot.writeFieldEnd();
            }
            if (struct.plugin != null) {
                oprot.writeFieldBegin(PLUGIN_FIELD_DESC);
                oprot.writeString(struct.plugin);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class DownloadInfoTupleSchemeFactory implements SchemeFactory {
        public DownloadInfoTupleScheme getScheme() {
            return new DownloadInfoTupleScheme();
        }
    }

    private static class DownloadInfoTupleScheme extends TupleScheme<DownloadInfo> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, DownloadInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetFid()) {
                optionals.set(0);
            }
            if (struct.isSetName()) {
                optionals.set(1);
            }
            if (struct.isSetSpeed()) {
                optionals.set(2);
            }
            if (struct.isSetEta()) {
                optionals.set(3);
            }
            if (struct.isSetFormat_eta()) {
                optionals.set(4);
            }
            if (struct.isSetBleft()) {
                optionals.set(5);
            }
            if (struct.isSetSize()) {
                optionals.set(6);
            }
            if (struct.isSetFormat_size()) {
                optionals.set(7);
            }
            if (struct.isSetPercent()) {
                optionals.set(8);
            }
            if (struct.isSetStatus()) {
                optionals.set(9);
            }
            if (struct.isSetStatusmsg()) {
                optionals.set(10);
            }
            if (struct.isSetFormat_wait()) {
                optionals.set(11);
            }
            if (struct.isSetWait_until()) {
                optionals.set(12);
            }
            if (struct.isSetPackageID()) {
                optionals.set(13);
            }
            if (struct.isSetPackageName()) {
                optionals.set(14);
            }
            if (struct.isSetPlugin()) {
                optionals.set(15);
            }
            oprot.writeBitSet(optionals, 16);
            if (struct.isSetFid()) {
                oprot.writeI32(struct.fid);
            }
            if (struct.isSetName()) {
                oprot.writeString(struct.name);
            }
            if (struct.isSetSpeed()) {
                oprot.writeI64(struct.speed);
            }
            if (struct.isSetEta()) {
                oprot.writeI32(struct.eta);
            }
            if (struct.isSetFormat_eta()) {
                oprot.writeString(struct.format_eta);
            }
            if (struct.isSetBleft()) {
                oprot.writeI64(struct.bleft);
            }
            if (struct.isSetSize()) {
                oprot.writeI64(struct.size);
            }
            if (struct.isSetFormat_size()) {
                oprot.writeString(struct.format_size);
            }
            if (struct.isSetPercent()) {
                oprot.writeByte(struct.percent);
            }
            if (struct.isSetStatus()) {
                oprot.writeI32(struct.status.getValue());
            }
            if (struct.isSetStatusmsg()) {
                oprot.writeString(struct.statusmsg);
            }
            if (struct.isSetFormat_wait()) {
                oprot.writeString(struct.format_wait);
            }
            if (struct.isSetWait_until()) {
                oprot.writeI64(struct.wait_until);
            }
            if (struct.isSetPackageID()) {
                oprot.writeI32(struct.packageID);
            }
            if (struct.isSetPackageName()) {
                oprot.writeString(struct.packageName);
            }
            if (struct.isSetPlugin()) {
                oprot.writeString(struct.plugin);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, DownloadInfo struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(16);
            if (incoming.get(0)) {
                struct.fid = iprot.readI32();
                struct.setFidIsSet(true);
            }
            if (incoming.get(1)) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.speed = iprot.readI64();
                struct.setSpeedIsSet(true);
            }
            if (incoming.get(3)) {
                struct.eta = iprot.readI32();
                struct.setEtaIsSet(true);
            }
            if (incoming.get(4)) {
                struct.format_eta = iprot.readString();
                struct.setFormat_etaIsSet(true);
            }
            if (incoming.get(5)) {
                struct.bleft = iprot.readI64();
                struct.setBleftIsSet(true);
            }
            if (incoming.get(6)) {
                struct.size = iprot.readI64();
                struct.setSizeIsSet(true);
            }
            if (incoming.get(7)) {
                struct.format_size = iprot.readString();
                struct.setFormat_sizeIsSet(true);
            }
            if (incoming.get(8)) {
                struct.percent = iprot.readByte();
                struct.setPercentIsSet(true);
            }
            if (incoming.get(9)) {
                struct.status = org.pyload.thrift.DownloadStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
            }
            if (incoming.get(10)) {
                struct.statusmsg = iprot.readString();
                struct.setStatusmsgIsSet(true);
            }
            if (incoming.get(11)) {
                struct.format_wait = iprot.readString();
                struct.setFormat_waitIsSet(true);
            }
            if (incoming.get(12)) {
                struct.wait_until = iprot.readI64();
                struct.setWait_untilIsSet(true);
            }
            if (incoming.get(13)) {
                struct.packageID = iprot.readI32();
                struct.setPackageIDIsSet(true);
            }
            if (incoming.get(14)) {
                struct.packageName = iprot.readString();
                struct.setPackageNameIsSet(true);
            }
            if (incoming.get(15)) {
                struct.plugin = iprot.readString();
                struct.setPluginIsSet(true);
            }
        }
    }

}

